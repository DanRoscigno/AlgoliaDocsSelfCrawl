"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[93225],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||s;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86229:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const s={},o="system.processors_profile_log",i={unversionedId:"en/operations/system-tables/processors_profile_log",id:"en/operations/system-tables/processors_profile_log",title:"system.processors_profile_log",description:"system-processorsprofilelog}",source:"@site/docs/en/operations/system-tables/processors_profile_log.md",sourceDirName:"en/operations/system-tables",slug:"/en/operations/system-tables/processors_profile_log",permalink:"/docs/en/operations/system-tables/processors_profile_log",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/system-tables/processors_profile_log.md",tags:[],version:"current",frontMatter:{},sidebar:"english",previous:{title:"processes",permalink:"/docs/en/operations/system-tables/processes"},next:{title:"query_log",permalink:"/docs/en/operations/system-tables/query_log"}},l={},p=[],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"system-processors_profile_log"},"system.processors_profile_log"),(0,a.kt)("p",null,"This table contains profiling on processors level (that you can find in ",(0,a.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/explain#explain-pipeline"},(0,a.kt)("inlineCode",{parentName:"a"},"EXPLAIN PIPELINE")),")."),(0,a.kt)("p",null,"Columns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"event_date")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/date"},"Date"),") \u2014 The date when the event happened."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"event_time")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/datetime64"},"DateTime64"),") \u2014 The date and time when the event happened."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 ID of processor"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"parent_ids")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/array"},"Array(UInt64)"),") \u2014 Parent processors IDs"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"query_id")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/string"},"String"),") \u2014 ID of the query"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/lowcardinality"},"LowCardinality(String)"),") \u2014 Name of the processor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"elapsed_us")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 Number of microseconds this processor was executed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"input_wait_elapsed_us")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 Number of microseconds this processor was waiting for data (from other processor)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"output_wait_elapsed_us")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 Number of microseconds this processor was waiting because output port was full."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"plan_step")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 ID of the query plan step which created this processor. The value is zero if the processor was not added from any step."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"plan_group")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 Group of the processor if it was created by query plan step. A group is a logical partitioning of processors added from the same query plan step. Group is used only for beautifying the result of EXPLAIN PIPELINE result."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"input_rows")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 The number of rows consumed by processor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"input_bytes")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 The number of bytes consumed by processor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"output_rows")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 The number of rows generated by processor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"output_bytes")," (",(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 The number of bytes generated by processor.\n",(0,a.kt)("strong",{parentName:"li"},"Example"))),(0,a.kt)("p",null,"Query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN PIPELINE\nSELECT sleep(1)\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (Expression)                    \u2502\n\u2502 ExpressionTransform             \u2502\n\u2502   (SettingQuotaAndLimits)       \u2502\n\u2502     (ReadFromStorage)           \u2502\n\u2502     SourceFromSingleChunk 0 \u2192 1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSELECT sleep(1)\nSETTINGS log_processors_profiles = 1\nQuery id: feb5ed16-1c24-4227-aa54-78c02b3b27d4\n\u250c\u2500sleep(1)\u2500\u2510\n\u2502        0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n1 rows in set. Elapsed: 1.018 sec.\n\nSELECT\n    name,\n    elapsed_us,\n    input_wait_elapsed_us,\n    output_wait_elapsed_us\nFROM system.processors_profile_log\nWHERE query_id = 'feb5ed16-1c24-4227-aa54-78c02b3b27d4'\nORDER BY name ASC\n")),(0,a.kt)("p",null,"Result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500elapsed_us\u2500\u252c\u2500input_wait_elapsed_us\u2500\u252c\u2500output_wait_elapsed_us\u2500\u2510\n\u2502 ExpressionTransform     \u2502    1000497 \u2502                  2823 \u2502                    197 \u2502\n\u2502 LazyOutputFormat        \u2502         36 \u2502               1002188 \u2502                      0 \u2502\n\u2502 LimitsCheckingTransform \u2502         10 \u2502               1002994 \u2502                    106 \u2502\n\u2502 NullSource              \u2502          5 \u2502               1002074 \u2502                      0 \u2502\n\u2502 NullSource              \u2502          1 \u2502               1002084 \u2502                      0 \u2502\n\u2502 SourceFromSingleChunk   \u2502         45 \u2502                  4736 \u2502                1000819 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,"Here you can see:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ExpressionTransform")," was executing ",(0,a.kt)("inlineCode",{parentName:"li"},"sleep(1)")," function, so it ",(0,a.kt)("inlineCode",{parentName:"li"},"work")," will takes 1e6, and so ",(0,a.kt)("inlineCode",{parentName:"li"},"elapsed_us")," > 1e6."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SourceFromSingleChunk")," need to wait, because ",(0,a.kt)("inlineCode",{parentName:"li"},"ExpressionTransform")," does not accept any data during execution of ",(0,a.kt)("inlineCode",{parentName:"li"},"sleep(1)"),", so it will be in ",(0,a.kt)("inlineCode",{parentName:"li"},"PortFull")," state for 1e6 us, and so ",(0,a.kt)("inlineCode",{parentName:"li"},"output_wait_elapsed_us")," > 1e6."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LimitsCheckingTransform"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"NullSource"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"LazyOutputFormat")," need to wait until ",(0,a.kt)("inlineCode",{parentName:"li"},"ExpressionTransform")," will execute ",(0,a.kt)("inlineCode",{parentName:"li"},"sleep(1)")," to process the result, so ",(0,a.kt)("inlineCode",{parentName:"li"},"input_wait_elapsed_us")," > 1e6.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"See Also")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/statements/explain#explain-pipeline"},(0,a.kt)("inlineCode",{parentName:"a"},"EXPLAIN PIPELINE")))))}m.isMDXComponent=!0}}]);