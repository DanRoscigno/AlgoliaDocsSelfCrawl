"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[6362],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function m(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):m(m({},t),e)),r},l=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=c(r),y=n,d=u["".concat(s,".").concat(y)]||u[y]||p[y]||i;return r?o.createElement(d,m(m({ref:t},l),{},{components:r})):o.createElement(d,m({ref:t},l))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,m=new Array(i);m[0]=y;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:n,m[1]=a;for(var c=2;c<i;c++)m[c]=r[c];return o.createElement.apply(null,m)}return o.createElement.apply(null,r)}y.displayName="MDXCreateElement"},32488:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>m,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=r(87462),n=(r(67294),r(3905));const i={slug:"/en/operations/settings/memory-overcommit"},m="Memory overcommit",a={unversionedId:"en/operations/settings/memory-overcommit",id:"en/operations/settings/memory-overcommit",title:"Memory overcommit",description:"Memory overcommit is an experimental technique intended to allow to set more flexible memory limits for queries.",source:"@site/docs/en/operations/settings/memory-overcommit.md",sourceDirName:"en/operations/settings",slug:"/en/operations/settings/memory-overcommit",permalink:"/docs/en/operations/settings/memory-overcommit",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/settings/memory-overcommit.md",tags:[],version:"current",frontMatter:{slug:"/en/operations/settings/memory-overcommit"},sidebar:"english",previous:{title:"User Settings",permalink:"/docs/en/operations/settings/settings-users"},next:{title:"MergeTree tables settings",permalink:"/docs/en/operations/settings/merge-tree-settings"}},s={},c=[{value:"User overcommit tracker",id:"user-overcommit-tracker",level:2},{value:"Global overcommit tracker",id:"global-overcommit-tracker",level:2}],l={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"memory-overcommit"},"Memory overcommit"),(0,n.kt)("p",null,"Memory overcommit is an experimental technique intended to allow to set more flexible memory limits for queries."),(0,n.kt)("p",null,"The idea of this technique is to introduce settings which can represent guaranteed amount of memory a query can use.\nWhen memory overcommit is enabled and the memory limit is reached ClickHouse will select the most overcommitted query and try to free memory by killing this query."),(0,n.kt)("p",null,"When memory limit is reached any query will wait some time during attempt to allocate new memory.\nIf timeout is passed and memory is freed, the query continues execution.\nOtherwise an exception will be thrown and the query is killed."),(0,n.kt)("p",null,"Selection of query to stop or kill is performed by either global or user overcommit trackers depending on what memory limit is reached.\nIf overcommit tracker can't choose query to stop, MEMORY_LIMIT_EXCEEDED exception is thrown."),(0,n.kt)("h2",{id:"user-overcommit-tracker"},"User overcommit tracker"),(0,n.kt)("p",null,"User overcommit tracker finds a query with the biggest overcommit ratio in the user's query list.\nOvercommit ratio for a query is computed as number of allocated bytes divided by value of ",(0,n.kt)("inlineCode",{parentName:"p"},"memory_overcommit_ratio_denominator")," setting."),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"memory_overcommit_ratio_denominator")," for the query is equals to zero, overcommit tracker won't choose this query."),(0,n.kt)("p",null,"Waiting timeout is set by ",(0,n.kt)("inlineCode",{parentName:"p"},"memory_usage_overcommit_max_wait_microseconds")," setting."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT number FROM numbers(1000) GROUP BY number SETTINGS memory_overcommit_ratio_denominator=4000, memory_usage_overcommit_max_wait_microseconds=500\n")),(0,n.kt)("h2",{id:"global-overcommit-tracker"},"Global overcommit tracker"),(0,n.kt)("p",null,"Global overcommit tracker finds a query with the biggest overcommit ratio in the list of all queries.\nIn this case overcommit ratio is computed as number of allocated bytes divided by value of ",(0,n.kt)("inlineCode",{parentName:"p"},"memory_overcommit_ratio_denominator_for_user")," setting."),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"memory_overcommit_ratio_denominator_for_user")," for the query is equals to zero, overcommit tracker won't choose this query."),(0,n.kt)("p",null,"Waiting timeout is set by ",(0,n.kt)("inlineCode",{parentName:"p"},"global_memory_usage_overcommit_max_wait_microseconds")," parameter in the configuration file."))}p.isMDXComponent=!0}}]);