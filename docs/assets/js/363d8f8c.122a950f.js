"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[12021],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>m});var l=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,l,a=function(t,e){if(null==t)return{};var n,l,a={},r=Object.keys(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=l.createContext({}),p=function(t){var e=l.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=p(t.components);return l.createElement(u.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},k=l.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,u=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),c=p(n),k=a,m=c["".concat(u,".").concat(k)]||c[k]||d[k]||r;return n?l.createElement(m,o(o({ref:e},s),{},{components:n})):l.createElement(m,o({ref:e},s))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,o=new Array(r);o[0]=k;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=t,i[c]="string"==typeof t?t:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},66615:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var l=n(87462),a=(n(67294),n(3905));const r={slug:"/en/integrations/sql-clients/jupysql",sidebar_label:"Jupyter notebooks",description:"Jupysql is a multi-platform database tool for Jupyter."},o="Using JupySQL with ClickHouse",i={unversionedId:"en/integrations/sql-clients/jupysql",id:"en/integrations/sql-clients/jupysql",title:"Using JupySQL with ClickHouse",description:"Jupysql is a multi-platform database tool for Jupyter.",source:"@site/docs/en/integrations/sql-clients/jupysql.md",sourceDirName:"en/integrations/sql-clients",slug:"/en/integrations/sql-clients/jupysql",permalink:"/AlgoliaDocsSelfCrawl/en/integrations/sql-clients/jupysql",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/sql-clients/jupysql.md",tags:[],version:"current",frontMatter:{slug:"/en/integrations/sql-clients/jupysql",sidebar_label:"Jupyter notebooks",description:"Jupysql is a multi-platform database tool for Jupyter."},sidebar:"english",previous:{title:"DBeaver",permalink:"/AlgoliaDocsSelfCrawl/en/integrations/sql-clients/dbeaver"},next:{title:"TABLUM.IO",permalink:"/AlgoliaDocsSelfCrawl/en/integrations/sql-clients/tablum.io"}},u={},p=[],s={toc:p},c="wrapper";function d(t){let{components:e,...r}=t;return(0,a.kt)(c,(0,l.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-jupysql-with-clickhouse"},"Using JupySQL with ClickHouse"),(0,a.kt)("p",null,"In this guide we'll show an integration with ClickHouse."),(0,a.kt)("p",null,"We will use Jupysql to run queries on top of ClickHouse.\nOnce the data is loaded, we'll visualize it via SQL plotting."),(0,a.kt)("p",null,"The integration between Jupysql and ClickHouse is made possible by the use of the clickhouse_sqlalchemy library. This library allows for easy communication between the two systems, and enables users to connect to ClickHouse and pass the SQL dialect. Once connected, users can run SQL queries directly from the Clickhouse native UI, or from the Jupyter notebook directly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Install required packages\n%pip install --quiet jupysql clickhouse_sqlalchemy\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Note: you may need to restart the kernel to use updated packages.\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\nfrom sklearn_evaluation import plot\n\n# Import jupysql Jupyter extension to create SQL cells\n%load_ext sql\n%config SqlMagic.autocommit=False\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"You'd need to make sure your Clickhouse is up and reachable for the next stages. You can use either the local or the cloud version.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," you will need to adjust the connection string according to the instance type you're trying to connect to (url, user, password). In the example below we've used a local instance. To learn more about it, check out ",(0,a.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/getting-started/quick-start"},"this guide"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"%sql clickhouse://default:@localhost:8123/default\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"%%sql\nCREATE TABLE trips\n(\n    `trip_id` UInt32,\n    `vendor_id` Enum8('1' = 1, '2' = 2, '3' = 3, '4' = 4, 'CMT' = 5, 'VTS' = 6, 'DDS' = 7, 'B02512' = 10, 'B02598' = 11, 'B02617' = 12, 'B02682' = 13, 'B02764' = 14, '' = 15),\n    `pickup_date` Date,\n    `pickup_datetime` DateTime,\n    `dropoff_date` Date,\n    `dropoff_datetime` DateTime,\n    `store_and_fwd_flag` UInt8,\n    `rate_code_id` UInt8,\n    `pickup_longitude` Float64,\n    `pickup_latitude` Float64,\n    `dropoff_longitude` Float64,\n    `dropoff_latitude` Float64,\n    `passenger_count` UInt8,\n    `trip_distance` Float64,\n    `fare_amount` Float32,\n    `extra` Float32,\n    `mta_tax` Float32,\n    `tip_amount` Float32,\n    `tolls_amount` Float32,\n    `ehail_fee` Float32,\n    `improvement_surcharge` Float32,\n    `total_amount` Float32,\n    `payment_type` Enum8('UNK' = 0, 'CSH' = 1, 'CRE' = 2, 'NOC' = 3, 'DIS' = 4),\n    `trip_type` UInt8,\n    `pickup` FixedString(25),\n    `dropoff` FixedString(25),\n    `cab_type` Enum8('yellow' = 1, 'green' = 2, 'uber' = 3),\n    `pickup_nyct2010_gid` Int8,\n    `pickup_ctlabel` Float32,\n    `pickup_borocode` Int8,\n    `pickup_ct2010` String,\n    `pickup_boroct2010` String,\n    `pickup_cdeligibil` String,\n    `pickup_ntacode` FixedString(4),\n    `pickup_ntaname` String,\n    `pickup_puma` UInt16,\n    `dropoff_nyct2010_gid` UInt8,\n    `dropoff_ctlabel` Float32,\n    `dropoff_borocode` UInt8,\n    `dropoff_ct2010` String,\n    `dropoff_boroct2010` String,\n    `dropoff_cdeligibil` String,\n    `dropoff_ntacode` FixedString(4),\n    `dropoff_ntaname` String,\n    `dropoff_puma` UInt16\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMM(pickup_date)\nORDER BY pickup_datetime;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nDone.\n")),(0,a.kt)("table",null,(0,a.kt)("tr",null)),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"%%sql\nINSERT INTO trips\nSELECT * FROM s3(\n    'https://datasets-documentation.s3.eu-west-3.amazonaws.com/nyc-taxi/trips_{1..2}.gz',\n    'TabSeparatedWithNames', \"\n    `trip_id` UInt32,\n    `vendor_id` Enum8('1' = 1, '2' = 2, '3' = 3, '4' = 4, 'CMT' = 5, 'VTS' = 6, 'DDS' = 7, 'B02512' = 10, 'B02598' = 11, 'B02617' = 12, 'B02682' = 13, 'B02764' = 14, '' = 15),\n    `pickup_date` Date,\n    `pickup_datetime` DateTime,\n    `dropoff_date` Date,\n    `dropoff_datetime` DateTime,\n    `store_and_fwd_flag` UInt8,\n    `rate_code_id` UInt8,\n    `pickup_longitude` Float64,\n    `pickup_latitude` Float64,\n    `dropoff_longitude` Float64,\n    `dropoff_latitude` Float64,\n    `passenger_count` UInt8,\n    `trip_distance` Float64,\n    `fare_amount` Float32,\n    `extra` Float32,\n    `mta_tax` Float32,\n    `tip_amount` Float32,\n    `tolls_amount` Float32,\n    `ehail_fee` Float32,\n    `improvement_surcharge` Float32,\n    `total_amount` Float32,\n    `payment_type` Enum8('UNK' = 0, 'CSH' = 1, 'CRE' = 2, 'NOC' = 3, 'DIS' = 4),\n    `trip_type` UInt8,\n    `pickup` FixedString(25),\n    `dropoff` FixedString(25),\n    `cab_type` Enum8('yellow' = 1, 'green' = 2, 'uber' = 3),\n    `pickup_nyct2010_gid` Int8,\n    `pickup_ctlabel` Float32,\n    `pickup_borocode` Int8,\n    `pickup_ct2010` String,\n    `pickup_boroct2010` String,\n    `pickup_cdeligibil` String,\n    `pickup_ntacode` FixedString(4),\n    `pickup_ntaname` String,\n    `pickup_puma` UInt16,\n    `dropoff_nyct2010_gid` UInt8,\n    `dropoff_ctlabel` Float32,\n    `dropoff_borocode` UInt8,\n    `dropoff_ct2010` String,\n    `dropoff_boroct2010` String,\n    `dropoff_cdeligibil` String,\n    `dropoff_ntacode` FixedString(4),\n    `dropoff_ntaname` String,\n    `dropoff_puma` UInt16\n\") SETTINGS input_format_try_infer_datetimes = 0\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nDone.\n")),(0,a.kt)("table",null,(0,a.kt)("tr",null)),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"%sql SELECT count() FROM trips limit 5;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nDone.\n")),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"count()")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"1999657"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"%sql SELECT DISTINCT(pickup_ntaname) FROM trips limit 5;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nDone.\n")),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"pickup_ntaname")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"Morningside Heights")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"Hudson Yards-Chelsea-Flatiron-Union Square")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"Midtown-Midtown South")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"SoHo-TriBeCa-Civic Center-Little Italy")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"Murray Hill-Kips Bay"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"%sql SELECT round(avg(tip_amount), 2) FROM trips\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nDone.\n")),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"round(avg(tip_amount), 2)")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"1.68"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"%%sql\nSELECT\n    passenger_count,\n    ceil(avg(total_amount),2) AS average_total_amount\nFROM trips\nGROUP BY passenger_count\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nDone.\n")),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"passenger_count"),(0,a.kt)("th",null,"average_total_amount")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"0"),(0,a.kt)("td",null,"22.69")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"1"),(0,a.kt)("td",null,"15.97")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"2"),(0,a.kt)("td",null,"17.15")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"3"),(0,a.kt)("td",null,"16.76")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"4"),(0,a.kt)("td",null,"17.33")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"5"),(0,a.kt)("td",null,"16.35")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"6"),(0,a.kt)("td",null,"16.04")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"7"),(0,a.kt)("td",null,"59.8")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"8"),(0,a.kt)("td",null,"36.41")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"9"),(0,a.kt)("td",null,"9.81"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"%%sql\nSELECT\n    pickup_date,\n    pickup_ntaname,\n    SUM(1) AS number_of_trips\nFROM trips\nGROUP BY pickup_date, pickup_ntaname\nORDER BY pickup_date ASC\nlimit 5;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nDone.\n")),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"pickup_date"),(0,a.kt)("th",null,"pickup_ntaname"),(0,a.kt)("th",null,"number_of_trips")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"2015-07-01"),(0,a.kt)("td",null,"Bushwick North"),(0,a.kt)("td",null,"2")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"2015-07-01"),(0,a.kt)("td",null,"Brighton Beach"),(0,a.kt)("td",null,"1")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"2015-07-01"),(0,a.kt)("td",null,"Briarwood-Jamaica Hills"),(0,a.kt)("td",null,"3")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"2015-07-01"),(0,a.kt)("td",null,"Williamsburg"),(0,a.kt)("td",null,"1")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"2015-07-01"),(0,a.kt)("td",null,"Queensbridge-Ravenswood-Long Island City"),(0,a.kt)("td",null,"9"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# %sql DESCRIBE trips;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# %sql SELECT DISTINCT(trip_distance) FROM trips limit 50;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"%%sql --save short-trips --no-execute\nSELECT *\nFROM trips\nWHERE trip_distance < 6.3\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  clickhouse://default:***@localhost:8123/default\nSkipping execution...\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"%sqlplot histogram --table short-trips --column trip_distance --bins 10 --with short-trips\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<AxesSubplot: title={'center': \"'trip_distance' from 'short-trips'\"}, xlabel='trip_distance', ylabel='Count'>\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"histogram example",src:n(65571).Z,width:"597",height:"455"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'ax = %sqlplot histogram --table short-trips --column trip_distance --bins 50 --with short-trips\nax.grid()\nax.set_title("Trip distance from trips < 6.3")\n_ = ax.set_xlabel("Trip distance")\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"histogram second example",src:n(65571).Z,width:"597",height:"455"})))}d.isMDXComponent=!0},65571:(t,e,n)=>{n.d(e,{Z:()=>l});const l=n.p+"assets/images/jupysql-plot-1-b7b8f008361836bbc95122f756f01528.png"}}]);