"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[85303],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var l=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=l.createContext({}),d=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return l.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(a),m=n,g=c["".concat(o,".").concat(m)]||c[m]||u[m]||r;return a?l.createElement(g,s(s({ref:t},p),{},{components:a})):l.createElement(g,s({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:n,s[1]=i;for(var d=2;d<r;d++)s[d]=a[d];return l.createElement.apply(null,s)}return l.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7846:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var l=a(87462),n=(a(67294),a(3905));const r={slug:"/en/sql-reference/statements/system",sidebar_position:36,sidebar_label:"SYSTEM"},s="SYSTEM Statements",i={unversionedId:"en/sql-reference/statements/system",id:"en/sql-reference/statements/system",title:"SYSTEM Statements",description:"RELOAD EMBEDDED DICTIONARIES",source:"@site/docs/en/sql-reference/statements/system.md",sourceDirName:"en/sql-reference/statements",slug:"/en/sql-reference/statements/system",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/system",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/statements/system.md",tags:[],version:"current",sidebarPosition:36,frontMatter:{slug:"/en/sql-reference/statements/system",sidebar_position:36,sidebar_label:"SYSTEM"},sidebar:"english",previous:{title:"DELETE",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/delete"},next:{title:"SHOW",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/show"}},o={},d=[{value:"RELOAD EMBEDDED DICTIONARIES",id:"reload-embedded-dictionaries",level:2},{value:"RELOAD DICTIONARIES",id:"reload-dictionaries",level:2},{value:"RELOAD DICTIONARY",id:"reload-dictionary",level:2},{value:"RELOAD MODELS",id:"reload-models",level:2},{value:"RELOAD MODEL",id:"reload-model",level:2},{value:"RELOAD FUNCTIONS",id:"reload-functions",level:2},{value:"DROP DNS CACHE",id:"drop-dns-cache",level:2},{value:"DROP MARK CACHE",id:"drop-mark-cache",level:2},{value:"DROP REPLICA",id:"drop-replica",level:2},{value:"DROP UNCOMPRESSED CACHE",id:"drop-uncompressed-cache",level:2},{value:"DROP COMPILED EXPRESSION CACHE",id:"drop-compiled-expression-cache",level:2},{value:"DROP QUERY CACHE",id:"drop-query-cache",level:2},{value:"FLUSH LOGS",id:"flush-logs",level:2},{value:"RELOAD CONFIG",id:"reload-config",level:2},{value:"RELOAD USERS",id:"reload-users",level:2},{value:"SHUTDOWN",id:"shutdown",level:2},{value:"KILL",id:"kill",level:2},{value:"Managing Distributed Tables",id:"managing-distributed-tables",level:2},{value:"STOP DISTRIBUTED SENDS",id:"stop-distributed-sends",level:3},{value:"FLUSH DISTRIBUTED",id:"flush-distributed",level:3},{value:"START DISTRIBUTED SENDS",id:"start-distributed-sends",level:3},{value:"Managing MergeTree Tables",id:"managing-mergetree-tables",level:2},{value:"STOP MERGES",id:"stop-merges",level:3},{value:"START MERGES",id:"start-merges",level:3},{value:"STOP TTL MERGES",id:"stop-ttl-merges",level:3},{value:"START TTL MERGES",id:"start-ttl-merges",level:3},{value:"STOP MOVES",id:"stop-moves",level:3},{value:"START MOVES",id:"start-moves",level:3},{value:"SYSTEM UNFREEZE",id:"query_language-system-unfreeze",level:3},{value:"Managing ReplicatedMergeTree Tables",id:"managing-replicatedmergetree-tables",level:2},{value:"STOP FETCHES",id:"stop-fetches",level:3},{value:"START FETCHES",id:"start-fetches",level:3},{value:"STOP REPLICATED SENDS",id:"stop-replicated-sends",level:3},{value:"START REPLICATED SENDS",id:"start-replicated-sends",level:3},{value:"STOP REPLICATION QUEUES",id:"stop-replication-queues",level:3},{value:"START REPLICATION QUEUES",id:"start-replication-queues",level:3},{value:"SYNC REPLICA",id:"sync-replica",level:3},{value:"RESTART REPLICA",id:"restart-replica",level:3},{value:"RESTORE REPLICA",id:"restore-replica",level:3},{value:"RESTART REPLICAS",id:"restart-replicas",level:3},{value:"DROP FILESYSTEM CACHE",id:"drop-filesystem-cache",level:3},{value:"SYNC FILE CACHE",id:"sync-file-cache",level:3}],p={toc:d},c="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"system-statements"},"SYSTEM Statements"),(0,n.kt)("h2",{id:"reload-embedded-dictionaries"},"RELOAD EMBEDDED DICTIONARIES"),(0,n.kt)("p",null,"Reload all ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/dictionaries/internal-dicts"},"Internal dictionaries"),".\nBy default, internal dictionaries are disabled.\nAlways returns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," regardless of the result of the internal dictionary update."),(0,n.kt)("h2",{id:"reload-dictionaries"},"RELOAD DICTIONARIES"),(0,n.kt)("p",null,"Reloads all dictionaries that have been successfully loaded before.\nBy default, dictionaries are loaded lazily (see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings#server_configuration_parameters-dictionaries_lazy_load"},"dictionaries_lazy_load"),"), so instead of being loaded automatically at startup, they are initialized on first access through dictGet function or SELECT from tables with ENGINE = Dictionary. The ",(0,n.kt)("inlineCode",{parentName:"p"},"SYSTEM RELOAD DICTIONARIES")," query reloads such dictionaries (LOADED).\nAlways returns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," regardless of the result of the dictionary update."),(0,n.kt)("h2",{id:"reload-dictionary"},"RELOAD DICTIONARY"),(0,n.kt)("p",null,"Completely reloads a dictionary ",(0,n.kt)("inlineCode",{parentName:"p"},"dictionary_name"),", regardless of the state of the dictionary (LOADED / NOT_LOADED / FAILED).\nAlways returns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," regardless of the result of updating the dictionary.\nThe status of the dictionary can be checked by querying the ",(0,n.kt)("inlineCode",{parentName:"p"},"system.dictionaries")," table."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name, status FROM system.dictionaries;\n")),(0,n.kt)("h2",{id:"reload-models"},"RELOAD MODELS"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"This statement and ",(0,n.kt)("inlineCode",{parentName:"p"},"SYSTEM RELOAD MODEL")," merely unload catboost models from the clickhouse-library-bridge. The function ",(0,n.kt)("inlineCode",{parentName:"p"},"catboostEvaluate()"),"\nloads a model upon first access if it is not loaded yet.")),(0,n.kt)("p",null,"Unloads all CatBoost models."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Syntax")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM RELOAD MODELS [ON CLUSTER cluster_name]\n")),(0,n.kt)("h2",{id:"reload-model"},"RELOAD MODEL"),(0,n.kt)("p",null,"Unloads a CatBoost model at ",(0,n.kt)("inlineCode",{parentName:"p"},"model_path"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Syntax")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM RELOAD MODEL [ON CLUSTER cluster_name] <model_path>\n")),(0,n.kt)("h2",{id:"reload-functions"},"RELOAD FUNCTIONS"),(0,n.kt)("p",null,"Reloads all registered ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/#executable-user-defined-functions"},"executable user defined functions")," or one of them from a configuration file."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Syntax")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"RELOAD FUNCTIONS [ON CLUSTER cluster_name]\nRELOAD FUNCTION [ON CLUSTER cluster_name] function_name\n")),(0,n.kt)("h2",{id:"drop-dns-cache"},"DROP DNS CACHE"),(0,n.kt)("p",null,"Resets ClickHouse\u2019s internal DNS cache. Sometimes (for old ClickHouse versions) it is necessary to use this command when changing the infrastructure (changing the IP address of another ClickHouse server or the server used by dictionaries)."),(0,n.kt)("p",null,"For more convenient (automatic) cache management, see disable_internal_dns_cache, dns_cache_update_period parameters."),(0,n.kt)("h2",{id:"drop-mark-cache"},"DROP MARK CACHE"),(0,n.kt)("p",null,"Resets the mark cache."),(0,n.kt)("h2",{id:"drop-replica"},"DROP REPLICA"),(0,n.kt)("p",null,"Dead replicas can be dropped using following syntax:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM DROP REPLICA 'replica_name' FROM TABLE database.table;\nSYSTEM DROP REPLICA 'replica_name' FROM DATABASE database;\nSYSTEM DROP REPLICA 'replica_name';\nSYSTEM DROP REPLICA 'replica_name' FROM ZKPATH '/path/to/table/in/zk';\n")),(0,n.kt)("p",null,"Queries will remove the replica path in ZooKeeper. It is useful when the replica is dead and its metadata cannot be removed from ZooKeeper by ",(0,n.kt)("inlineCode",{parentName:"p"},"DROP TABLE")," because there is no such table anymore. It will only drop the inactive/stale replica, and it cannot drop local replica, please use ",(0,n.kt)("inlineCode",{parentName:"p"},"DROP TABLE")," for that. ",(0,n.kt)("inlineCode",{parentName:"p"},"DROP REPLICA")," does not drop any tables and does not remove any data or metadata from disk."),(0,n.kt)("p",null,"The first one removes metadata of ",(0,n.kt)("inlineCode",{parentName:"p"},"'replica_name'")," replica of ",(0,n.kt)("inlineCode",{parentName:"p"},"database.table")," table.\nThe second one does the same for all replicated tables in the database.\nThe third one does the same for all replicated tables on the local server.\nThe fourth one is useful to remove metadata of dead replica when all other replicas of a table were dropped. It requires the table path to be specified explicitly. It must be the same path as was passed to the first argument of ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," engine on table creation."),(0,n.kt)("h2",{id:"drop-uncompressed-cache"},"DROP UNCOMPRESSED CACHE"),(0,n.kt)("p",null,"Reset the uncompressed data cache.\nThe uncompressed data cache is enabled/disabled with the query/user/profile-level setting ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/settings#setting-use_uncompressed_cache"},"use_uncompressed_cache"),".\nIts size can be configured using the server-level setting ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings#server-settings-uncompressed_cache_size"},"uncompressed_cache_size"),"."),(0,n.kt)("h2",{id:"drop-compiled-expression-cache"},"DROP COMPILED EXPRESSION CACHE"),(0,n.kt)("p",null,"Reset the compiled expression cache.\nThe compiled expression cache is enabled/disabled with the query/user/profile-level setting ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/settings#compile-expressions"},"compile_expressions"),"."),(0,n.kt)("h2",{id:"drop-query-cache"},"DROP QUERY CACHE"),(0,n.kt)("p",null,"Resets the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache"),"."),(0,n.kt)("h2",{id:"flush-logs"},"FLUSH LOGS"),(0,n.kt)("p",null,"Flushes buffered log messages to system tables, e.g.\xa0system.query_log. Mainly useful for debugging since most system tables have a default flush interval of 7.5 seconds.\nThis will also create system tables even if message queue is empty."),(0,n.kt)("h2",{id:"reload-config"},"RELOAD CONFIG"),(0,n.kt)("p",null,"Reloads ClickHouse configuration. Used when configuration is stored in ZooKeeper."),(0,n.kt)("h2",{id:"reload-users"},"RELOAD USERS"),(0,n.kt)("p",null,"Reloads all access storages, including: users.xml, local disk access storage, replicated (in ZooKeeper) access storage. Note that ",(0,n.kt)("inlineCode",{parentName:"p"},"SYSTEM RELOAD CONFIG")," will only reload users.xml access storage."),(0,n.kt)("h2",{id:"shutdown"},"SHUTDOWN"),(0,n.kt)("p",null,"Normally shuts down ClickHouse (like ",(0,n.kt)("inlineCode",{parentName:"p"},"service clickhouse-server stop")," / ",(0,n.kt)("inlineCode",{parentName:"p"},"kill {$pid_clickhouse-server}"),")"),(0,n.kt)("h2",{id:"kill"},"KILL"),(0,n.kt)("p",null,"Aborts ClickHouse process (like ",(0,n.kt)("inlineCode",{parentName:"p"},"kill -9 {$ pid_clickhouse-server}"),")"),(0,n.kt)("h2",{id:"managing-distributed-tables"},"Managing Distributed Tables"),(0,n.kt)("p",null,"ClickHouse can manage ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"distributed")," tables. When a user inserts data into these tables, ClickHouse first creates a queue of the data that should be sent to cluster nodes, then asynchronously sends it. You can manage queue processing with the ",(0,n.kt)("a",{parentName:"p",href:"#query_language-system-stop-distributed-sends"},"STOP DISTRIBUTED SENDS"),", ",(0,n.kt)("a",{parentName:"p",href:"#query_language-system-flush-distributed"},"FLUSH DISTRIBUTED"),", and ",(0,n.kt)("a",{parentName:"p",href:"#query_language-system-start-distributed-sends"},"START DISTRIBUTED SENDS")," queries. You can also synchronously insert distributed data with the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/settings#insert_distributed_sync"},"insert_distributed_sync")," setting."),(0,n.kt)("h3",{id:"stop-distributed-sends"},"STOP DISTRIBUTED SENDS"),(0,n.kt)("p",null,"Disables background data distribution when inserting data into distributed tables."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM STOP DISTRIBUTED SENDS [db.]<distributed_table_name>\n")),(0,n.kt)("h3",{id:"flush-distributed"},"FLUSH DISTRIBUTED"),(0,n.kt)("p",null,"Forces ClickHouse to send data to cluster nodes synchronously. If any nodes are unavailable, ClickHouse throws an exception and stops query execution. You can retry the query until it succeeds, which will happen when all nodes are back online."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM FLUSH DISTRIBUTED [db.]<distributed_table_name>\n")),(0,n.kt)("h3",{id:"start-distributed-sends"},"START DISTRIBUTED SENDS"),(0,n.kt)("p",null,"Enables background data distribution when inserting data into distributed tables."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM START DISTRIBUTED SENDS [db.]<distributed_table_name>\n")),(0,n.kt)("h2",{id:"managing-mergetree-tables"},"Managing MergeTree Tables"),(0,n.kt)("p",null,"ClickHouse can manage background processes in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," tables."),(0,n.kt)("h3",{id:"stop-merges"},"STOP MERGES"),(0,n.kt)("p",null,"Provides possibility to stop background merges for tables in the MergeTree family:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM STOP MERGES [ON VOLUME <volume_name> | [db.]merge_tree_family_table_name]\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"DETACH / ATTACH")," table will start background merges for the table even in case when merges have been stopped for all MergeTree tables before.")),(0,n.kt)("h3",{id:"start-merges"},"START MERGES"),(0,n.kt)("p",null,"Provides possibility to start background merges for tables in the MergeTree family:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM START MERGES [ON VOLUME <volume_name> | [db.]merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"stop-ttl-merges"},"STOP TTL MERGES"),(0,n.kt)("p",null,"Provides possibility to stop background delete old data according to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree#table_engine-mergetree-ttl"},"TTL expression")," for tables in the MergeTree family:\nReturns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," even if table does not exist or table has not MergeTree engine. Returns error when database does not exist:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM STOP TTL MERGES [[db.]merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"start-ttl-merges"},"START TTL MERGES"),(0,n.kt)("p",null,"Provides possibility to start background delete old data according to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree#table_engine-mergetree-ttl"},"TTL expression")," for tables in the MergeTree family:\nReturns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," even if table does not exist. Returns error when database does not exist:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM START TTL MERGES [[db.]merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"stop-moves"},"STOP MOVES"),(0,n.kt)("p",null,"Provides possibility to stop background move data according to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree#mergetree-table-ttl"},"TTL table expression with TO VOLUME or TO DISK clause")," for tables in the MergeTree family:\nReturns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," even if table does not exist. Returns error when database does not exist:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM STOP MOVES [[db.]merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"start-moves"},"START MOVES"),(0,n.kt)("p",null,"Provides possibility to start background move data according to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree#mergetree-table-ttl"},"TTL table expression with TO VOLUME and TO DISK clause")," for tables in the MergeTree family:\nReturns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," even if table does not exist. Returns error when database does not exist:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM START MOVES [[db.]merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"query_language-system-unfreeze"},"SYSTEM UNFREEZE"),(0,n.kt)("p",null,"Clears freezed backup with the specified name from all the disks. See more about unfreezing separate parts in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/partition#alter_unfreeze-partition"},"ALTER TABLE table_name UNFREEZE WITH NAME ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM UNFREEZE WITH NAME <backup_name>\n")),(0,n.kt)("h2",{id:"managing-replicatedmergetree-tables"},"Managing ReplicatedMergeTree Tables"),(0,n.kt)("p",null,"ClickHouse can manage background replication related processes in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication#table_engines-replication"},"ReplicatedMergeTree")," tables."),(0,n.kt)("h3",{id:"stop-fetches"},"STOP FETCHES"),(0,n.kt)("p",null,"Provides possibility to stop background fetches for inserted parts for tables in the ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," family:\nAlways returns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," regardless of the table engine and even if table or database does not exist."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM STOP FETCHES [[db.]replicated_merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"start-fetches"},"START FETCHES"),(0,n.kt)("p",null,"Provides possibility to start background fetches for inserted parts for tables in the ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," family:\nAlways returns ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok.")," regardless of the table engine and even if table or database does not exist."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM START FETCHES [[db.]replicated_merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"stop-replicated-sends"},"STOP REPLICATED SENDS"),(0,n.kt)("p",null,"Provides possibility to stop background sends to other replicas in cluster for new inserted parts for tables in the ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," family:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM STOP REPLICATED SENDS [[db.]replicated_merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"start-replicated-sends"},"START REPLICATED SENDS"),(0,n.kt)("p",null,"Provides possibility to start background sends to other replicas in cluster for new inserted parts for tables in the ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," family:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM START REPLICATED SENDS [[db.]replicated_merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"stop-replication-queues"},"STOP REPLICATION QUEUES"),(0,n.kt)("p",null,"Provides possibility to stop background fetch tasks from replication queues which stored in Zookeeper for tables in the ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," family. Possible background tasks types - merges, fetches, mutation, DDL statements with ON CLUSTER clause:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM STOP REPLICATION QUEUES [[db.]replicated_merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"start-replication-queues"},"START REPLICATION QUEUES"),(0,n.kt)("p",null,"Provides possibility to start background fetch tasks from replication queues which stored in Zookeeper for tables in the ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," family. Possible background tasks types - merges, fetches, mutation, DDL statements with ON CLUSTER clause:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM START REPLICATION QUEUES [[db.]replicated_merge_tree_family_table_name]\n")),(0,n.kt)("h3",{id:"sync-replica"},"SYNC REPLICA"),(0,n.kt)("p",null,"Wait until a ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," table will be synced with other replicas in a cluster. Will run until ",(0,n.kt)("inlineCode",{parentName:"p"},"receive_timeout")," if fetches currently disabled for the table."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM SYNC REPLICA [ON CLUSTER cluster_name] [db.]replicated_merge_tree_family_table_name\n")),(0,n.kt)("p",null,"After running this statement the ",(0,n.kt)("inlineCode",{parentName:"p"},"[db.]replicated_merge_tree_family_table_name")," fetches commands from the common replicated log into its own replication queue, and then the query waits till the replica processes all of the fetched commands."),(0,n.kt)("h3",{id:"restart-replica"},"RESTART REPLICA"),(0,n.kt)("p",null,"Provides possibility to reinitialize Zookeeper session's state for ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," table, will compare current state with Zookeeper as source of truth and add tasks to Zookeeper queue if needed.\nInitialization of replication queue based on ZooKeeper data happens in the same way as for ",(0,n.kt)("inlineCode",{parentName:"p"},"ATTACH TABLE")," statement. For a short time, the table will be unavailable for any operations."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM RESTART REPLICA [db.]replicated_merge_tree_family_table_name\n")),(0,n.kt)("h3",{id:"restore-replica"},"RESTORE REPLICA"),(0,n.kt)("p",null,"Restores a replica if data is ","[possibly]"," present but Zookeeper metadata is lost."),(0,n.kt)("p",null,"Works only on readonly ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," tables."),(0,n.kt)("p",null,"One may execute query after:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"ZooKeeper root ",(0,n.kt)("inlineCode",{parentName:"li"},"/")," loss."),(0,n.kt)("li",{parentName:"ul"},"Replicas path ",(0,n.kt)("inlineCode",{parentName:"li"},"/replicas")," loss."),(0,n.kt)("li",{parentName:"ul"},"Individual replica path ",(0,n.kt)("inlineCode",{parentName:"li"},"/replicas/replica_name/")," loss.")),(0,n.kt)("p",null,"Replica attaches locally found parts and sends info about them to Zookeeper.\nParts present on a replica before metadata loss are not re-fetched from other ones if not being outdated (so replica restoration does not mean re-downloading all data over the network)."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Parts in all states are moved to ",(0,n.kt)("inlineCode",{parentName:"p"},"detached/")," folder. Parts active before data loss (committed) are attached.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Syntax")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM RESTORE REPLICA [db.]replicated_merge_tree_family_table_name [ON CLUSTER cluster_name]\n")),(0,n.kt)("p",null,"Alternative syntax:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM RESTORE REPLICA [ON CLUSTER cluster_name] [db.]replicated_merge_tree_family_table_name\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Creating a table on multiple servers. After the replica's metadata in ZooKeeper is lost, the table will attach as read-only as metadata is missing. The last query needs to execute on every replica."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test(n UInt32)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/test/', '{replica}')\nORDER BY n PARTITION BY n % 10;\n\nINSERT INTO test SELECT * FROM numbers(1000);\n\n-- zookeeper_delete_path(\"/clickhouse/tables/test\", recursive=True) <- root loss.\n\nSYSTEM RESTART REPLICA test;\nSYSTEM RESTORE REPLICA test;\n")),(0,n.kt)("p",null,"Another way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM RESTORE REPLICA test ON CLUSTER cluster;\n")),(0,n.kt)("h3",{id:"restart-replicas"},"RESTART REPLICAS"),(0,n.kt)("p",null,"Provides possibility to reinitialize Zookeeper sessions state for all ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedMergeTree")," tables, will compare current state with Zookeeper as source of true and add tasks to Zookeeper queue if needed"),(0,n.kt)("h3",{id:"drop-filesystem-cache"},"DROP FILESYSTEM CACHE"),(0,n.kt)("p",null,"Allows to drop filesystem cache."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM DROP FILESYSTEM CACHE\n")),(0,n.kt)("h3",{id:"sync-file-cache"},"SYNC FILE CACHE"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"It's too heavy and has potential for misuse.")),(0,n.kt)("p",null,"Will do sync syscall. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SYSTEM SYNC FILE CACHE\n")))}u.isMDXComponent=!0}}]);