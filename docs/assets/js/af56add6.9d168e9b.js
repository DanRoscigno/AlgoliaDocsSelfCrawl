"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[68668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(o,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={slug:"/en/sql-reference/functions/ext-dict-functions",sidebar_position:58,sidebar_label:"Dictionaries"},i="Functions for Working with Dictionaries",s={unversionedId:"en/sql-reference/functions/ext-dict-functions",id:"en/sql-reference/functions/ext-dict-functions",title:"Functions for Working with Dictionaries",description:"For dictionaries created with DDL queries, the dict_name parameter must be fully specified, like .. Otherwise, the current database is used.",source:"@site/docs/en/sql-reference/functions/ext-dict-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/ext-dict-functions",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/ext-dict-functions",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/functions/ext-dict-functions.md",tags:[],version:"current",sidebarPosition:58,frontMatter:{slug:"/en/sql-reference/functions/ext-dict-functions",sidebar_position:58,sidebar_label:"Dictionaries"},sidebar:"english",previous:{title:"JSON",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/json-functions"},next:{title:"Embedded Dictionaries",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/ym-dict-functions"}},o={},c=[{value:"dictGet, dictGetOrDefault, dictGetOrNull",id:"dictget-dictgetordefault-dictgetornull",level:2},{value:"dictHas",id:"dicthas",level:2},{value:"dictGetHierarchy",id:"dictgethierarchy",level:2},{value:"dictIsIn",id:"dictisin",level:2},{value:"dictGetChildren",id:"dictgetchildren",level:2},{value:"dictGetDescendant",id:"dictgetdescendant",level:2},{value:"Other Functions",id:"other-functions",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"functions-for-working-with-dictionaries"},"Functions for Working with Dictionaries"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For dictionaries created with ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/dictionary"},"DDL queries"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"dict_name")," parameter must be fully specified, like ",(0,r.kt)("inlineCode",{parentName:"p"},"<database>.<dict_name>"),". Otherwise, the current database is used.")),(0,r.kt)("p",null,"For information on connecting and configuring dictionaries, see ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/dictionaries/external-dictionaries/external-dicts"},"Dictionaries"),"."),(0,r.kt)("h2",{id:"dictget-dictgetordefault-dictgetornull"},"dictGet, dictGetOrDefault, dictGetOrNull"),(0,r.kt)("p",null,"Retrieves values from a dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dictGet('dict_name', attr_names, id_expr)\ndictGetOrDefault('dict_name', attr_names, id_expr, default_value_expr)\ndictGetOrNull('dict_name', attr_name, id_expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dict_name")," \u2014 Name of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"attr_names")," \u2014 Name of the column of the dictionary, ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),", or tuple of column names, ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id_expr")," \u2014 Key value. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning dictionary key-type value or ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"-type value depending on the dictionary configuration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default_value_expr")," \u2014 Values returned if the dictionary does not contain a row with the ",(0,r.kt)("inlineCode",{parentName:"li"},"id_expr")," key. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," or ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression"),"), returning the value (or values) in the data types configured for the ",(0,r.kt)("inlineCode",{parentName:"li"},"attr_names")," attribute.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If ClickHouse parses the attribute successfully in the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/dictionaries/external-dictionaries/external-dicts-dict-structure#ext_dict_structure-attributes"},"attribute\u2019s data type"),", functions return the value of the dictionary attribute that corresponds to ",(0,r.kt)("inlineCode",{parentName:"p"},"id_expr"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If there is no the key, corresponding to ",(0,r.kt)("inlineCode",{parentName:"p"},"id_expr"),", in the dictionary, then:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"- `dictGet` returns the content of the `<null_value>` element specified for the attribute in the dictionary configuration.\n- `dictGetOrDefault` returns the value passed as the `default_value_expr` parameter.\n- `dictGetOrNull` returns `NULL` in case key was not found in dictionary.\n")))),(0,r.kt)("p",null,"ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example for simple key dictionary")),(0,r.kt)("p",null,"Create a text file ",(0,r.kt)("inlineCode",{parentName:"p"},"ext-dict-test.csv")," containing the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"1,1\n2,2\n")),(0,r.kt)("p",null,"The first column is ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", the second column is ",(0,r.kt)("inlineCode",{parentName:"p"},"c1"),"."),(0,r.kt)("p",null,"Configure the dictionary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <dictionary>\n        <name>ext-dict-test</name>\n        <source>\n            <file>\n                <path>/path-to/ext-dict-test.csv</path>\n                <format>CSV</format>\n            </file>\n        </source>\n        <layout>\n            <flat />\n        </layout>\n        <structure>\n            <id>\n                <name>id</name>\n            </id>\n            <attribute>\n                <name>c1</name>\n                <type>UInt32</type>\n                <null_value></null_value>\n            </attribute>\n        </structure>\n        <lifetime>0</lifetime>\n    </dictionary>\n</clickhouse>\n")),(0,r.kt)("p",null,"Perform the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    dictGetOrDefault('ext-dict-test', 'c1', number + 1, toUInt32(number * 10)) AS val,\n    toTypeName(val) AS type\nFROM system.numbers\nLIMIT 3;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500val\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 UInt32 \u2502\n\u2502   2 \u2502 UInt32 \u2502\n\u2502  20 \u2502 UInt32 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example for complex key dictionary")),(0,r.kt)("p",null,"Create a text file ",(0,r.kt)("inlineCode",{parentName:"p"},"ext-dict-mult.csv")," containing the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"1,1,'1'\n2,2,'2'\n3,3,'3'\n")),(0,r.kt)("p",null,"The first column is ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", the second is ",(0,r.kt)("inlineCode",{parentName:"p"},"c1"),", the third is ",(0,r.kt)("inlineCode",{parentName:"p"},"c2"),"."),(0,r.kt)("p",null,"Configure the dictionary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <dictionary>\n        <name>ext-dict-mult</name>\n        <source>\n            <file>\n                <path>/path-to/ext-dict-mult.csv</path>\n                <format>CSV</format>\n            </file>\n        </source>\n        <layout>\n            <flat />\n        </layout>\n        <structure>\n            <id>\n                <name>id</name>\n            </id>\n            <attribute>\n                <name>c1</name>\n                <type>UInt32</type>\n                <null_value></null_value>\n            </attribute>\n            <attribute>\n                <name>c2</name>\n                <type>String</type>\n                <null_value></null_value>\n            </attribute>\n        </structure>\n        <lifetime>0</lifetime>\n    </dictionary>\n</clickhouse>\n")),(0,r.kt)("p",null,"Perform the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    dictGet('ext-dict-mult', ('c1','c2'), number + 1) AS val,\n    toTypeName(val) AS type\nFROM system.numbers\nLIMIT 3;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500val\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (1,'1') \u2502 Tuple(UInt8, String)  \u2502\n\u2502 (2,'2') \u2502 Tuple(UInt8, String)  \u2502\n\u2502 (3,'3') \u2502 Tuple(UInt8, String)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example for range key dictionary")),(0,r.kt)("p",null,"Input table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE range_key_dictionary_source_table\n(\n    key UInt64,\n    start_date Date,\n    end_date Date,\n    value String,\n    value_nullable Nullable(String)\n)\nENGINE = TinyLog();\n\nINSERT INTO range_key_dictionary_source_table VALUES(1, toDate('2019-05-20'), toDate('2019-05-20'), 'First', 'First');\nINSERT INTO range_key_dictionary_source_table VALUES(2, toDate('2019-05-20'), toDate('2019-05-20'), 'Second', NULL);\nINSERT INTO range_key_dictionary_source_table VALUES(3, toDate('2019-05-20'), toDate('2019-05-20'), 'Third', 'Third');\n")),(0,r.kt)("p",null,"Create the dictionary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY range_key_dictionary\n(\n    key UInt64,\n    start_date Date,\n    end_date Date,\n    value String,\n    value_nullable Nullable(String)\n)\nPRIMARY KEY key\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_key_dictionary_source_table'))\nLIFETIME(MIN 1 MAX 1000)\nLAYOUT(RANGE_HASHED())\nRANGE(MIN start_date MAX end_date);\n")),(0,r.kt)("p",null,"Perform the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    (number, toDate('2019-05-20')),\n    dictHas('range_key_dictionary', number, toDate('2019-05-20')),\n    dictGetOrNull('range_key_dictionary', 'value', number, toDate('2019-05-20')),\n    dictGetOrNull('range_key_dictionary', 'value_nullable', number, toDate('2019-05-20')),\n    dictGetOrNull('range_key_dictionary', ('value', 'value_nullable'), number, toDate('2019-05-20'))\nFROM system.numbers LIMIT 5 FORMAT TabSeparated;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"(0,'2019-05-20')        0       \\N      \\N      (NULL,NULL)\n(1,'2019-05-20')        1       First   First   ('First','First')\n(2,'2019-05-20')        1       Second  \\N      ('Second',NULL)\n(3,'2019-05-20')        1       Third   Third   ('Third','Third')\n(4,'2019-05-20')        0       \\N      \\N      (NULL,NULL)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/dictionaries/external-dictionaries/external-dicts"},"Dictionaries"))),(0,r.kt)("h2",{id:"dicthas"},"dictHas"),(0,r.kt)("p",null,"Checks whether a key is present in a dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dictHas('dict_name', id_expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dict_name")," \u2014 Name of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id_expr")," \u2014 Key value. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning dictionary key-type value or ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"-type value depending on the dictionary configuration.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0, if there is no key."),(0,r.kt)("li",{parentName:"ul"},"1, if there is a key.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8"),"."),(0,r.kt)("h2",{id:"dictgethierarchy"},"dictGetHierarchy"),(0,r.kt)("p",null,"Creates an array, containing all the parents of a key in the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/dictionaries/external-dictionaries/external-dicts-dict-hierarchical"},"hierarchical dictionary"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dictGetHierarchy('dict_name', key)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dict_name")," \u2014 Name of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," \u2014 Key value. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"-type value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Parents for the key.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/array"},"Array(UInt64)"),"."),(0,r.kt)("h2",{id:"dictisin"},"dictIsIn"),(0,r.kt)("p",null,"Checks the ancestor of a key through the whole hierarchical chain in the dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dictIsIn('dict_name', child_id_expr, ancestor_id_expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dict_name")," \u2014 Name of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"child_id_expr")," \u2014 Key to be checked. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"-type value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ancestor_id_expr")," \u2014 Alleged ancestor of the ",(0,r.kt)("inlineCode",{parentName:"li"},"child_id_expr")," key. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"-type value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0, if ",(0,r.kt)("inlineCode",{parentName:"li"},"child_id_expr")," is not a child of ",(0,r.kt)("inlineCode",{parentName:"li"},"ancestor_id_expr"),"."),(0,r.kt)("li",{parentName:"ul"},"1, if ",(0,r.kt)("inlineCode",{parentName:"li"},"child_id_expr")," is a child of ",(0,r.kt)("inlineCode",{parentName:"li"},"ancestor_id_expr")," or if ",(0,r.kt)("inlineCode",{parentName:"li"},"child_id_expr")," is an ",(0,r.kt)("inlineCode",{parentName:"li"},"ancestor_id_expr"),".")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8"),"."),(0,r.kt)("h2",{id:"dictgetchildren"},"dictGetChildren"),(0,r.kt)("p",null,"Returns first-level children as an array of indexes. It is the inverse transformation for ",(0,r.kt)("a",{parentName:"p",href:"#dictgethierarchy"},"dictGetHierarchy"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dictGetChildren(dict_name, key)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dict_name")," \u2014 Name of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," \u2014 Key value. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"-type value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First-level descendants for the key.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Consider the hierarchic dictionary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500parent_id\u2500\u2510\n\u2502  1 \u2502         0 \u2502\n\u2502  2 \u2502         1 \u2502\n\u2502  3 \u2502         1 \u2502\n\u2502  4 \u2502         2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"First-level children:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictGetChildren('hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 4;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dictGetChildren('hierarchy_flat_dictionary', number)\u2500\u2510\n\u2502 [1]                                                  \u2502\n\u2502 [2,3]                                                \u2502\n\u2502 [4]                                                  \u2502\n\u2502 []                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"dictgetdescendant"},"dictGetDescendant"),(0,r.kt)("p",null,"Returns all descendants as if ",(0,r.kt)("a",{parentName:"p",href:"#dictgetchildren"},"dictGetChildren")," function was applied ",(0,r.kt)("inlineCode",{parentName:"p"},"level")," times recursively."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dictGetDescendants(dict_name, key, level)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dict_name")," \u2014 Name of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," \u2014 Key value. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"-type value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Hierarchy level. If ",(0,r.kt)("inlineCode",{parentName:"li"},"level = 0")," returns all descendants to the end. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Descendants for the key.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Consider the hierarchic dictionary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500parent_id\u2500\u2510\n\u2502  1 \u2502         0 \u2502\n\u2502  2 \u2502         1 \u2502\n\u2502  3 \u2502         1 \u2502\n\u2502  4 \u2502         2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"All descendants:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictGetDescendants('hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 4;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dictGetDescendants('hierarchy_flat_dictionary', number)\u2500\u2510\n\u2502 [1,2,3,4]                                               \u2502\n\u2502 [2,3,4]                                                 \u2502\n\u2502 [4]                                                     \u2502\n\u2502 []                                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"First-level descendants:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictGetDescendants('hierarchy_flat_dictionary', number, 1) FROM system.numbers LIMIT 4;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dictGetDescendants('hierarchy_flat_dictionary', number, 1)\u2500\u2510\n\u2502 [1]                                                        \u2502\n\u2502 [2,3]                                                      \u2502\n\u2502 [4]                                                        \u2502\n\u2502 []                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"other-functions"},"Other Functions"),(0,r.kt)("p",null,"ClickHouse supports specialized functions that convert dictionary attribute values to a specific data type regardless of the dictionary configuration."),(0,r.kt)("p",null,"Functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetInt8"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetInt16"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetInt32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetInt64")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetUInt8"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetUInt16"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetUInt32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetUInt64")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetFloat32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetFloat64")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetDate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetDateTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetUUID")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetString")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dictGetIPv4"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"dictGetIPv6"))),(0,r.kt)("p",null,"All these functions have the ",(0,r.kt)("inlineCode",{parentName:"p"},"OrDefault")," modification. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"dictGetDateOrDefault"),"."),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dictGet[Type]('dict_name', 'attr_name', id_expr)\ndictGet[Type]OrDefault('dict_name', 'attr_name', id_expr, default_value_expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dict_name")," \u2014 Name of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"attr_name")," \u2014 Name of the column of the dictionary. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-string-literal"},"String literal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id_expr")," \u2014 Key value. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," or ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"-type value depending on the dictionary configuration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default_value_expr")," \u2014 Value returned if the dictionary does not contain a row with the ",(0,r.kt)("inlineCode",{parentName:"li"},"id_expr")," key. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning the value in the data type configured for the ",(0,r.kt)("inlineCode",{parentName:"li"},"attr_name")," attribute.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If ClickHouse parses the attribute successfully in the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/dictionaries/external-dictionaries/external-dicts-dict-structure#ext_dict_structure-attributes"},"attribute\u2019s data type"),", functions return the value of the dictionary attribute that corresponds to ",(0,r.kt)("inlineCode",{parentName:"p"},"id_expr"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If there is no requested ",(0,r.kt)("inlineCode",{parentName:"p"},"id_expr")," in the dictionary then:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"- `dictGet[Type]` returns the content of the `<null_value>` element specified for the attribute in the dictionary configuration.\n- `dictGet[Type]OrDefault` returns the value passed as the `default_value_expr` parameter.\n")))),(0,r.kt)("p",null,"ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type."))}d.isMDXComponent=!0}}]);