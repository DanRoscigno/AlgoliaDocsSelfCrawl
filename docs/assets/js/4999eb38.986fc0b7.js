"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[72718],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||l;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={slug:"/en/sql-reference/statements/alter/column",sidebar_position:37,sidebar_label:"COLUMN",title:"Column Manipulations"},o=void 0,i={unversionedId:"en/sql-reference/statements/alter/column",id:"en/sql-reference/statements/alter/column",title:"Column Manipulations",description:"A set of queries that allow changing the table structure.",source:"@site/docs/en/sql-reference/statements/alter/column.md",sourceDirName:"en/sql-reference/statements/alter",slug:"/en/sql-reference/statements/alter/column",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/column",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/statements/alter/column.md",tags:[],version:"current",sidebarPosition:37,frontMatter:{slug:"/en/sql-reference/statements/alter/column",sidebar_position:37,sidebar_label:"COLUMN",title:"Column Manipulations"},sidebar:"english",previous:{title:"ALTER",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/"},next:{title:"PARTITION",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/partition"}},s={},p=[{value:"ADD COLUMN",id:"add-column",level:2},{value:"DROP COLUMN",id:"drop-column",level:2},{value:"RENAME COLUMN",id:"rename-column",level:2},{value:"CLEAR COLUMN",id:"clear-column",level:2},{value:"COMMENT COLUMN",id:"comment-column",level:2},{value:"MODIFY COLUMN",id:"modify-column",level:2},{value:"MODIFY COLUMN REMOVE",id:"modify-column-remove",level:2},{value:"MATERIALIZE COLUMN",id:"materialize-column",level:2},{value:"Limitations",id:"limitations",level:2}],m={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A set of queries that allow changing the table structure."),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [db].name [ON CLUSTER cluster] ADD|DROP|RENAME|CLEAR|COMMENT|{MODIFY|ALTER}|MATERIALIZE COLUMN ...\n")),(0,r.kt)("p",null,"In the query, specify a list of one or more comma-separated actions.\nEach action is an operation on a column."),(0,r.kt)("p",null,"The following actions are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#add-column"},"ADD COLUMN")," \u2014 Adds a new column to the table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#drop-column"},"DROP COLUMN")," \u2014 Deletes the column."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rename-column"},"RENAME COLUMN")," \u2014 Renames an existing column."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#clear-column"},"CLEAR COLUMN")," \u2014 Resets column values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#comment-column"},"COMMENT COLUMN")," \u2014 Adds a text comment to the column."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#modify-column"},"MODIFY COLUMN")," \u2014 Changes column\u2019s type, default expression and TTL."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#modify-column-remove"},"MODIFY COLUMN REMOVE")," \u2014 Removes one of the column properties."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#materialize-column"},"MATERIALIZE COLUMN")," \u2014 Materializes the column in the parts where the column is missing.")),(0,r.kt)("p",null,"These actions are described in detail below."),(0,r.kt)("h2",{id:"add-column"},"ADD COLUMN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ADD COLUMN [IF NOT EXISTS] name [type] [default_expr] [codec] [AFTER name_after | FIRST]\n")),(0,r.kt)("p",null,"Adds a new column to the table with the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/table/#codecs"},(0,r.kt)("inlineCode",{parentName:"a"},"codec"))," and ",(0,r.kt)("inlineCode",{parentName:"p"},"default_expr")," (see the section ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/table/#create-default-values"},"Default expressions"),")."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"IF NOT EXISTS")," clause is included, the query won\u2019t return an error if the column already exists. If you specify ",(0,r.kt)("inlineCode",{parentName:"p"},"AFTER name_after")," (the name of another column), the column is added after the specified one in the list of table columns. If you want to add a column to the beginning of the table use the ",(0,r.kt)("inlineCode",{parentName:"p"},"FIRST")," clause. Otherwise, the column is added to the end of the table. For a chain of actions, ",(0,r.kt)("inlineCode",{parentName:"p"},"name_after")," can be the name of a column that is added in one of the previous actions."),(0,r.kt)("p",null,"Adding a column just changes the table structure, without performing any actions with data. The data does not appear on the disk after ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER"),". If the data is missing for a column when reading from the table, it is filled in with default values (by performing the default expression if there is one, or using zeros or empty strings). The column appears on the disk after merging data parts (see ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree"),")."),(0,r.kt)("p",null,"This approach allows us to complete the ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query instantly, without increasing the volume of old data."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE alter_test ADD COLUMN Added1 UInt32 FIRST;\nALTER TABLE alter_test ADD COLUMN Added2 UInt32 AFTER NestedColumn;\nALTER TABLE alter_test ADD COLUMN Added3 UInt32 AFTER ToDrop;\nDESC alter_test FORMAT TSV;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Added1  UInt32\nCounterID       UInt32\nStartDate       Date\nUserID  UInt32\nVisitID UInt32\nNestedColumn.A  Array(UInt8)\nNestedColumn.S  Array(String)\nAdded2  UInt32\nToDrop  UInt32\nAdded3  UInt32\n")),(0,r.kt)("h2",{id:"drop-column"},"DROP COLUMN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DROP COLUMN [IF EXISTS] name\n")),(0,r.kt)("p",null,"Deletes the column with the name ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),". If the ",(0,r.kt)("inlineCode",{parentName:"p"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the column does not exist."),(0,r.kt)("p",null,"Deletes data from the file system. Since this deletes entire files, the query is completed almost instantly."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"You can\u2019t delete a column if it is referenced by ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view/#materialized"},"materialized view"),". Otherwise, it returns an error.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE visits DROP COLUMN browser\n")),(0,r.kt)("h2",{id:"rename-column"},"RENAME COLUMN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"RENAME COLUMN [IF EXISTS] name to new_name\n")),(0,r.kt)("p",null,"Renames the column ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"new_name"),". If the ",(0,r.kt)("inlineCode",{parentName:"p"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the column does not exist. Since renaming does not involve the underlying data, the query is completed almost instantly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE"),": Columns specified in the key expression of the table (either with ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"PRIMARY KEY"),") cannot be renamed. Trying to change these columns will produce ",(0,r.kt)("inlineCode",{parentName:"p"},"SQL Error [524]"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE visits RENAME COLUMN webBrowser TO browser\n")),(0,r.kt)("h2",{id:"clear-column"},"CLEAR COLUMN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CLEAR COLUMN [IF EXISTS] name IN PARTITION partition_name\n")),(0,r.kt)("p",null,"Resets all data in a column for a specified partition. Read more about setting the partition name in the section ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/partition/#how-to-set-partition-expression"},"How to set the partition expression"),"."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the column does not exist."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE visits CLEAR COLUMN browser IN PARTITION tuple()\n")),(0,r.kt)("h2",{id:"comment-column"},"COMMENT COLUMN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"COMMENT COLUMN [IF EXISTS] name 'Text comment'\n")),(0,r.kt)("p",null,"Adds a comment to the column. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the column does not exist."),(0,r.kt)("p",null,"Each column can have one comment. If a comment already exists for the column, a new comment overwrites the previous comment."),(0,r.kt)("p",null,"Comments are stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"comment_expression")," column returned by the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/describe-table"},"DESCRIBE TABLE")," query."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE visits COMMENT COLUMN browser 'The table shows the browser used for accessing the site.'\n")),(0,r.kt)("h2",{id:"modify-column"},"MODIFY COLUMN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"MODIFY COLUMN [IF EXISTS] name [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\nALTER COLUMN [IF EXISTS] name TYPE [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\n")),(0,r.kt)("p",null,"This query changes the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," column properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Default expression")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Compression Codec")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"TTL"))),(0,r.kt)("p",null,"For examples of columns compression CODECS modifying, see ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/table/#codecs"},"Column Compression Codecs"),"."),(0,r.kt)("p",null,"For examples of columns TTL modifying, see ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree/#mergetree-column-ttl"},"Column TTL"),"."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"IF EXISTS")," clause is specified, the query won\u2019t return an error if the column does not exist."),(0,r.kt)("p",null,"When changing the type, values are converted as if the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/type-conversion-functions"},"toType")," functions were applied to them. If only the default expression is changed, the query does not do anything complex, and is completed almost instantly."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE visits MODIFY COLUMN browser Array(String)\n")),(0,r.kt)("p",null,"Changing the column type is the only complex action \u2013 it changes the contents of files with data. For large tables, this may take a long time."),(0,r.kt)("p",null,"The query also can change the order of the columns using ",(0,r.kt)("inlineCode",{parentName:"p"},"FIRST | AFTER")," clause, see ",(0,r.kt)("a",{parentName:"p",href:"#alter_add-column"},"ADD COLUMN")," description, but column type is mandatory in this case."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE users (\n    c1 Int16,\n    c2 String\n) ENGINE = MergeTree\nORDER BY c1;\n\nDESCRIBE users;\n\u250c\u2500name\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\n\u2502 c1   \u2502 Int16  \u2502\n\u2502 c2   \u2502 String \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\n\nALTER TABLE users MODIFY COLUMN c2 String FIRST;\n\nDESCRIBE users;\n\u250c\u2500name\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\n\u2502 c2   \u2502 String \u2502\n\u2502 c1   \u2502 Int16  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\n\nALTER TABLE users ALTER COLUMN c2 TYPE String AFTER c1;\n\nDESCRIBE users;\n\u250c\u2500name\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\n\u2502 c1   \u2502 Int16  \u2502\n\u2502 c2   \u2502 String \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query is atomic. For MergeTree tables it is also lock-free."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query for changing columns is replicated. The instructions are saved in ZooKeeper, then each replica applies them. All ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," queries are run in the same order. The query waits for the appropriate actions to be completed on the other replicas. However, a query to change columns in a replicated table can be interrupted, and all actions will be performed asynchronously."),(0,r.kt)("h2",{id:"modify-column-remove"},"MODIFY COLUMN REMOVE"),(0,r.kt)("p",null,"Removes one of the column properties: ",(0,r.kt)("inlineCode",{parentName:"p"},"DEFAULT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ALIAS"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MATERIALIZED"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CODEC"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"COMMENT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TTL"),"."),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE table_name MODIFY column_name REMOVE property;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Remove TTL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE table_with_ttl MODIFY COLUMN column_ttl REMOVE TTL;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/ttl"},"REMOVE TTL"),".")),(0,r.kt)("h2",{id:"materialize-column"},"MATERIALIZE COLUMN"),(0,r.kt)("p",null,"Materializes or updates a column with an expression for a default value (",(0,r.kt)("inlineCode",{parentName:"p"},"DEFAULT")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"MATERIALIZED"),").\nIt is used if it is necessary to add or update a column with a complicated expression, because evaluating such an expression directly on ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," executing turns out to be expensive. "),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE [db.]table [ON CLUSTER cluster] MATERIALIZE COLUMN col [IN PARTITION partition | IN PARTITION ID 'partition_id'];\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you specify a PARTITION, a column will be materialized with only the specified partition.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DROP TABLE IF EXISTS tmp;\nSET mutations_sync = 2;\nCREATE TABLE tmp (x Int64) ENGINE = MergeTree() ORDER BY tuple() PARTITION BY tuple();\nINSERT INTO tmp SELECT * FROM system.numbers LIMIT 5;\nALTER TABLE tmp ADD COLUMN s String MATERIALIZED toString(x);\n\nALTER TABLE tmp MATERIALIZE COLUMN s;\n\nSELECT groupArray(x), groupArray(s) FROM (select x,s from tmp order by x);\n\n\u250c\u2500groupArray(x)\u2500\u252c\u2500groupArray(s)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [0,1,2,3,4]   \u2502 ['0','1','2','3','4'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nALTER TABLE tmp MODIFY COLUMN s String MATERIALIZED toString(round(100/x));\n\nINSERT INTO tmp SELECT * FROM system.numbers LIMIT 5,5;\n\nSELECT groupArray(x), groupArray(s) FROM tmp;\n\n\u250c\u2500groupArray(x)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500groupArray(s)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [0,1,2,3,4,5,6,7,8,9] \u2502 ['0','1','2','3','4','20','17','14','12','11'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nALTER TABLE tmp MATERIALIZE COLUMN s;\n\nSELECT groupArray(x), groupArray(s) FROM tmp;\n\n\u250c\u2500groupArray(x)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500groupArray(s)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [0,1,2,3,4,5,6,7,8,9] \u2502 ['inf','100','50','33','25','20','17','14','12','11'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/table/#materialized"},"MATERIALIZED"),".")),(0,r.kt)("h2",{id:"limitations"},"Limitations"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query lets you create and delete separate elements (columns) in nested data structures, but not whole nested data structures. To add a nested data structure, you can add columns with a name like ",(0,r.kt)("inlineCode",{parentName:"p"},"name.nested_name")," and the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Array(T)"),". A nested data structure is equivalent to multiple array columns with a name that has the same prefix before the dot."),(0,r.kt)("p",null,"There is no support for deleting columns in the primary key or the sampling key (columns that are used in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ENGINE")," expression). Changing the type for columns that are included in the primary key is only possible if this change does not cause the data to be modified (for example, you are allowed to add values to an Enum or to change a type from ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt32"),")."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query is not sufficient to make the table changes you need, you can create a new table, copy the data to it using the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/insert-into/#inserting-the-results-of-select"},"INSERT SELECT")," query, then switch the tables using the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/rename/#rename-table"},"RENAME")," query and delete the old table. You can use the ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/utilities/clickhouse-copier"},"clickhouse-copier")," as an alternative to the ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT SELECT")," query."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query blocks all reads and writes for the table. In other words, if a long ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," is running at the time of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," query will wait for it to complete. At the same time, all new queries to the same table will wait while this ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," is running."),(0,r.kt)("p",null,"For tables that do not store data themselves (such as ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/"},"Merge")," and ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/"},"Distributed"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," just changes the table structure, and does not change the structure of subordinate tables. For example, when running ALTER for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Distributed")," table, you will also need to run ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER")," for the tables on all remote servers."))}c.isMDXComponent=!0}}]);