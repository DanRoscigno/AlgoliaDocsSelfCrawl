"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[9800],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,k=d["".concat(s,".").concat(u)]||d[u]||c[u]||o;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},67429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={slug:"/en/native-protocol/compression",sidebar_position:6},l="Compression",i={unversionedId:"en/native-protocol/compression",id:"en/native-protocol/compression",title:"Compression",description:"ClickHouse protocol supports data blocks compression with checksums.",source:"@site/docs/en/native-protocol/compression.md",sourceDirName:"en/native-protocol",slug:"/en/native-protocol/compression",permalink:"/AlgoliaDocsSelfCrawl/en/native-protocol/compression",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/native-protocol/compression.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{slug:"/en/native-protocol/compression",sidebar_position:6}},s={},p=[{value:"Modes",id:"modes",level:2},{value:"Block",id:"block",level:2},{value:"None mode",id:"none-mode",level:2}],m={toc:p},d="wrapper";function c(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"compression"},"Compression"),(0,r.kt)("p",null,"ClickHouse protocol supports ",(0,r.kt)("strong",{parentName:"p"},"data blocks")," compression with checksums.\nUse ",(0,r.kt)("inlineCode",{parentName:"p"},"LZ4")," if not sure what mode to pick."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Learn more about the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table.md/#column-compression-codecs"},"column compression codecs")," available and specify them when creating your tables, or afterward.")),(0,r.kt)("h2",{id:"modes"},"Modes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"value"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x02")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#none-mode"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"No compression, only checksums")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x82")),(0,r.kt)("td",{parentName:"tr",align:null},"LZ4"),(0,r.kt)("td",{parentName:"tr",align:null},"Extremely fast, good compression")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x90")),(0,r.kt)("td",{parentName:"tr",align:null},"ZSTD"),(0,r.kt)("td",{parentName:"tr",align:null},"Zstandard, pretty fast, best compression")))),(0,r.kt)("p",null,"Both LZ4 and ZSTD are made by same author, but with different tradeoffs.\nFrom ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/zstd/#benchmarks"},"facebook benchmarks"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"ratio"),(0,r.kt)("th",{parentName:"tr",align:null},"encoding"),(0,r.kt)("th",{parentName:"tr",align:null},"decoding"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"zstd")," 1.4.5 -1"),(0,r.kt)("td",{parentName:"tr",align:null},"2.8"),(0,r.kt)("td",{parentName:"tr",align:null},"500 MB/s"),(0,r.kt)("td",{parentName:"tr",align:null},"1660 MB/s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"lz4")," 1.9.2"),(0,r.kt)("td",{parentName:"tr",align:null},"2.1"),(0,r.kt)("td",{parentName:"tr",align:null},"740 MB/s"),(0,r.kt)("td",{parentName:"tr",align:null},"4530 MB/s")))),(0,r.kt)("h2",{id:"block"},"Block"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"field"),(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checksum"),(0,r.kt)("td",{parentName:"tr",align:null},"uint128"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/AlgoliaDocsSelfCrawl/en/native-protocol/hash"},"Hash")," of (header + compressed data)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"raw_size"),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"Raw size without header")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data_size"),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"Uncompressed data size")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode"),(0,r.kt)("td",{parentName:"tr",align:null},"byte"),(0,r.kt)("td",{parentName:"tr",align:null},"Compression mode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"compressed_data"),(0,r.kt)("td",{parentName:"tr",align:null},"binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Block of compressed data")))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"compression block diagram",src:n(6168).Z,width:"574",height:"161"})," "),(0,r.kt)("p",null,"Header is (raw_size + data_size + mode), raw size consists of len(header + compressed_data)."),(0,r.kt)("p",null,"Checksum is ",(0,r.kt)("inlineCode",{parentName:"p"},"hash(header + compressed_data)"),", using ",(0,r.kt)("a",{parentName:"p",href:"./hash"},"ClickHouse CityHash"),"."),(0,r.kt)("h2",{id:"none-mode"},"None mode"),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"None")," mode is used, ",(0,r.kt)("inlineCode",{parentName:"p"},"compressed_data")," is equal to original data.\nNo compression mode is useful to ensure additional data integrity with checksums, because\nhashing overhead is negligible."))}c.isMDXComponent=!0},6168:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ch_compression_block.drawio-ca3ebf78ba66358fb9f32f0da1aca27a.svg"}}]);