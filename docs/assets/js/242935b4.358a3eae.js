"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[11434],{3905:(e,a,n)=>{n.d(a,{Zo:()=>m,kt:()=>g});var t=n(67294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=t.createContext({}),u=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},m=function(e){var a=u(e.components);return t.createElement(p.Provider,{value:a},e.children)},o="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},k=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,s=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),o=u(n),k=l,g=o["".concat(p,".").concat(k)]||o[k]||h[k]||s;return n?t.createElement(g,r(r({ref:a},m),{},{components:n})):t.createElement(g,r({ref:a},m))}));function g(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var s=n.length,r=new Array(s);r[0]=k;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[o]="string"==typeof e?e:l,r[1]=i;for(var u=2;u<s;u++)r[u]=n[u];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}k.displayName="MDXCreateElement"},70207:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var t=n(87462),l=(n(67294),n(3905));const s={slug:"/en/sql-reference/functions/hash-functions",sidebar_position:50,sidebar_label:"Hash"},r="Hash Functions",i={unversionedId:"en/sql-reference/functions/hash-functions",id:"en/sql-reference/functions/hash-functions",title:"Hash Functions",description:"Hash functions can be used for the deterministic pseudo-random shuffling of elements.",source:"@site/docs/en/sql-reference/functions/hash-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/hash-functions",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/hash-functions",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/functions/hash-functions.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{slug:"/en/sql-reference/functions/hash-functions",sidebar_position:50,sidebar_label:"Hash"},sidebar:"english",previous:{title:"Bitmap",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bitmap-functions"},next:{title:"Pseudo-Random Numbers",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/random-functions"}},p={},u=[{value:"halfMD5",id:"halfmd5",level:2},{value:"MD4",id:"md4",level:2},{value:"MD5",id:"hash_functions-md5",level:2},{value:"sipHash64 (#hash_functions-siphash64)",id:"siphash64-hash_functions-siphash64",level:2},{value:"sipHash64Keyed",id:"siphash64keyed",level:2},{value:"sipHash128",id:"siphash128",level:2},{value:"sipHash128Keyed",id:"siphash128keyed",level:2},{value:"sipHash128Reference",id:"siphash128reference",level:2},{value:"sipHash128ReferenceKeyed",id:"siphash128referencekeyed",level:2},{value:"cityHash64",id:"cityhash64",level:2},{value:"intHash32",id:"inthash32",level:2},{value:"intHash64",id:"inthash64",level:2},{value:"SHA1, SHA224, SHA256, SHA512",id:"sha1-sha224-sha256-sha512",level:2},{value:"BLAKE3",id:"blake3",level:2},{value:"URLHash(url[, N])",id:"urlhashurl-n",level:2},{value:"farmFingerprint64",id:"farmfingerprint64",level:2},{value:"farmHash64",id:"farmhash64",level:2},{value:"javaHash",id:"javahash",level:2},{value:"javaHashUTF16LE",id:"javahashutf16le",level:2},{value:"hiveHash",id:"hivehash",level:2},{value:"metroHash64",id:"metrohash64",level:2},{value:"jumpConsistentHash",id:"jumpconsistenthash",level:2},{value:"murmurHash2_32, murmurHash2_64",id:"murmurhash2_32-murmurhash2_64",level:2},{value:"gccMurmurHash",id:"gccmurmurhash",level:2},{value:"murmurHash3_32, murmurHash3_64",id:"murmurhash3_32-murmurhash3_64",level:2},{value:"murmurHash3_128",id:"murmurhash3_128",level:2},{value:"xxh3",id:"xxh3",level:2},{value:"xxHash32, xxHash64",id:"xxhash32-xxhash64",level:2},{value:"ngramSimHash",id:"ngramsimhash",level:2},{value:"ngramSimHashCaseInsensitive",id:"ngramsimhashcaseinsensitive",level:2},{value:"ngramSimHashUTF8",id:"ngramsimhashutf8",level:2},{value:"ngramSimHashCaseInsensitiveUTF8",id:"ngramsimhashcaseinsensitiveutf8",level:2},{value:"wordShingleSimHash",id:"wordshinglesimhash",level:2},{value:"wordShingleSimHashCaseInsensitive",id:"wordshinglesimhashcaseinsensitive",level:2},{value:"wordShingleSimHashUTF8",id:"wordshinglesimhashutf8",level:2},{value:"wordShingleSimHashCaseInsensitiveUTF8",id:"wordshinglesimhashcaseinsensitiveutf8",level:2},{value:"ngramMinHash",id:"ngramminhash",level:2},{value:"ngramMinHashCaseInsensitive",id:"ngramminhashcaseinsensitive",level:2},{value:"ngramMinHashUTF8",id:"ngramminhashutf8",level:2},{value:"ngramMinHashCaseInsensitiveUTF8",id:"ngramminhashcaseinsensitiveutf8",level:2},{value:"ngramMinHashArg",id:"ngramminhasharg",level:2},{value:"ngramMinHashArgCaseInsensitive",id:"ngramminhashargcaseinsensitive",level:2},{value:"ngramMinHashArgUTF8",id:"ngramminhashargutf8",level:2},{value:"ngramMinHashArgCaseInsensitiveUTF8",id:"ngramminhashargcaseinsensitiveutf8",level:2},{value:"wordShingleMinHash",id:"wordshingleminhash",level:2},{value:"wordShingleMinHashCaseInsensitive",id:"wordshingleminhashcaseinsensitive",level:2},{value:"wordShingleMinHashUTF8",id:"wordshingleminhashutf8",level:2},{value:"wordShingleMinHashCaseInsensitiveUTF8",id:"wordshingleminhashcaseinsensitiveutf8",level:2},{value:"wordShingleMinHashArg",id:"wordshingleminhasharg",level:2},{value:"wordShingleMinHashArgCaseInsensitive",id:"wordshingleminhashargcaseinsensitive",level:2},{value:"wordShingleMinHashArgUTF8",id:"wordshingleminhashargutf8",level:2},{value:"wordShingleMinHashArgCaseInsensitiveUTF8",id:"wordshingleminhashargcaseinsensitiveutf8",level:2}],m={toc:u},o="wrapper";function h(e){let{components:a,...n}=e;return(0,l.kt)(o,(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"hash-functions"},"Hash Functions"),(0,l.kt)("p",null,"Hash functions can be used for the deterministic pseudo-random shuffling of elements."),(0,l.kt)("p",null,"Simhash is a hash function, which returns close hash values for close (similar) arguments."),(0,l.kt)("h2",{id:"halfmd5"},"halfMD5"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/type-conversion-functions/#type_conversion_functions-reinterpretAsString"},"Interprets")," all the input parameters as strings and calculates the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/MD5"},"MD5")," hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt64")," in big-endian byte order."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"halfMD5(par1, ...)\n")),(0,l.kt)("p",null,"The function is relatively slow (5 million short strings per second per processor core).\nConsider using the ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash64"},"sipHash64")," function instead."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/"},"supported data types"),". For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," with the same data, ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Array(Tuple(key, value))")," type with the same data)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned Value")),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT halfMD5(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS halfMD5hash, toTypeName(halfMD5hash) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500halfMD5hash\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 186182704141653334 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"md4"},"MD4"),(0,l.kt)("p",null,"Calculates the MD4 from a string and returns the resulting set of bytes as FixedString(16)."),(0,l.kt)("h2",{id:"hash_functions-md5"},"MD5"),(0,l.kt)("p",null,"Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).\nIf you do not need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the \u2018sipHash128\u2019 function instead.\nIf you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s)))."),(0,l.kt)("h2",{id:"siphash64-hash_functions-siphash64"},"sipHash64 (#hash_functions-siphash64)"),(0,l.kt)("p",null,"Produces a 64-bit ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/SipHash"},"SipHash")," hash value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sipHash64(par1,...)\n")),(0,l.kt)("p",null,"This is a cryptographic hash function. It works at least three times faster than the ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-md5"},"MD5")," hash function."),(0,l.kt)("p",null,"The function ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/type-conversion-functions/#type_conversion_functions-reinterpretAsString"},"interprets")," all the input parameters as strings and calculates the hash value for each of them. It then combines the hashes by the following algorithm:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The first and the second hash value are concatenated to an array which is hashed."),(0,l.kt)("li",{parentName:"ol"},"The previously calculated hash value and the hash of the third input paramter are hashed in a similar way."),(0,l.kt)("li",{parentName:"ol"},"This calculation is repeated for all remaining hash values of the original input.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"The function takes a variable number of input parameters of any of the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/"},"supported data types"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned Value")),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type hash value."),(0,l.kt)("p",null,"Note that the calculated hash values may be equal for the same input values of different argument types. This affects for example integer types of different size, named and unnamed ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," with the same data, ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Array(Tuple(key, value))")," type with the same data."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sipHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500SipHash\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 11400366955626497465 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"siphash64keyed"},"sipHash64Keyed"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash64"},"sipHash64")," but additionally takes an explicit key argument instead of using a fixed key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sipHash64Keyed((k0, k1), par1,...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash64"},"sipHash64"),", but the first argument is a tuple of two UInt64 values representing the key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sipHash64Keyed((506097522914230528, 1084818905618843912), array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500SipHash\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 8017656310194184311 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"siphash128"},"sipHash128"),(0,l.kt)("p",null,"Like ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash64"},"sipHash64")," but produces a 128-bit hash value, i.e. the final xor-folding state is done up to 128 bits."),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"This 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128reference"},"sipHash128Reference"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sipHash128(par1,...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"Same as for ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash64"},"sipHash64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A 128-bit ",(0,l.kt)("inlineCode",{parentName:"p"},"SipHash")," hash value of type ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString(16)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(sipHash128('foo', '\\x01', 3));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500hex(sipHash128('foo', '', 3))\u2500\u2500\u2500\u2500\u2510\n\u2502 9DE516A64A414D4B1B609415E4523F24 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"siphash128keyed"},"sipHash128Keyed"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128"},"sipHash128")," but additionally takes an explicit key argument instead of using a fixed key."),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"This 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128referencekeyed"},"sipHash128ReferenceKeyed"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sipHash128Keyed((k0, k1), par1,...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128"},"sipHash128"),", but the first argument is a tuple of two UInt64 values representing the key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A 128-bit ",(0,l.kt)("inlineCode",{parentName:"p"},"SipHash")," hash value of type ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString(16)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(sipHash128Keyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500hex(sipHash128Keyed((506097522914230528, 1084818905618843912), 'foo', '', 3))\u2500\u2510\n\u2502 B8467F65C8B4CFD9A5F8BD733917D9BF                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"siphash128reference"},"sipHash128Reference"),(0,l.kt)("p",null,"Like ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128"},"sipHash128")," but implements the 128-bit algorithm from the original authors of SipHash."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sipHash128Reference(par1,...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"Same as for ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128"},"sipHash128"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A 128-bit ",(0,l.kt)("inlineCode",{parentName:"p"},"SipHash")," hash value of type ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString(16)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(sipHash128Reference('foo', '\\x01', 3));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500hex(sipHash128Reference('foo', '', 3))\u2500\u2510\n\u2502 4D1BE1A22D7F5933C0873E1698426260       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"siphash128referencekeyed"},"sipHash128ReferenceKeyed"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128reference"},"sipHash128Reference")," but additionally takes an explicit key argument instead of using a fixed key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sipHash128ReferenceKeyed((k0, k1), par1,...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-siphash128reference"},"sipHash128Reference"),", but the first argument is a tuple of two UInt64 values representing the key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A 128-bit ",(0,l.kt)("inlineCode",{parentName:"p"},"SipHash")," hash value of type ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString(16)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912), 'foo', '', 3))\u2500\u2510\n\u2502 630133C9722DC08646156B8130C4CDC8                                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"cityhash64"},"cityHash64"),(0,l.kt)("p",null,"Produces a 64-bit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/google/cityhash"},"CityHash")," hash value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"cityHash64(par1,...)\n")),(0,l.kt)("p",null,"This is a fast non-cryptographic hash function. It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types. The function uses the CityHash combinator to get the final results."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/"},"supported data types"),". For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," with the same data, ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Array(Tuple(key, value))")," type with the same data)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned Value")),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Call example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT cityHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS CityHash, toTypeName(CityHash) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500CityHash\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 12072650598913549138 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"The following example shows how to compute the checksum of the entire table with accuracy up to the row order:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT groupBitXor(cityHash64(*)) FROM table\n")),(0,l.kt)("h2",{id:"inthash32"},"intHash32"),(0,l.kt)("p",null,"Calculates a 32-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers."),(0,l.kt)("h2",{id:"inthash64"},"intHash64"),(0,l.kt)("p",null,"Calculates a 64-bit hash code from any type of integer.\nIt works faster than intHash32. Average quality."),(0,l.kt)("h2",{id:"sha1-sha224-sha256-sha512"},"SHA1, SHA224, SHA256, SHA512"),(0,l.kt)("p",null,"Calculates SHA-1, SHA-224, SHA-256, SHA-512 hash from a string and returns the resulting set of bytes as ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SHA1('s')\n...\nSHA512('s')\n")),(0,l.kt)("p",null,"The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).\nWe recommend using this function only in cases when you need a specific hash function and you can\u2019t select it.\nEven in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s")," \u2014 Input string for SHA hash calculation. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"SHA hash as a hex-unencoded FixedString. SHA-1 returns as FixedString(20), SHA-224 as FixedString(28), SHA-256 \u2014 FixedString(32), SHA-512 \u2014 FixedString(64).")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Use the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/encoding-functions/#hex"},"hex")," function to represent the result as a hex-encoded string."),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(SHA1('abc'));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500hex(SHA1('abc'))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 A9993E364706816ABA3E25717850C26C9CD0D89D \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"blake3"},"BLAKE3"),(0,l.kt)("p",null,"Calculates BLAKE3 hash string and returns the resulting set of bytes as ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"BLAKE3('s')\n")),(0,l.kt)("p",null,"This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library. The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"s - input string for BLAKE3 hash calculation. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"BLAKE3 hash as a byte array with type FixedString(32).")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Use function ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/encoding-functions/#hex"},"hex")," to represent the result as a hex-encoded string."),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(BLAKE3('ABC'))\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"\u250c\u2500hex(BLAKE3('ABC'))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 D1717274597CF0289694F75D96D444B992A096F1AFD8E7BBFA6EBB1D360FEDFC \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"urlhashurl-n"},"URLHash(url","[",", N","]",")"),(0,l.kt)("p",null,"A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.\n",(0,l.kt)("inlineCode",{parentName:"p"},"URLHash(s)")," \u2013 Calculates a hash from a string without one of the trailing symbols ",(0,l.kt)("inlineCode",{parentName:"p"},"/"),",",(0,l.kt)("inlineCode",{parentName:"p"},"?")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"#")," at the end, if present.\n",(0,l.kt)("inlineCode",{parentName:"p"},"URLHash(s, N)")," \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols ",(0,l.kt)("inlineCode",{parentName:"p"},"/"),",",(0,l.kt)("inlineCode",{parentName:"p"},"?")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"#")," at the end, if present.\nLevels are the same as in URLHierarchy."),(0,l.kt)("h2",{id:"farmfingerprint64"},"farmFingerprint64"),(0,l.kt)("h2",{id:"farmhash64"},"farmHash64"),(0,l.kt)("p",null,"Produces a 64-bit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/google/farmhash"},"FarmHash")," or Fingerprint value. ",(0,l.kt)("inlineCode",{parentName:"p"},"farmFingerprint64")," is preferred for a stable and portable value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"farmFingerprint64(par1, ...)\nfarmHash64(par1, ...)\n")),(0,l.kt)("p",null,"These functions use the ",(0,l.kt)("inlineCode",{parentName:"p"},"Fingerprint64")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Hash64")," methods respectively from all ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/google/farmhash/blob/master/src/farmhash.h"},"available methods"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/"},"supported data types"),". For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," with the same data, ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Array(Tuple(key, value))")," type with the same data)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned Value")),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT farmHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS FarmHash, toTypeName(FarmHash) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500FarmHash\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 17790458267262532859 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"javahash"},"javaHash"),(0,l.kt)("p",null,"Calculates JavaHash from a ",(0,l.kt)("a",{parentName:"p",href:"http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452"},"string"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Byte.java#l405"},"Byte"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Short.java#l410"},"Short"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Integer.java#l959"},"Integer"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Long.java#l1060"},"Long"),".\nThis hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result."),(0,l.kt)("p",null,"Note that Java only support calculating signed integers hash, so if you want to calculate unsigned integers hash you must cast it to proper signed ClickHouse types."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT javaHash('')\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Int32")," data type hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT javaHash(toInt32(123));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500javaHash(toInt32(123))\u2500\u2510\n\u2502               123      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT javaHash('Hello, world!');\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500javaHash('Hello, world!')\u2500\u2510\n\u2502               -1880044555 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"javahashutf16le"},"javaHashUTF16LE"),(0,l.kt)("p",null,"Calculates ",(0,l.kt)("a",{parentName:"p",href:"http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452"},"JavaHash")," from a string, assuming it contains bytes representing a string in UTF-16LE encoding."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"javaHashUTF16LE(stringUtf16le)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"stringUtf16le")," \u2014 a string in UTF-16LE encoding.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Int32")," data type hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Correct query with UTF-16LE encoded string."),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT javaHashUTF16LE(convertCharset('test', 'utf-8', 'utf-16le'));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500javaHashUTF16LE(convertCharset('test', 'utf-8', 'utf-16le'))\u2500\u2510\n\u2502                                                      3556498 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"hivehash"},"hiveHash"),(0,l.kt)("p",null,"Calculates ",(0,l.kt)("inlineCode",{parentName:"p"},"HiveHash")," from a string."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hiveHash('')\n")),(0,l.kt)("p",null,"This is just ",(0,l.kt)("a",{parentName:"p",href:"#hash_functions-javahash"},"JavaHash")," with zeroed out sign bit. This function is used in ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Apache_Hive"},"Apache Hive")," for versions before 3.0. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Int32")," data type hash value."),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"hiveHash"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hiveHash('Hello, world!');\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500hiveHash('Hello, world!')\u2500\u2510\n\u2502                 267439093 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"metrohash64"},"metroHash64"),(0,l.kt)("p",null,"Produces a 64-bit ",(0,l.kt)("a",{parentName:"p",href:"http://www.jandrewrogers.com/2015/05/27/metrohash/"},"MetroHash")," hash value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"metroHash64(par1, ...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/"},"supported data types"),". For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," with the same data, ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Array(Tuple(key, value))")," type with the same data)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned Value")),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT metroHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MetroHash, toTypeName(MetroHash) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500MetroHash\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 14235658766382344533 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"jumpconsistenthash"},"jumpConsistentHash"),(0,l.kt)("p",null,"Calculates JumpConsistentHash form a UInt64.\nAccepts two arguments: a UInt64-type key and the number of buckets. Returns Int32.\nFor more information, see the link: ",(0,l.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/1406.2294.pdf"},"JumpConsistentHash")),(0,l.kt)("h2",{id:"murmurhash2_32-murmurhash2_64"},"murmurHash2_32, murmurHash2_64"),(0,l.kt)("p",null,"Produces a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash2")," hash value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"murmurHash2_32(par1, ...)\nmurmurHash2_64(par1, ...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"Both functions take a variable number of input parameters. Arguments can be any of the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/"},"supported data types"),". For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," with the same data, ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Array(Tuple(key, value))")," type with the same data)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned Value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"murmurHash2_32")," function returns hash value having the ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt32")," data type."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"murmurHash2_64")," function returns hash value having the ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT murmurHash2_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash2, toTypeName(MurmurHash2) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500MurmurHash2\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 11832096901709403633 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"gccmurmurhash"},"gccMurmurHash"),(0,l.kt)("p",null,"Calculates a 64-bit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash2")," hash value using the same hash seed as ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gcc-mirror/gcc/blob/41d6b10e96a1de98e90a7c0378437c3255814b16/libstdc%2B%2B-v3/include/bits/functional_hash.h#L191"},"gcc"),". It is portable between CLang and GCC builds."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"gccMurmurHash(par1, ...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"par1, ...")," \u2014 A variable number of parameters that can be any of the ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types//#data_types"},"supported data types"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculated hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    gccMurmurHash(1, 2, 3) AS res1,\n    gccMurmurHash(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) AS res2\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res2\u2500\u2510\n\u2502 12384823029245979431 \u2502 1188926775431157506 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"murmurhash3_32-murmurhash3_64"},"murmurHash3_32, murmurHash3_64"),(0,l.kt)("p",null,"Produces a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash3")," hash value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"murmurHash3_32(par1, ...)\nmurmurHash3_64(par1, ...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,"Both functions take a variable number of input parameters. Arguments can be any of the ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/"},"supported data types"),". For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," with the same data, ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Array(Tuple(key, value))")," type with the same data)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned Value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"murmurHash3_32")," function returns a ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt32")," data type hash value."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"murmurHash3_64")," function returns a ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64")," data type hash value.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT murmurHash3_32(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500MurmurHash3\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502     2152717 \u2502 UInt32 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"murmurhash3_128"},"murmurHash3_128"),(0,l.kt)("p",null,"Produces a 128-bit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash3")," hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"murmurHash3_128(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 A list of ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax/#syntax-expressions"},"expressions"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A 128-bit ",(0,l.kt)("inlineCode",{parentName:"p"},"MurmurHash3")," hash value."),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/fixedstring"},"FixedString(16)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(murmurHash3_128('foo', 'foo', 'foo'));\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500hex(murmurHash3_128('foo', 'foo', 'foo'))\u2500\u2510\n\u2502 F8F7AD9B6CD4CF117A71E277E2EC2931          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"xxh3"},"xxh3"),(0,l.kt)("p",null,"Produces a 64-bit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Cyan4973/xxHash"},"xxh3")," hash value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"xxh3(expr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 A list of ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax/#syntax-expressions"},"expressions")," of any data type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A 64-bit ",(0,l.kt)("inlineCode",{parentName:"p"},"xxh3")," hash value."),(0,l.kt)("p",null,"Type:  ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT xxh3('Hello', 'world')\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500xxh3('Hello', 'world')\u2500\u2510\n\u2502    5607458076371731292 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"xxhash32-xxhash64"},"xxHash32, xxHash64"),(0,l.kt)("p",null,"Calculates ",(0,l.kt)("inlineCode",{parentName:"p"},"xxHash")," from a string. It is proposed in two flavors, 32 and 64 bits."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT xxHash32('')\n\nOR\n\nSELECT xxHash64('')\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt32")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt64")," data type hash value."),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt32")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"xxHash32")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt64")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"xxHash64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT xxHash32('Hello, world!');\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500xxHash32('Hello, world!')\u2500\u2510\n\u2502                 834093149 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"http://cyan4973.github.io/xxHash/"},"xxHash"),".")),(0,l.kt)("h2",{id:"ngramsimhash"},"ngramSimHash"),(0,l.kt)("p",null,"Splits a ASCII string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-gram ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramSimHash(string[, ngramsize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramSimHash('ClickHouse') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 1627567969 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramsimhashcaseinsensitive"},"ngramSimHashCaseInsensitive"),(0,l.kt)("p",null,"Splits a ASCII string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-gram ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramSimHashCaseInsensitive(string[, ngramsize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramSimHashCaseInsensitive('ClickHouse') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 562180645 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramsimhashutf8"},"ngramSimHashUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-gram ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramSimHashUTF8(string[, ngramsize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramSimHashUTF8('ClickHouse') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 1628157797 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramsimhashcaseinsensitiveutf8"},"ngramSimHashCaseInsensitiveUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-gram ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramSimHashCaseInsensitiveUTF8('ClickHouse') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 1636742693 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshinglesimhash"},"wordShingleSimHash"),(0,l.kt)("p",null,"Splits a ASCII string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and returns the word shingle ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleSimHash(string[, shinglesize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleSimHash('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 2328277067 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshinglesimhashcaseinsensitive"},"wordShingleSimHashCaseInsensitive"),(0,l.kt)("p",null,"Splits a ASCII string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and returns the word shingle ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleSimHashCaseInsensitive(string[, shinglesize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleSimHashCaseInsensitive('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 2194812424 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshinglesimhashutf8"},"wordShingleSimHashUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and returns the word shingle ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleSimHashUTF8(string[, shinglesize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optinal. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleSimHashUTF8('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 2328277067 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshinglesimhashcaseinsensitiveutf8"},"wordShingleSimHashCaseInsensitiveUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and returns the word shingle ",(0,l.kt)("inlineCode",{parentName:"p"},"simhash"),". Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/bit-functions/#bithammingdistance"},"bitHammingDistance"),". The smaller is the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," of the calculated ",(0,l.kt)("inlineCode",{parentName:"p"},"simhashes")," of two strings, the more likely these strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hash value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleSimHashCaseInsensitiveUTF8('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500Hash\u2500\u2510\n\u2502 2194812424 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhash"},"ngramMinHash"),(0,l.kt)("p",null,"Splits a ASCII string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and calculates hash values for each n-gram. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHash(string[, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHash('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (18333312859352735453,9054248444481805918) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhashcaseinsensitive"},"ngramMinHashCaseInsensitive"),(0,l.kt)("p",null,"Splits a ASCII string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and calculates hash values for each n-gram. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHashCaseInsensitive('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (2106263556442004574,13203602793651726206) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhashutf8"},"ngramMinHashUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and calculates hash values for each n-gram. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHashUTF8(string[, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHashUTF8('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (18333312859352735453,6742163577938632877) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhashcaseinsensitiveutf8"},"ngramMinHashCaseInsensitiveUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and calculates hash values for each n-gram. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHashCaseInsensitiveUTF8('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (12493625717655877135,13203602793651726206) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhasharg"},"ngramMinHashArg"),(0,l.kt)("p",null,"Splits a ASCII string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-grams with minimum and maximum hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#ngramminhash"},"ngramMinHash")," function with the same input. Is case sensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHashArg(string[, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," n-grams each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHashArg('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('ous','ick','lic','Hou','kHo','use'),('Hou','lic','ick','ous','ckH','Cli')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhashargcaseinsensitive"},"ngramMinHashArgCaseInsensitive"),(0,l.kt)("p",null,"Splits a ASCII string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-grams with minimum and maximum hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#ngramminhashcaseinsensitive"},"ngramMinHashCaseInsensitive")," function with the same input. Is case insensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," n-grams each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHashArgCaseInsensitive('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('ous','ick','lic','kHo','use','Cli'),('kHo','lic','ick','ous','ckH','Hou')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhashargutf8"},"ngramMinHashArgUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-grams with minimum and maximum hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#ngramminhashutf8"},"ngramMinHashUTF8")," function with the same input. Is case sensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHashArgUTF8(string[, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," n-grams each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHashArgUTF8('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('ous','ick','lic','Hou','kHo','use'),('kHo','Hou','lic','ick','ous','ckH')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"ngramminhashargcaseinsensitiveutf8"},"ngramMinHashArgCaseInsensitiveUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into n-grams of ",(0,l.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols and returns the n-grams with minimum and maximum hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#ngramminhashcaseinsensitiveutf8"},"ngramMinHashCaseInsensitiveUTF8")," function with the same input. Is case insensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," n-grams each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngramMinHashArgCaseInsensitiveUTF8('ClickHouse') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('ckH','ous','ick','lic','kHo','use'),('kHo','lic','ick','ous','ckH','Hou')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhash"},"wordShingleMinHash"),(0,l.kt)("p",null,"Splits a ASCII string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and calculates hash values for each word shingle. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHash(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHash('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (16452112859864147620,5844417301642981317) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhashcaseinsensitive"},"wordShingleMinHashCaseInsensitive"),(0,l.kt)("p",null,"Splits a ASCII string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and calculates hash values for each word shingle. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHashCaseInsensitive('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (3065874883688416519,1634050779997673240) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhashutf8"},"wordShingleMinHashUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and calculates hash values for each word shingle. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHashUTF8(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHashUTF8('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (16452112859864147620,5844417301642981317) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhashcaseinsensitiveutf8"},"wordShingleMinHashCaseInsensitiveUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words and calculates hash values for each word shingle. Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," minimum hashes to calculate the minimum hash and ",(0,l.kt)("inlineCode",{parentName:"p"},"hashnum")," maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive."),(0,l.kt)("p",null,"Can be used for detection of semi-duplicate strings with ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-functions/#tuplehammingdistance"},"tupleHammingDistance"),". For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two hashes \u2014 the minimum and the maximum.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHashCaseInsensitiveUTF8('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (3065874883688416519,1634050779997673240) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhasharg"},"wordShingleMinHashArg"),(0,l.kt)("p",null,"Splits a ASCII string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words each and returns the shingles with minimum and maximum word hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#wordshingleminhash"},"wordshingleMinHash")," function with the same input. Is case sensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHashArg(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," word shingles each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHashArg('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('OLAP','database','analytical'),('online','oriented','processing')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhashargcaseinsensitive"},"wordShingleMinHashArgCaseInsensitive"),(0,l.kt)("p",null,"Splits a ASCII string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words each and returns the shingles with minimum and maximum word hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#wordshingleminhashcaseinsensitive"},"wordShingleMinHashCaseInsensitive")," function with the same input. Is case insensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," word shingles each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHashArgCaseInsensitive('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('queries','database','analytical'),('oriented','processing','DBMS')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhashargutf8"},"wordShingleMinHashArgUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words each and returns the shingles with minimum and maximum word hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#wordshingleminhashutf8"},"wordShingleMinHashUTF8")," function with the same input. Is case sensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," word shingles each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHashArgUTF8('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('OLAP','database','analytical'),('online','oriented','processing')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"wordshingleminhashargcaseinsensitiveutf8"},"wordShingleMinHashArgCaseInsensitiveUTF8"),(0,l.kt)("p",null,"Splits a UTF-8 string into parts (shingles) of ",(0,l.kt)("inlineCode",{parentName:"p"},"shinglesize")," words each and returns the shingles with minimum and maximum word hashes, calculated by the ",(0,l.kt)("a",{parentName:"p",href:"#wordshingleminhashcaseinsensitiveutf8"},"wordShingleMinHashCaseInsensitiveUTF8")," function with the same input. Is case insensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"wordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shinglesize")," \u2014 The size of a word shingle. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"25"),". Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"6"),". ",(0,l.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple with two tuples with ",(0,l.kt)("inlineCode",{parentName:"li"},"hashnum")," word shingles each.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"), ",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,l.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"))."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT wordShingleMinHashArgCaseInsensitiveUTF8('ClickHouse\xae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500Tuple\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (('queries','database','analytical'),('oriented','processing','DBMS')) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}h.isMDXComponent=!0}}]);