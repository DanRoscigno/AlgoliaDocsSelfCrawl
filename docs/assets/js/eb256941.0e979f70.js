"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[75920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):g(g({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=o(n),c=r,d=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(d,g(g({ref:t},p),{},{components:n})):a.createElement(d,g({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,g=new Array(i);g[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,g[1]=l;for(var o=2;o<i;o++)g[o]=n[o];return a.createElement.apply(null,g)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},25284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>g,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=n(87462),r=(n(67294),n(3905));const i={slug:"/en/engines/table-engines/mergetree-family/aggregatingmergetree",sidebar_position:60,sidebar_label:"AggregatingMergeTree"},g="AggregatingMergeTree",l={unversionedId:"en/engines/table-engines/mergetree-family/aggregatingmergetree",id:"en/engines/table-engines/mergetree-family/aggregatingmergetree",title:"AggregatingMergeTree",description:"The engine inherits from MergeTree, altering the logic for data parts merging. ClickHouse replaces all rows with the same primary key (or more accurately, with the same sorting key) with a single row (within a one data part) that stores a combination of states of aggregate functions.",source:"@site/docs/en/engines/table-engines/mergetree-family/aggregatingmergetree.md",sourceDirName:"en/engines/table-engines/mergetree-family",slug:"/en/engines/table-engines/mergetree-family/aggregatingmergetree",permalink:"/docs/en/engines/table-engines/mergetree-family/aggregatingmergetree",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/engines/table-engines/mergetree-family/aggregatingmergetree.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{slug:"/en/engines/table-engines/mergetree-family/aggregatingmergetree",sidebar_position:60,sidebar_label:"AggregatingMergeTree"},sidebar:"english",previous:{title:"SummingMergeTree",permalink:"/docs/en/engines/table-engines/mergetree-family/summingmergetree"},next:{title:"CollapsingMergeTree",permalink:"/docs/en/engines/table-engines/mergetree-family/collapsingmergetree"}},s={},o=[{value:"AggregateFunction",id:"aggregatefunction",level:2},{value:"SimpleAggregateFunction",id:"simpleaggregatefunction",level:2},{value:"Creating a Table",id:"creating-a-table",level:2},{value:"SELECT and INSERT",id:"select-and-insert",level:2},{value:"Example of an Aggregated Materialized View",id:"example-of-an-aggregated-materialized-view",level:2}],p={toc:o},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aggregatingmergetree"},"AggregatingMergeTree"),(0,r.kt)("p",null,"The engine inherits from ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/mergetree-family/mergetree#table_engines-mergetree"},"MergeTree"),", altering the logic for data parts merging. ClickHouse replaces all rows with the same primary key (or more accurately, with the same ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/mergetree-family/mergetree"},"sorting key"),") with a single row (within a one data part) that stores a combination of states of aggregate functions."),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregatingMergeTree")," tables for incremental data aggregation, including for aggregated materialized views."),(0,r.kt)("p",null,"The engine processes all columns with the following types:"),(0,r.kt)("h2",{id:"aggregatefunction"},(0,r.kt)("a",{parentName:"h2",href:"/docs/en/sql-reference/data-types/aggregatefunction"},"AggregateFunction")),(0,r.kt)("h2",{id:"simpleaggregatefunction"},(0,r.kt)("a",{parentName:"h2",href:"/docs/en/sql-reference/data-types/simpleaggregatefunction"},"SimpleAggregateFunction")),(0,r.kt)("p",null,"It is appropriate to use ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregatingMergeTree")," if it reduces the number of rows by orders."),(0,r.kt)("h2",{id:"creating-a-table"},"Creating a Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],\n    ...\n) ENGINE = AggregatingMergeTree()\n[PARTITION BY expr]\n[ORDER BY expr]\n[SAMPLE BY expr]\n[TTL expr]\n[SETTINGS name=value, ...]\n")),(0,r.kt)("p",null,"For a description of request parameters, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table"},"request description"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Query clauses")),(0,r.kt)("p",null,"When creating an ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregatingMergeTree")," table the same ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/mergetree-family/mergetree"},"clauses")," are required, as when creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"MergeTree")," table."),(0,r.kt)("details",{markdown:"1"},(0,r.kt)("summary",null,"Deprecated Method for Creating a Table"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Do not use this method in new projects and, if possible, switch the old projects to the method described above.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],\n    ...\n) ENGINE [=] AggregatingMergeTree(date-column [, sampling_expression], (primary, key), index_granularity)\n")),(0,r.kt)("p",null,"All of the parameters have the same meaning as in ",(0,r.kt)("inlineCode",{parentName:"p"},"MergeTree"),".")),(0,r.kt)("h2",{id:"select-and-insert"},"SELECT and INSERT"),(0,r.kt)("p",null,"To insert data, use ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/insert-into"},"INSERT SELECT")," query with aggregate -State- functions.\nWhen selecting data from ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregatingMergeTree")," table, use ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUP BY")," clause and the same aggregate functions as when inserting data, but using ",(0,r.kt)("inlineCode",{parentName:"p"},"-Merge")," suffix."),(0,r.kt)("p",null,"In the results of ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," query, the values of ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregateFunction")," type have implementation-specific binary representation for all of the ClickHouse output formats. If dump data into, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"TabSeparated")," format with ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," query then this dump can be loaded back using ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT")," query."),(0,r.kt)("h2",{id:"example-of-an-aggregated-materialized-view"},"Example of an Aggregated Materialized View"),(0,r.kt)("p",null,"We will create the table ",(0,r.kt)("inlineCode",{parentName:"p"},"test.visits")," that contain the raw data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test.visits\n (\n    StartDate DateTime64 NOT NULL,\n    CounterID UInt64,\n    Sign Nullable(Int32),\n    UserID Nullable(Int32)\n) ENGINE = MergeTree ORDER BY (StartDate, CounterID);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AggregatingMergeTree")," materialized view that watches the ",(0,r.kt)("inlineCode",{parentName:"p"},"test.visits")," table, and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregateFunction")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW test.mv_visits\n(\n    StartDate DateTime64 NOT NULL,\n    CounterID UInt64,\n    Visits AggregateFunction(sum, Nullable(Int32)),\n    Users AggregateFunction(uniq, Nullable(Int32))\n)\nENGINE = AggregatingMergeTree() ORDER BY (StartDate, CounterID)\nAS SELECT\n    StartDate,\n    CounterID,\n    sumState(Sign) AS Visits,\n    uniqState(UserID) AS Users\nFROM test.visits\nGROUP BY StartDate, CounterID;\n")),(0,r.kt)("p",null,"Inserting data into the ",(0,r.kt)("inlineCode",{parentName:"p"},"test.visits")," table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO test.visits (StartDate, CounterID, Sign, UserID)\n VALUES (1667446031, 1, 3, 4)\nINSERT INTO test.visits (StartDate, CounterID, Sign, UserID)\n VALUES (1667446031, 1, 6, 3)\n")),(0,r.kt)("p",null,"The data are inserted in both the table and the materialized view ",(0,r.kt)("inlineCode",{parentName:"p"},"test.mv_visits"),"."),(0,r.kt)("p",null,"To get the aggregated data, we need to execute a query such as ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT ... GROUP BY ...")," from the materialized view ",(0,r.kt)("inlineCode",{parentName:"p"},"test.mv_visits"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    StartDate,\n    sumMerge(Visits) AS Visits,\n    uniqMerge(Users) AS Users\nFROM test.mv_visits\nGROUP BY StartDate\nORDER BY StartDate;\n")))}u.isMDXComponent=!0}}]);