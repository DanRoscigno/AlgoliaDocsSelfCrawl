"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[62351,52213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=u(n),g=r,m=f["".concat(s,".").concat(g)]||f[g]||p[g]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[f]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},38222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const l={slug:"/en/sql-reference/aggregate-functions/reference/intervalLengthSum",sidebar_position:146,sidebar_label:"intervalLengthSum",title:"intervalLengthSum"},i=void 0,o={unversionedId:"en/sql-reference/aggregate-functions/reference/intervalLengthSum",id:"en/sql-reference/aggregate-functions/reference/intervalLengthSum",title:"intervalLengthSum",description:"Calculates the total length of union of all ranges (segments on numeric axis).",source:"@site/docs/en/sql-reference/aggregate-functions/reference/intervalLengthSum.md",sourceDirName:"en/sql-reference/aggregate-functions/reference",slug:"/en/sql-reference/aggregate-functions/reference/intervalLengthSum",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/intervalLengthSum",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/aggregate-functions/reference/intervalLengthSum.md",tags:[],version:"current",sidebarPosition:146,frontMatter:{slug:"/en/sql-reference/aggregate-functions/reference/intervalLengthSum",sidebar_position:146,sidebar_label:"intervalLengthSum",title:"intervalLengthSum"},sidebar:"english",previous:{title:"sumKahan",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/sumkahan"},next:{title:"skewPop",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/skewpop"}},s={},u=[],c={toc:u},f="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Calculates the total length of union of all ranges (segments on numeric axis)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"intervalLengthSum(start, end)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start")," \u2014 The starting value of the interval. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"Int32"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"Int64"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"UInt32"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"UInt64"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/float#float32-float64"},"Float32"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/float#float32-float64"},"Float64"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/datetime#data_type-datetime"},"DateTime")," or ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/date#data_type-date"},"Date"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end")," \u2014 The ending value of the interval. ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"Int32"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"Int64"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"UInt32"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"UInt64"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/float#float32-float64"},"Float32"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/float#float32-float64"},"Float64"),", ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/datetime#data_type-datetime"},"DateTime")," or ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/date#data_type-date"},"Date"),".")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Arguments must be of the same data type. Otherwise, an exception will be thrown.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Total length of union of all ranges (segments on numeric axis). Depending on the type of the argument, the return value may be ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint#uint8-uint16-uint32-uint64-int8-int16-int32-int64"},"UInt64")," or ",(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/float#float32-float64"},"Float64")," type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Input table:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500start\u2500\u252c\u2500end\u2500\u2510\n\u2502 a  \u2502   1.1 \u2502 2.9 \u2502\n\u2502 a  \u2502   2.5 \u2502 3.2 \u2502\n\u2502 a  \u2502     4 \u2502   5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"In this example, the arguments of the Float32 type are used. The function returns a value of the Float64 type."),(0,r.kt)("p",null,"Result is the sum of lengths of intervals ",(0,r.kt)("inlineCode",{parentName:"p"},"[1.1, 3.2]")," (union of ",(0,r.kt)("inlineCode",{parentName:"p"},"[1.1, 2.9]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"[2.5, 3.2]"),") and ",(0,r.kt)("inlineCode",{parentName:"p"},"[4, 5]")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, intervalLengthSum(start, end), toTypeName(intervalLengthSum(start, end)) FROM fl_interval GROUP BY id ORDER BY id;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500intervalLengthSum(start, end)\u2500\u252c\u2500toTypeName(intervalLengthSum(start, end))\u2500\u2510\n\u2502 a  \u2502                           3.1 \u2502 Float64                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Input table:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500start\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500end\u2500\u2510\n\u2502 a  \u2502 2020-01-01 01:12:30 \u2502 2020-01-01 02:10:10 \u2502\n\u2502 a  \u2502 2020-01-01 02:05:30 \u2502 2020-01-01 02:50:31 \u2502\n\u2502 a  \u2502 2020-01-01 03:11:22 \u2502 2020-01-01 03:23:31 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"In this example, the arguments of the DateTime type are used. The function returns a value in seconds."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, intervalLengthSum(start, end), toTypeName(intervalLengthSum(start, end)) FROM dt_interval GROUP BY id ORDER BY id;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500intervalLengthSum(start, end)\u2500\u252c\u2500toTypeName(intervalLengthSum(start, end))\u2500\u2510\n\u2502 a  \u2502                          6610 \u2502 UInt64                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Input table:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500start\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500end\u2500\u2510\n\u2502 a  \u2502 2020-01-01 \u2502 2020-01-04 \u2502\n\u2502 a  \u2502 2020-01-12 \u2502 2020-01-18 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"In this example, the arguments of the Date type are used. The function returns a value in days."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, intervalLengthSum(start, end), toTypeName(intervalLengthSum(start, end)) FROM date_interval GROUP BY id ORDER BY id;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500intervalLengthSum(start, end)\u2500\u252c\u2500toTypeName(intervalLengthSum(start, end))\u2500\u2510\n\u2502 a  \u2502                             9 \u2502 UInt64                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}p.isMDXComponent=!0},88005:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),l=n(38222);const i={slug:"/zh/sql-reference/aggregate-functions/reference/intervalLengthSum",sidebar_position:146,sidebar_label:"intervalLengthSum",title:"intervalLengthSum"},o=void 0,s={unversionedId:"zh/sql-reference/aggregate-functions/reference/intervalLengthSum",id:"zh/sql-reference/aggregate-functions/reference/intervalLengthSum",title:"intervalLengthSum",description:"",source:"@site/docs/zh/sql-reference/aggregate-functions/reference/intervalLengthSum.mdx",sourceDirName:"zh/sql-reference/aggregate-functions/reference",slug:"/zh/sql-reference/aggregate-functions/reference/intervalLengthSum",permalink:"/AlgoliaDocsSelfCrawl/zh/sql-reference/aggregate-functions/reference/intervalLengthSum",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/zh/sql-reference/aggregate-functions/reference/intervalLengthSum.mdx",tags:[],version:"current",sidebarPosition:146,frontMatter:{slug:"/zh/sql-reference/aggregate-functions/reference/intervalLengthSum",sidebar_position:146,sidebar_label:"intervalLengthSum",title:"intervalLengthSum"},sidebar:"chinese",previous:{title:"sumKahan",permalink:"/AlgoliaDocsSelfCrawl/zh/sql-reference/aggregate-functions/reference/sumkahan"},next:{title:"initializeAggregation",permalink:"/AlgoliaDocsSelfCrawl/zh/sql-reference/aggregate-functions/reference/initializeAggregation"}},u={},c=[],f={toc:c},p="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.default,{mdxType:"Content"}))}g.isMDXComponent=!0}}]);