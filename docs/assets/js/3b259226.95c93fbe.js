"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[87176],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),c=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},k=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),k=a,d=u["".concat(o,".").concat(k)]||u[k]||m[k]||r;return n?i.createElement(d,l(l({ref:t},p),{},{components:n})):i.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}k.displayName="MDXCreateElement"},48215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const r={slug:"/en/operations/utilities/clickhouse-benchmark",sidebar_position:61,sidebar_label:"clickhouse-benchmark"},l="clickhouse-benchmark",s={unversionedId:"en/operations/utilities/clickhouse-benchmark",id:"en/operations/utilities/clickhouse-benchmark",title:"clickhouse-benchmark",description:"Connects to a ClickHouse server and repeatedly sends specified queries.",source:"@site/docs/en/operations/utilities/clickhouse-benchmark.md",sourceDirName:"en/operations/utilities",slug:"/en/operations/utilities/clickhouse-benchmark",permalink:"/docs/en/operations/utilities/clickhouse-benchmark",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/utilities/clickhouse-benchmark.md",tags:[],version:"current",sidebarPosition:61,frontMatter:{slug:"/en/operations/utilities/clickhouse-benchmark",sidebar_position:61,sidebar_label:"clickhouse-benchmark"},sidebar:"english",previous:{title:"clickhouse-local",permalink:"/docs/en/operations/utilities/clickhouse-local"},next:{title:"clickhouse-compressor",permalink:"/docs/en/operations/utilities/clickhouse-compressor"}},o={},c=[{value:"Keys",id:"clickhouse-benchmark-keys",level:2},{value:"Output",id:"clickhouse-benchmark-output",level:2},{value:"Comparison Mode",id:"clickhouse-benchmark-comparison-mode",level:2},{value:"Example",id:"clickhouse-benchmark-example",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"clickhouse-benchmark"},"clickhouse-benchmark"),(0,a.kt)("p",null,"Connects to a ClickHouse server and repeatedly sends specified queries."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Syntax")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-benchmark --query ["single query"] [keys]\n')),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ echo "single query" | clickhouse-benchmark [keys]\n')),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-benchmark [keys] <<< "single query"\n')),(0,a.kt)("p",null,"If you want to send a set of queries, create a text file and place each query on the individual string in this file. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM system.numbers LIMIT 10000000;\nSELECT 1;\n")),(0,a.kt)("p",null,"Then pass this file to a standard input of ",(0,a.kt)("inlineCode",{parentName:"p"},"clickhouse-benchmark"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-benchmark [keys] < queries_file;\n")),(0,a.kt)("h2",{id:"clickhouse-benchmark-keys"},"Keys"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--query=QUERY")," \u2014 Query to execute. If this parameter is not passed, ",(0,a.kt)("inlineCode",{parentName:"li"},"clickhouse-benchmark")," will read queries from standard input."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-c N"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--concurrency=N")," \u2014 Number of queries that ",(0,a.kt)("inlineCode",{parentName:"li"},"clickhouse-benchmark")," sends simultaneously. Default value: 1."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-d N"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--delay=N")," \u2014 Interval in seconds between intermediate reports (to disable reports set 0). Default value: 1."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-h HOST"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--host=HOST")," \u2014 Server host. Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"localhost"),". For the ",(0,a.kt)("a",{parentName:"li",href:"#clickhouse-benchmark-comparison-mode"},"comparison mode")," you can use multiple ",(0,a.kt)("inlineCode",{parentName:"li"},"-h")," keys."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-p N"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--port=N")," \u2014 Server port. Default value: 9000. For the ",(0,a.kt)("a",{parentName:"li",href:"#clickhouse-benchmark-comparison-mode"},"comparison mode")," you can use multiple ",(0,a.kt)("inlineCode",{parentName:"li"},"-p")," keys."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-i N"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--iterations=N")," \u2014 Total number of queries. Default value: 0 (repeat forever)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-r"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--randomize")," \u2014 Random order of queries execution if there is more than one input query."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-s"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--secure")," \u2014 Using ",(0,a.kt)("inlineCode",{parentName:"li"},"TLS")," connection."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-t N"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--timelimit=N")," \u2014 Time limit in seconds. ",(0,a.kt)("inlineCode",{parentName:"li"},"clickhouse-benchmark")," stops sending queries when the specified time limit is reached. Default value: 0 (time limit disabled)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--confidence=N")," \u2014 Level of confidence for T-test. Possible values: 0 (80%), 1 (90%), 2 (95%), 3 (98%), 4 (99%), 5 (99.5%). Default value: 5. In the ",(0,a.kt)("a",{parentName:"li",href:"#clickhouse-benchmark-comparison-mode"},"comparison mode")," ",(0,a.kt)("inlineCode",{parentName:"li"},"clickhouse-benchmark")," performs the ",(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Student%27s_t-test#Independent_two-sample_t-test"},"Independent two-sample Student\u2019s t-test")," to determine whether the two distributions aren\u2019t different with the selected level of confidence."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--cumulative")," \u2014 Printing cumulative data instead of data per interval."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--database=DATABASE_NAME")," \u2014 ClickHouse database name. Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"default"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--json=FILEPATH")," \u2014 ",(0,a.kt)("inlineCode",{parentName:"li"},"JSON")," output. When the key is set, ",(0,a.kt)("inlineCode",{parentName:"li"},"clickhouse-benchmark")," outputs a report to the specified JSON-file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--user=USERNAME")," \u2014 ClickHouse user name. Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"default"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--password=PSWD")," \u2014 ClickHouse user password. Default value: empty string."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--stacktrace")," \u2014 Stack traces output. When the key is set, ",(0,a.kt)("inlineCode",{parentName:"li"},"clickhouse-bencmark")," outputs stack traces of exceptions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--stage=WORD")," \u2014 Query processing stage at server. ClickHouse stops query processing and returns an answer to ",(0,a.kt)("inlineCode",{parentName:"li"},"clickhouse-benchmark")," at the specified stage. Possible values: ",(0,a.kt)("inlineCode",{parentName:"li"},"complete"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"fetch_columns"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"with_mergeable_state"),". Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"complete"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--help")," \u2014 Shows the help message.")),(0,a.kt)("p",null,"If you want to apply some ",(0,a.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/"},"settings")," for queries, pass them as a key ",(0,a.kt)("inlineCode",{parentName:"p"},"--<session setting name>= SETTING_VALUE"),". For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"--max_memory_usage=1048576"),"."),(0,a.kt)("h2",{id:"clickhouse-benchmark-output"},"Output"),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"clickhouse-benchmark")," reports for each ",(0,a.kt)("inlineCode",{parentName:"p"},"--delay")," interval."),(0,a.kt)("p",null,"Example of the report:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Queries executed: 10.\n\nlocalhost:9000, queries 10, QPS: 6.772, RPS: 67904487.440, MiB/s: 518.070, result RPS: 67721584.984, result MiB/s: 516.675.\n\n0.000%      0.145 sec.\n10.000%     0.146 sec.\n20.000%     0.146 sec.\n30.000%     0.146 sec.\n40.000%     0.147 sec.\n50.000%     0.148 sec.\n60.000%     0.148 sec.\n70.000%     0.148 sec.\n80.000%     0.149 sec.\n90.000%     0.150 sec.\n95.000%     0.150 sec.\n99.000%     0.150 sec.\n99.900%     0.150 sec.\n99.990%     0.150 sec.\n")),(0,a.kt)("p",null,"In the report you can find:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Number of queries in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Queries executed:")," field.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Status string containing (in order):"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Endpoint of ClickHouse server."),(0,a.kt)("li",{parentName:"ul"},"Number of processed queries."),(0,a.kt)("li",{parentName:"ul"},"QPS: How many queries the server performed per second during a period specified in the ",(0,a.kt)("inlineCode",{parentName:"li"},"--delay")," argument."),(0,a.kt)("li",{parentName:"ul"},"RPS: How many rows the server reads per second during a period specified in the ",(0,a.kt)("inlineCode",{parentName:"li"},"--delay")," argument."),(0,a.kt)("li",{parentName:"ul"},"MiB/s: How many mebibytes the server reads per second during a period specified in the ",(0,a.kt)("inlineCode",{parentName:"li"},"--delay")," argument."),(0,a.kt)("li",{parentName:"ul"},"result RPS: How many rows placed by the server to the result of a query per second during a period specified in the ",(0,a.kt)("inlineCode",{parentName:"li"},"--delay")," argument."),(0,a.kt)("li",{parentName:"ul"},"result MiB/s. How many mebibytes placed by the server to the result of a query per second during a period specified in the ",(0,a.kt)("inlineCode",{parentName:"li"},"--delay")," argument."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Percentiles of queries execution time."))),(0,a.kt)("h2",{id:"clickhouse-benchmark-comparison-mode"},"Comparison Mode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"clickhouse-benchmark")," can compare performances for two running ClickHouse servers."),(0,a.kt)("p",null,"To use the comparison mode, specify endpoints of both servers by two pairs of ",(0,a.kt)("inlineCode",{parentName:"p"},"--host"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--port")," keys. Keys matched together by position in arguments list, the first ",(0,a.kt)("inlineCode",{parentName:"p"},"--host")," is matched with the first ",(0,a.kt)("inlineCode",{parentName:"p"},"--port")," and so on. ",(0,a.kt)("inlineCode",{parentName:"p"},"clickhouse-benchmark")," establishes connections to both servers, then sends queries. Each query addressed to a randomly selected server. The results are shown in a table."),(0,a.kt)("h2",{id:"clickhouse-benchmark-example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ echo "SELECT * FROM system.numbers LIMIT 10000000 OFFSET 10000000" | clickhouse-benchmark --host=localhost --port=9001 --host=localhost --port=9000 -i 10\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Loaded 1 queries.\n\nQueries executed: 5.\n\nlocalhost:9001, queries 2, QPS: 3.764, RPS: 75446929.370, MiB/s: 575.614, result RPS: 37639659.982, result MiB/s: 287.168.\nlocalhost:9000, queries 3, QPS: 3.815, RPS: 76466659.385, MiB/s: 583.394, result RPS: 38148392.297, result MiB/s: 291.049.\n\n0.000%          0.258 sec.      0.250 sec.\n10.000%         0.258 sec.      0.250 sec.\n20.000%         0.258 sec.      0.250 sec.\n30.000%         0.258 sec.      0.267 sec.\n40.000%         0.258 sec.      0.267 sec.\n50.000%         0.273 sec.      0.267 sec.\n60.000%         0.273 sec.      0.267 sec.\n70.000%         0.273 sec.      0.267 sec.\n80.000%         0.273 sec.      0.269 sec.\n90.000%         0.273 sec.      0.269 sec.\n95.000%         0.273 sec.      0.269 sec.\n99.000%         0.273 sec.      0.269 sec.\n99.900%         0.273 sec.      0.269 sec.\n99.990%         0.273 sec.      0.269 sec.\n\nNo difference proven at 99.5% confidence\n")))}m.isMDXComponent=!0}}]);