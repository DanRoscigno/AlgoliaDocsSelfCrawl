"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[80084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>E});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=i(n),d=a,E=u["".concat(c,".").concat(d)]||u[d]||m[d]||l;return n?r.createElement(E,o(o({ref:t},p),{},{components:n})):r.createElement(E,o({ref:t},p))}));function E(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var i=2;i<l;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var r=n(87462),a=(n(67294),n(3905));const l={slug:"/en/sql-reference/statements/select/except",sidebar_label:"EXCEPT"},o="EXCEPT Clause",s={unversionedId:"en/sql-reference/statements/select/except",id:"en/sql-reference/statements/select/except",title:"EXCEPT Clause",description:"The EXCEPT clause returns only those rows that result from the first query without the second. The queries must match the number of columns, order, and type. The result of EXCEPT can contain duplicate rows.",source:"@site/docs/en/sql-reference/statements/select/except.md",sourceDirName:"en/sql-reference/statements/select",slug:"/en/sql-reference/statements/select/except",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/except",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/statements/select/except.md",tags:[],version:"current",frontMatter:{slug:"/en/sql-reference/statements/select/except",sidebar_label:"EXCEPT"},sidebar:"english",previous:{title:"DISTINCT",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/distinct"},next:{title:"FORMAT",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/format"}},c={},i=[{value:"Examples",id:"examples",level:2},{value:"EXCEPT DISTINCT",id:"except-distinct",level:2}],p={toc:i},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"except-clause"},"EXCEPT Clause"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"EXCEPT")," clause returns only those rows that result from the first query without the second. The queries must match the number of columns, order, and type. The result of ",(0,a.kt)("inlineCode",{parentName:"p"},"EXCEPT")," can contain duplicate rows."),(0,a.kt)("p",null,"Multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"EXCEPT")," statements are executed left to right if parenthesis are not specified. The ",(0,a.kt)("inlineCode",{parentName:"p"},"EXCEPT")," operator has the same priority as the ",(0,a.kt)("inlineCode",{parentName:"p"},"UNION")," clause and lower priority than the ",(0,a.kt)("inlineCode",{parentName:"p"},"INTERSECT")," clause."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1 [, column2 ]\nFROM table1\n[WHERE condition]\n\nEXCEPT\n\nSELECT column1 [, column2 ]\nFROM table2\n[WHERE condition]\n\n")),(0,a.kt)("p",null,"The condition could be any expression based on your requirements."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Here is a simple example that returns the numbers 1 to 10 that are ",(0,a.kt)("em",{parentName:"p"},"not")," a part of the numbers 3 to 8:"),(0,a.kt)("p",null,"Query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT number FROM numbers(1,10) EXCEPT SELECT number FROM numbers(3,6);\n")),(0,a.kt)("p",null,"Result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500number\u2500\u2510\n\u2502      1 \u2502\n\u2502      2 \u2502\n\u2502      9 \u2502\n\u2502     10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"EXCEPT")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"INTERSECT")," can often be used interchangeably with different Boolean logic, and they are both useful if you have two tables that share a common column (or columns). For example, suppose we have a few million rows of historical cryptocurrency data that contains trade prices and volume:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE crypto_prices\n(\n    trade_date Date,\n    crypto_name String,\n    volume Float32,\n    price Float32,\n    market_cap Float32,\n    change_1_day Float32\n)\nENGINE = MergeTree\nPRIMARY KEY (crypto_name, trade_date);\n\nINSERT INTO crypto_prices\n   SELECT *\n   FROM s3(\n    'https://learn-clickhouse.s3.us-east-2.amazonaws.com/crypto_prices.csv',\n    'CSVWithNames'\n);\n\nSELECT * FROM crypto_prices\nWHERE crypto_name = 'Bitcoin'\nORDER BY trade_date DESC\nLIMIT 10;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500trade_date\u2500\u252c\u2500crypto_name\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500volume\u2500\u252c\u2500\u2500\u2500\u2500price\u2500\u252c\u2500\u2500\u2500market_cap\u2500\u252c\u2500\u2500change_1_day\u2500\u2510\n\u2502 2020-11-02 \u2502 Bitcoin     \u2502 30771456000 \u2502 13550.49 \u2502 251119860000 \u2502  -0.013585099 \u2502\n\u2502 2020-11-01 \u2502 Bitcoin     \u2502 24453857000 \u2502 13737.11 \u2502 254569760000 \u2502 -0.0031840964 \u2502\n\u2502 2020-10-31 \u2502 Bitcoin     \u2502 30306464000 \u2502 13780.99 \u2502 255372070000 \u2502   0.017308505 \u2502\n\u2502 2020-10-30 \u2502 Bitcoin     \u2502 30581486000 \u2502 13546.52 \u2502 251018150000 \u2502   0.008084608 \u2502\n\u2502 2020-10-29 \u2502 Bitcoin     \u2502 56499500000 \u2502 13437.88 \u2502 248995320000 \u2502   0.012552661 \u2502\n\u2502 2020-10-28 \u2502 Bitcoin     \u2502 35867320000 \u2502 13271.29 \u2502 245899820000 \u2502   -0.02804481 \u2502\n\u2502 2020-10-27 \u2502 Bitcoin     \u2502 33749879000 \u2502 13654.22 \u2502 252985950000 \u2502    0.04427984 \u2502\n\u2502 2020-10-26 \u2502 Bitcoin     \u2502 29461459000 \u2502 13075.25 \u2502 242251000000 \u2502  0.0033826586 \u2502\n\u2502 2020-10-25 \u2502 Bitcoin     \u2502 24406921000 \u2502 13031.17 \u2502 241425220000 \u2502 -0.0058658565 \u2502\n\u2502 2020-10-24 \u2502 Bitcoin     \u2502 24542319000 \u2502 13108.06 \u2502 242839880000 \u2502   0.013650347 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,"Now suppose we have a table named ",(0,a.kt)("inlineCode",{parentName:"p"},"holdings")," that contains a list of cryptocurrencies that we own, along with the number of coins:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE holdings\n(\n    crypto_name String,\n    quantity UInt64\n)\nENGINE = MergeTree\nPRIMARY KEY (crypto_name);\n\nINSERT INTO holdings VALUES\n   ('Bitcoin', 1000),\n   ('Bitcoin', 200),\n   ('Ethereum', 250),\n   ('Ethereum', 5000),\n   ('DOGEFI', 10);\n   ('Bitcoin Diamond', 5000);\n")),(0,a.kt)("p",null,"We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"EXCEPT")," to answer a question like ",(0,a.kt)("strong",{parentName:"p"},'"Which coins do we own have never traded below $10?"'),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT crypto_name FROM holdings\nEXCEPT\nSELECT crypto_name FROM crypto_prices\nWHERE price < 10;\n")),(0,a.kt)("p",null,"Result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500crypto_name\u2500\u2510\n\u2502 Bitcoin     \u2502\n\u2502 Bitcoin     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,"This means of the four cryptocurrencies we own, only Bitcoin has never dropped below $10 (based on the limited data we have here in this example)."),(0,a.kt)("h2",{id:"except-distinct"},"EXCEPT DISTINCT"),(0,a.kt)("p",null,"Notice in the previous query we had multiple Bitcoin holdings in the result. You can add ",(0,a.kt)("inlineCode",{parentName:"p"},"DISTINCT")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"EXCEPT")," to eliminate duplicate rows from the result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT crypto_name FROM holdings\nEXCEPT DISTINCT\nSELECT crypto_name FROM crypto_prices\nWHERE price < 10;\n")),(0,a.kt)("p",null,"Result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500crypto_name\u2500\u2510\n\u2502 Bitcoin     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"See Also")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/union#union-clause"},"UNION")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/intersect#intersect-clause"},"INTERSECT"))))}m.isMDXComponent=!0}}]);