"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[7007],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_label:"Java client",sidebar_position:2,keywords:["clickhouse","java","client","integrate"],description:"The ClickHouse Java driver",slug:"/en/integrations/language-clients/java/client"},i="JDBC driver",o={unversionedId:"en/integrations/language-clients/java/client",id:"en/integrations/language-clients/java/client",title:"JDBC driver",description:"The ClickHouse Java driver",source:"@site/docs/en/integrations/language-clients/java/client.md",sourceDirName:"en/integrations/language-clients/java",slug:"/en/integrations/language-clients/java/client",permalink:"/AlgoliaDocsSelfCrawl/en/integrations/language-clients/java/client",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/language-clients/java/client.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Java client",sidebar_position:2,keywords:["clickhouse","java","client","integrate"],description:"The ClickHouse Java driver",slug:"/en/integrations/language-clients/java/client"}},s={},u=[{value:"Environment requirements",id:"environment-requirements",level:2},{value:"Compatibility with ClickHouse",id:"compatibility-with-clickhouse",level:2},{value:"Installation",id:"installation",level:2},{value:"Supported data types",id:"supported-data-types",level:2},{value:"Driver API",id:"driver-api",level:2},{value:"Connect to ClickHouse",id:"connect-to-clickhouse",level:3},{value:"Query",id:"query",level:3},{value:"Streaming Query",id:"streaming-query",level:3},{value:"Insert",id:"insert",level:3},{value:"Multiple queries",id:"multiple-queries",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jdbc-driver"},"JDBC driver"),(0,r.kt)("p",null,"Provides the most flexible and performant way to integrate your app with ClickHouse."),(0,r.kt)("h2",{id:"environment-requirements"},"Environment requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://openjdk.java.net"},"OpenJDK")," version >= 17")),(0,r.kt)("h2",{id:"compatibility-with-clickhouse"},"Compatibility with ClickHouse"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Client version"),(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.4.0"),(0,r.kt)("td",{parentName:"tr",align:null},"20.7+")))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.clickhouse</groupId>\n    \x3c!-- or clickhouse-grpc-client if you prefer gRPC --\x3e\n    <artifactId>clickhouse-http-client</artifactId>\n    <version>0.4.0</version>\n</dependency>\n")),(0,r.kt)("h2",{id:"supported-data-types"},"Supported data types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Format"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AggregatedFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"limited to ",(0,r.kt)("inlineCode",{parentName:"td"},"groupBitmap"),", and known to have issue with 64bit bitmap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Array(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bool"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SET output_format_decimal_trailing_zeros=1")," in 21.9+ for consistency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"can be treated as both string and integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Geo Types"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Point, Ring, Polygon, and MultiPolygon")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int","*",", UInt","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt64 is mapped to ",(0,r.kt)("inlineCode",{parentName:"td"},"long"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nested(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Object('JSON')"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SimpleAggregateFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*","String"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"driver-api"},"Driver API"),(0,r.kt)("h3",{id:"connect-to-clickhouse"},"Connect to ClickHouse"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"URL Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"protocol://host[:port][/database][?param[=value][&param[=value]][#tag[,tag]]"),", for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8443?ssl=true&sslmode=NONE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"http://(https://explorer@play.clickhouse.com:443")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tcp://localhost?!auto_discovery#experimental),(grpc://localhost#experimental)?failover=3#test"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ClickHouseNodes servers = ClickHouseNodes.of(\n    "jdbc:ch:http://server1.domain,server2.domain,server3.domain/my_db"\n    + "?load_balancing_policy=random&health_check_interval=5000&failover=2");\n')),(0,r.kt)("h3",{id:"query"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ClickHouseResponse response = client.connect(endpoint) // or client.connect(endpoints)\n    // you\'ll have to parse response manually if using a different format\n    .format(ClickHouseFormat.RowBinaryWithNamesAndTypes)\n    .query("select * from numbers(:limit)")\n    .params(1000).executeAndWait()) {\n            ClickHouseResponseSummary summary = response.getSummary();\n            long totalRows = summary.getTotalRowsToRead();\n')),(0,r.kt)("h3",{id:"streaming-query"},"Streaming Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ClickHouseResponse response = client.connect(endpoint) // or client.connect(endpoints)\n    // you\'ll have to parse response manually if using a different format\n    .format(ClickHouseFormat.RowBinaryWithNamesAndTypes)\n    .query("select * from numbers(:limit)")\n    .params(1000).executeAndWait()) {\n    for (ClickHouseRecord r : response.records()) {\n        int num = r.getValue(0).asInteger();\n        // type conversion\n        String str = r.getValue(0).asString();\n        LocalDate date = r.getValue(0).asDate();\n    }\n')),(0,r.kt)("h3",{id:"insert"},"Insert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"try (ClickHouseClient client = ClickHouseClient.newInstance(ClickHouseProtocol.HTTP)) {\n    ClickHouseRequest<?> request = client.connect(servers).format(ClickHouseFormat.RowBinaryWithNamesAndTypes);\n    // load data into a table and wait until it's completed\n    request.write()\n        .query(\"insert into my_table select c2, c3 from input('c1 UInt8, c2 String, c3 Int32')\")\n        .data(myInputStream).execute().thenAccept(response -> {\n            response.close();\n        });\n")),(0,r.kt)("h3",{id:"multiple-queries"},"Multiple queries"),(0,r.kt)("p",null,"Execute multiple queries in a worker thread one after another within same session:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CompletableFuture<List<ClickHouseResponseSummary>> future = ClickHouseClient.send(servers.get(),\n    "create database if not exists my_base",\n    "use my_base",\n    "create table if not exists test_table(s String) engine=Memory",\n    "insert into test_table values(\'1\')(\'2\')(\'3\')",\n    "select * from test_table limit 1",\n    "truncate table test_table",\n    "drop table if exists test_table");\n\n// block current thread until queries completed, and then retrieve summaries\nList<ClickHouseResponseSummary> results = future.get();\n')))}m.isMDXComponent=!0}}]);