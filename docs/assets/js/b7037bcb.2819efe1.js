"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[2742],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,g=c["".concat(i,".").concat(d)]||c[d]||u[d]||o;return a?n.createElement(g,l(l({ref:t},m),{},{components:a})):n.createElement(g,l({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},63732:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_label:"Regexp and templates",sidebar_position:3,slug:"/en/integrations/data-formats/templates-regexp"},l="Importing and exporting custom text data using Templates and Regex in ClickHouse",s={unversionedId:"en/integrations/data-ingestion/data-formats/templates-regex",id:"en/integrations/data-ingestion/data-formats/templates-regex",title:"Importing and exporting custom text data using Templates and Regex in ClickHouse",description:"We often have to deal with data in custom text formats. That could be a non-standard format, invalid JSON, or a broken CSV. Using standard parsers like CSV or JSON won't work in all such cases. But ClickHouse has us covered here with powerful Template and Regex formats.",source:"@site/docs/en/integrations/data-ingestion/data-formats/templates-regex.md",sourceDirName:"en/integrations/data-ingestion/data-formats",slug:"/en/integrations/data-formats/templates-regexp",permalink:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/templates-regexp",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/data-ingestion/data-formats/templates-regex.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Regexp and templates",sidebar_position:3,slug:"/en/integrations/data-formats/templates-regexp"}},i={},p=[{value:"Importing based on a template",id:"importing-based-on-a-template",level:2},{value:"Skipping whitespaces",id:"skipping-whitespaces",level:3},{value:"Exporting data using templates",id:"exporting-data-using-templates",level:2},{value:"Exporting to HTML files",id:"exporting-to-html-files",level:3},{value:"Exporting to XML",id:"exporting-to-xml",level:3},{value:"Importing data based on regular expressions",id:"importing-data-based-on-regular-expressions",level:2},{value:"Other formats",id:"other-formats",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"importing-and-exporting-custom-text-data-using-templates-and-regex-in-clickhouse"},"Importing and exporting custom text data using Templates and Regex in ClickHouse"),(0,r.kt)("p",null,"We often have to deal with data in custom text formats. That could be a non-standard format, invalid JSON, or a broken CSV. Using standard parsers like CSV or JSON won't work in all such cases. But ClickHouse has us covered here with powerful Template and Regex formats."),(0,r.kt)("h2",{id:"importing-based-on-a-template"},"Importing based on a template"),(0,r.kt)("p",null,"Suppose we want to import data from the following ",(0,r.kt)("a",{target:"_blank",href:a(82607).Z},"log file"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"head error.log\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-response"},'2023/01/15 14:51:17 [error]  client: 7.2.8.1, server: example.com "GET /apple-touch-icon-120x120.png HTTP/1.1"\n2023/01/16 06:02:09 [error]  client: 8.4.2.7, server: example.com "GET /apple-touch-icon-120x120.png HTTP/1.1"\n2023/01/15 13:46:13 [error]  client: 6.9.3.7, server: example.com "GET /apple-touch-icon.png HTTP/1.1"\n2023/01/16 05:34:55 [error]  client: 9.9.7.6, server: example.com "GET /h5/static/cert/icon_yanzhengma.png HTTP/1.1"\n')),(0,r.kt)("p",null,"We can use a ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#format-template"},"Template")," format to import this data. We have to define a template string with values placeholders for each row of input data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<time> [error] client: <ip>, server: <host> "<request>"\n')),(0,r.kt)("p",null,"Let's create a table to import our data into:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE error_log\n(\n    `time` DateTime,\n    `ip` String,\n    `host` String,\n    `request` String\n)\nENGINE = MergeTree\nORDER BY (host, request, time)\n")),(0,r.kt)("p",null,"To import data using a given template, we have to save our template string in a file (",(0,r.kt)("a",{target:"_blank",href:a(80639).Z},"row.template")," in our case):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"${time:Escaped} [error]  client: ${ip:CSV}, server: ${host:CSV} ${request:JSON}\n")),(0,r.kt)("p",null,"We define a name of a column and escaping rule in a ",(0,r.kt)("inlineCode",{parentName:"p"},"${name:escaping}")," format. Multiple options are available here, like CSV, JSON, Escaped, or Quoted, which implement ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#format-template"},"respective escaping rules"),"."),(0,r.kt)("p",null,"Now we can use the given file as an argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"format_template_row")," settings option while importing data (",(0,r.kt)("em",{parentName:"p"},"note, that template and data files ",(0,r.kt)("strong",{parentName:"em"},"should not have")," an extra ",(0,r.kt)("inlineCode",{parentName:"em"},"\\n")," symbol at the end of file"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO error_log FROM INFILE 'error.log'\nSETTINGS format_template_row = 'row.template'\nFORMAT Template\n")),(0,r.kt)("p",null,"And we can make sure our data was loaded into the table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    request,\n    count(*)\nFROM error_log\nGROUP BY request\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500request\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500count()\u2500\u2510\n\u2502 GET /img/close.png HTTP/1.1                      \u2502     176 \u2502\n\u2502 GET /h5/static/cert/icon_yanzhengma.png HTTP/1.1 \u2502     172 \u2502\n\u2502 GET /phone/images/icon_01.png HTTP/1.1           \u2502     139 \u2502\n\u2502 GET /apple-touch-icon-precomposed.png HTTP/1.1   \u2502     161 \u2502\n\u2502 GET /apple-touch-icon.png HTTP/1.1               \u2502     162 \u2502\n\u2502 GET /apple-touch-icon-120x120.png HTTP/1.1       \u2502     190 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"skipping-whitespaces"},"Skipping whitespaces"),(0,r.kt)("p",null,"Consider using ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#templateignorespaces"},"TemplateIgnoreSpaces"),", which allows skipping whitespaces between delimiters in a template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Template:               --\x3e  "p1: ${p1:CSV}, p2: ${p2:CSV}"\nTemplateIgnoreSpaces    --\x3e  "p1:${p1:CSV}, p2:${p2:CSV}"\n')),(0,r.kt)("h2",{id:"exporting-data-using-templates"},"Exporting data using templates"),(0,r.kt)("p",null,"We can also export data to any text format using templates as well. In this case, we have to create two files:"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(888).Z},"Result set template"),", which defines the layout for the whole result set:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"== Top 10 IPs ==\n${data}\n--- ${rows_read:XML} rows read in ${time:XML} ---\n")),(0,r.kt)("p",null,"Here, ",(0,r.kt)("inlineCode",{parentName:"p"},"rows_read")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"time")," are system metrics available for each request. While ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," stands for generated rows (",(0,r.kt)("inlineCode",{parentName:"p"},"${data}")," should always come as a first placeholder in this file), based on a template defined in a ",(0,r.kt)("a",{target:"_blank",href:a(50385).Z},(0,r.kt)("strong",null,"row template file")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"${ip:Escaped} generated ${total:Escaped} requests\n")),(0,r.kt)("p",null,"Now let's use these templates to export the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    ip,\n    count() AS total\nFROM error_log GROUP BY ip ORDER BY total DESC LIMIT 10\nFORMAT Template SETTINGS format_template_resultset = 'output.results',\n                         format_template_row = 'output.rows';\n\n== Top 10 IPs ==\n\n9.8.4.6 generated 3 requests\n9.5.1.1 generated 3 requests\n2.4.8.9 generated 3 requests\n4.8.8.2 generated 3 requests\n4.5.4.4 generated 3 requests\n3.3.6.4 generated 2 requests\n8.9.5.9 generated 2 requests\n2.5.1.8 generated 2 requests\n6.8.3.6 generated 2 requests\n6.6.3.5 generated 2 requests                   \n\n--- 1000 rows read in 0.001380604 ---\n")),(0,r.kt)("h3",{id:"exporting-to-html-files"},"Exporting to HTML files"),(0,r.kt)("p",null,"Template-based results can also be exported to files using an ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/select/into-outfile.md/"},(0,r.kt)("inlineCode",{parentName:"a"},"INTO OUTFILE"))," clause. Let's generate HTML files based on given ",(0,r.kt)("a",{target:"_blank",href:a(2636).Z},"resultset")," and ",(0,r.kt)("a",{target:"_blank",href:a(30270).Z},"row")," formats:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    ip,\n    count() AS total\nFROM error_log GROUP BY ip ORDER BY total DESC LIMIT 10\nINTO OUTFILE 'out.html'\nFORMAT Template\nSETTINGS format_template_resultset = 'html.results',\n         format_template_row = 'html.row'\n")),(0,r.kt)("h3",{id:"exporting-to-xml"},"Exporting to XML"),(0,r.kt)("p",null,"Template format can be used to generate all imaginable text format files, including XML. Just put a relevant template and do the export."),(0,r.kt)("p",null,"Also consider using an ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#xml"},"XML")," format to get standard XML results including metadata:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM error_log\nLIMIT 3\nFORMAT XML\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<?xml version='1.0' encoding='UTF-8' ?>\n<result>\n    <meta>\n        <columns>\n            <column>\n                <name>time</name>\n                <type>DateTime</type>\n            </column>\n            ...\n        </columns>\n    </meta>\n    <data>\n        <row>\n            <time>2023-01-15 13:00:01</time>\n            <ip>3.5.9.2</ip>\n            <host>example.com</host>\n            <request>GET /apple-touch-icon-120x120.png HTTP/1.1</request>\n        </row>\n        ...\n    </data>\n    <rows>3</rows>\n    <rows_before_limit_at_least>1000</rows_before_limit_at_least>\n    <statistics>\n        <elapsed>0.000745001</elapsed>\n        <rows_read>1000</rows_read>\n        <bytes_read>88184</bytes_read>\n    </statistics>\n</result>\n\n")),(0,r.kt)("h2",{id:"importing-data-based-on-regular-expressions"},"Importing data based on regular expressions"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#data-format-regexp"},"Regexp")," format addresses more sophisticated cases when input data needs to be parsed in a more complex way. Let's parse our ",(0,r.kt)("a",{target:"_blank",href:a(82607).Z},"error.log")," example file, but capture the file name and protocol this time to save them into separate columns. First, let's prepare a new table for that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE error_log\n(\n    `time` DateTime,\n    `ip` String,\n    `host` String,\n    `file` String,\n    `protocol` String\n)\nENGINE = MergeTree\nORDER BY (host, file, time)\n")),(0,r.kt)("p",null,"Now we can import data based on a regular expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO error_log FROM INFILE 'error.log'\nSETTINGS\n  format_regexp = '(.+?) \\\\[error\\\\]  client: (.+), server: (.+?) \"GET .+?([^/]+\\\\.[^ ]+) (.+?)\"'\nFORMAT Regexp\n")),(0,r.kt)("p",null,"ClickHouse will insert data from each capture group into the relevant column based on its order. Let's check the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM error_log LIMIT 5\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500ip\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500host\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500file\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500protocol\u2500\u2510\n\u2502 2023-01-15 13:00:01 \u2502 3.5.9.2 \u2502 example.com \u2502 apple-touch-icon-120x120.png \u2502 HTTP/1.1 \u2502\n\u2502 2023-01-15 13:01:40 \u2502 3.7.2.5 \u2502 example.com \u2502 apple-touch-icon-120x120.png \u2502 HTTP/1.1 \u2502\n\u2502 2023-01-15 13:16:49 \u2502 9.2.9.2 \u2502 example.com \u2502 apple-touch-icon-120x120.png \u2502 HTTP/1.1 \u2502\n\u2502 2023-01-15 13:21:38 \u2502 8.8.5.3 \u2502 example.com \u2502 apple-touch-icon-120x120.png \u2502 HTTP/1.1 \u2502\n\u2502 2023-01-15 13:31:27 \u2502 9.5.8.4 \u2502 example.com \u2502 apple-touch-icon-120x120.png \u2502 HTTP/1.1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"By default, ClickHouse will raise an error in case of unmatched rows. If you want to skip unmatched rows instead, enable it using ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/settings-formats.md/#format_regexp_skip_unmatched"},"format_regexp_skip_unmatched")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET format_regexp_skip_unmatched = 1;\n")),(0,r.kt)("h2",{id:"other-formats"},"Other formats"),(0,r.kt)("p",null,"ClickHouse introduces support for many formats, both text, and binary, to cover various scenarios and platforms. Explore more formats and ways to work with them in the following articles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/csv-tsv"},"CSV and TSV formats")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/parquet-arrow-avro-orc"},"Parquet, Avro, Arrow and ORC")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/json"},"JSON formats")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Regex and templates")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/binary-native"},"Native and binary formats")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/sql"},"SQL formats"))),(0,r.kt)("p",null,"And also check ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/blog/extracting-converting-querying-local-files-with-sql-clickhouse-local"},"clickhouse-local")," - a portable full-featured tool to work on local/remote files without the need for Clickhouse server."))}u.isMDXComponent=!0},82607:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/error-0106c8ba4ef13b82c19942935b0bbfb6.log"},2636:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/html-d8814c6e44ab8251cbcdd933be21e432.results"},30270:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/html-271182f13aac17f7b67e964914bb2159.row"},888:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/output-5ab840955a0c4f8bfec1a6a06faf4ef7.results"},50385:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/output-68f8800ebbb9177338c7584faaaf20a2.rows"},80639:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/row-be2d6fe4aeee727e309436da64ba0bed.template"}}]);