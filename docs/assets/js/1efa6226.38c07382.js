"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[62277,26839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},68048:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={slug:"/en/cloud/bestpractices/avoid-mutations",sidebar_label:"Avoid Mutations",title:"Avoid Mutations"},i=void 0,s={unversionedId:"en/cloud/bestpractices/avoidmutations",id:"en/cloud/bestpractices/avoidmutations",title:"Avoid Mutations",description:"Mutations refers to ALTER queries that manipulate table data through deletion or updates. Most notably they are queries like ALTER TABLE \u2026 DELETE, UPDATE, etc. Performing such queries will produce new mutated versions of the data parts. This means that such statements would trigger a rewrite of whole data parts for all data that was inserted before the mutation, translating to a large amount of write requests.",source:"@site/docs/en/cloud/bestpractices/avoidmutations.md",sourceDirName:"en/cloud/bestpractices",slug:"/en/cloud/bestpractices/avoid-mutations",permalink:"/docs/en/cloud/bestpractices/avoid-mutations",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/cloud/bestpractices/avoidmutations.md",tags:[],version:"current",frontMatter:{slug:"/en/cloud/bestpractices/avoid-mutations",sidebar_label:"Avoid Mutations",title:"Avoid Mutations"},sidebar:"english",previous:{title:"Asynchronous Inserts",permalink:"/docs/en/cloud/bestpractices/asynchronous-inserts"},next:{title:"Avoid Nullable Columns",permalink:"/docs/en/cloud/bestpractices/avoid-nullable-columns"}},c={},l=[],u={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Mutations refers to ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/alter/"},"ALTER")," queries that manipulate table data through deletion or updates. Most notably they are queries like ALTER TABLE \u2026 DELETE, UPDATE, etc. Performing such queries will produce new mutated versions of the data parts. This means that such statements would trigger a rewrite of whole data parts for all data that was inserted before the mutation, translating to a large amount of write requests."),(0,o.kt)("p",null,"For updates, you can avoid these large amounts of write requests by using specialised table engines like ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/mergetree-family/replacingmergetree"},"ReplacingMergeTree")," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/mergetree-family/collapsingmergetree"},"CollapsingMergeTree")," instead of the default MergeTree table engine."))}p.isMDXComponent=!0},75899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=n(87462),o=(n(67294),n(3905)),a=n(68048);const i={slug:"/en/optimize/avoid-mutations",sidebar_label:"Avoid Mutations",title:"Avoid Mutations"},s=void 0,c={unversionedId:"en/guides/best-practices/avoidmutations",id:"en/guides/best-practices/avoidmutations",title:"Avoid Mutations",description:"",source:"@site/docs/en/guides/best-practices/avoidmutations.md",sourceDirName:"en/guides/best-practices",slug:"/en/optimize/avoid-mutations",permalink:"/docs/en/optimize/avoid-mutations",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/guides/best-practices/avoidmutations.md",tags:[],version:"current",frontMatter:{slug:"/en/optimize/avoid-mutations",sidebar_label:"Avoid Mutations",title:"Avoid Mutations"},sidebar:"english",previous:{title:"Asynchronous Inserts",permalink:"/docs/en/optimize/asynchronous-inserts"},next:{title:"Avoid Nullable Columns",permalink:"/docs/en/optimize/avoid-nullable-columns"}},l={},u=[],d={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(a.default,{mdxType:"Content"}))}m.isMDXComponent=!0}}]);