"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[8712],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>m});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),s=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},u=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),d=s(a),g=n,m=d["".concat(p,".").concat(g)]||d[g]||c[g]||l;return a?r.createElement(m,o(o({ref:e},u),{},{components:a})):r.createElement(m,o({ref:e},u))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,o=new Array(l);o[0]=g;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i[d]="string"==typeof t?t:n,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},96965:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=a(87462),n=(a(67294),a(3905));const l={slug:"/en/guides/developer/working-with-json/json-structured",sidebar_label:"Relying on Structure",sidebar_position:2,description:"Using a structured approach"},o="Structured Approach",i={unversionedId:"en/guides/developer/working-with-json/json-structured",id:"en/guides/developer/working-with-json/json-structured",title:"Structured Approach",description:"Using a structured approach",source:"@site/docs/en/guides/developer/working-with-json/json-structured.md",sourceDirName:"en/guides/developer/working-with-json",slug:"/en/guides/developer/working-with-json/json-structured",permalink:"/AlgoliaDocsSelfCrawl/en/guides/developer/working-with-json/json-structured",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/guides/developer/working-with-json/json-structured.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/en/guides/developer/working-with-json/json-structured",sidebar_label:"Relying on Structure",sidebar_position:2,description:"Using a structured approach"}},p={},s=[],u={toc:s},d="wrapper";function c(t){let{components:e,...a}=t;return(0,n.kt)(d,(0,r.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"structured-approach"},"Structured Approach"),(0,n.kt)("p",null,"First, we confirm we can read the JSON dataset and highlight the challenges of handling semi-structured data using more traditional types used in other databases. We don\u2019t rely on Schema inference to map the JSON fields to columns in the example below - instead, we specify a format of JSONEachRow and map the fields explicitly to columns in the s3 functions. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT type, `actor.display_login`, `repo.name`, created_at\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/github-2022-flat.ndjson.gz',\n        'JSONEachRow',\n        'type String, `actor.avatar_url` String, `actor.display_login` String, ' ||\n        '`actor.id` Float64, `actor.login` String, `actor.url` String, `repo.id` Float64, ' ||\n        '`repo.name` String, `repo.url` String, created_at String, `payload.pull_request.updated_at` String, ' ||\n        '`payload.action` String, `payload.ref` String, `payload.ref_type` String, ' ||\n        '`payload.pull_request.user.login` String, `payload.pull_request.number` Float64, ' ||\n        '`payload.pull_request.title` String, `payload.pull_request.state` String, ' ||\n        '`payload.pull_request.author_association` String, `payload.pull_request.head.ref` String, ' ||\n        '`payload.pull_request.head.sha` String, `payload.pull_request.base.ref` String, ' ||\n        '`payload.pull_request.base.sha` String, `payload.size` Float64, `payload.distinct_size` Float64')\nLIMIT 10;\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"actor.display","_","login"),(0,n.kt)("th",{parentName:"tr",align:"left"},"repo.name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"created","_","at"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PushEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Lakshmipatil2021"),(0,n.kt)("td",{parentName:"tr",align:"left"},"revacprogramming/pps-test1-Lakshmipatil2021"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"MemberEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"KStevenT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"KStevenT/HTML","_","ExternalWorkshop"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PushEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Soumojit28"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Soumojit28/Oxytocin"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PushEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"github-actions"),(0,n.kt)("td",{parentName:"tr",align:"left"},"diogoaraujo017/diogoaraujo017"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PushEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Aman-Sonwani"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Aman-Sonwani/crwn-clothing"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PushEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"huangshanyoumumingwutong"),(0,n.kt)("td",{parentName:"tr",align:"left"},"huangshanyoumumingwutong/picgo"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PullRequestEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"rfprod"),(0,n.kt)("td",{parentName:"tr",align:"left"},"rfprod/nx-ng-starter"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PushEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Helikopter-Bojowy"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Helikopter-Bojowy/Exp-na-helikopterze"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"IssueCommentEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"PRMerger-test-1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MicrosoftDocs/CSIDev-Public"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PushEvent"),(0,n.kt)("td",{parentName:"tr",align:"left"},"github-actions"),(0,n.kt)("td",{parentName:"tr",align:"left"},"pioug/yield-data"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2022-01-04T07:00:00Z")))),(0,n.kt)("p",null,"Note this dataset is a subset of the example used later, with no nested objects within the JSON itself - the fields have been flattened using a period separator. Although nested objects can be handled through an explicit mapping, it requires either the use of the new JSON object field or (for older ClickHouse versions) Tuples, Map and Nested structures (see ",(0,n.kt)("a",{parentName:"p",href:"./json-other-approaches"},"Other Approaches"),") further complicate usage. "),(0,n.kt)("p",null,"This approach requires mapping all fields and has obvious limitations when the JSON is potentially dynamic or unknown. We could use an INSERT INTO SELECT statement to persist the results into a local Merge Tree table. Defining such a table would require the user to know all fields and express the verbose definition below. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE table github_flat\n(\n   type                                      String,\n   `actor.avatar_url`                        String,\n   `actor.display_login`                     String,\n   `actor.id`                                Float64,\n   `actor.login`                             String,\n   `actor.url`                               String,\n   `repo.id`                                 Float64,\n   `repo.name`                               String,\n   `repo.url`                                String,\n   created_at                                String,\n   `payload.pull_request.updated_at`         String,\n   `payload.action`                          String,\n   `payload.ref`                             String,\n   `payload.ref_type`                        String,\n   `payload.pull_request.user.login`         String,\n   `payload.pull_request.number`             Float64,\n   `payload.pull_request.title`              String,\n   `payload.pull_request.state`              String,\n   `payload.pull_request.author_association` String,\n   `payload.pull_request.head.ref`           String,\n   `payload.pull_request.head.sha`           String,\n   `payload.pull_request.base.ref`           String,\n   `payload.pull_request.base.sha`           String,\n   `payload.size`                            Float64,\n   `payload.distinct_size`                   Float64\n) ENGINE = MergeTree ORDER BY (type, `repo.name`, created_at);\n\nINSERT INTO github_flat SELECT * FROM s3 ('https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/github-2022-flat.ndjson.gz', 'JSONEachRow');\n\nSELECT count() from github_flat;\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"count","(",")"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"1000000")))),(0,n.kt)("p",null,"Furthermore, if new properties are added to the JSON, the table would need to be updated, i.e., via ALTER TABLE. Naturally, this leads us to use ClickHouse\u2019s semi-structured features."))}c.isMDXComponent=!0}}]);