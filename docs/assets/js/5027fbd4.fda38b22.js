"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[9369,98131],{3905:(e,a,n)=>{n.d(a,{Zo:()=>o,kt:()=>c});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function m(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),l=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):m(m({},a),e)),n},o=function(e){var a=l(e.components);return t.createElement(i.Provider,{value:a},e.children)},u="mdxType",N={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,c=u["".concat(i,".").concat(d)]||u[d]||N[d]||s;return n?t.createElement(c,m(m({ref:a},o),{},{components:n})):t.createElement(c,m({ref:a},o))}));function c(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,m=new Array(s);m[0]=d;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p[u]="string"==typeof e?e:r,m[1]=p;for(var l=2;l<s;l++)m[l]=n[l];return t.createElement.apply(null,m)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32551:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>m,default:()=>N,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var t=n(87462),r=(n(67294),n(3905));const s={slug:"/en/sql-reference/window-functions/",sidebar_position:62,sidebar_label:"Window Functions",title:"Window Functions"},m=void 0,p={unversionedId:"en/sql-reference/window-functions/index",id:"en/sql-reference/window-functions/index",title:"Window Functions",description:"ClickHouse supports the standard grammar for defining windows and window functions. The following features are currently supported:",source:"@site/docs/en/sql-reference/window-functions/index.md",sourceDirName:"en/sql-reference/window-functions",slug:"/en/sql-reference/window-functions/",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/window-functions/",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/window-functions/index.md",tags:[],version:"current",sidebarPosition:62,frontMatter:{slug:"/en/sql-reference/window-functions/",sidebar_position:62,sidebar_label:"Window Functions",title:"Window Functions"},sidebar:"english",previous:{title:"Input and Output Formats",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/formats"},next:{title:"Engines",permalink:"/AlgoliaDocsSelfCrawl/en/engines"}},i={},l=[{value:"ClickHouse-specific Window Functions",id:"clickhouse-specific-window-functions",level:2},{value:"nonNegativeDerivative(metric_column, timestamp_column, INTERVAL X UNITS)",id:"nonnegativederivativemetric_column-timestamp_column-interval-x-units",level:3},{value:"References",id:"references",level:2},{value:"GitHub Issues",id:"github-issues",level:3},{value:"Tests",id:"tests",level:3},{value:"Postgres Docs",id:"postgres-docs",level:3},{value:"MySQL Docs",id:"mysql-docs",level:3},{value:"Syntax",id:"syntax",level:2},{value:"Functions",id:"functions",level:3},{value:"Examples",id:"examples",level:2},{value:"Real world examples",id:"real-world-examples",level:2},{value:"Maximum/total salary per department.",id:"maximumtotal-salary-per-department",level:3},{value:"Cumulative sum.",id:"cumulative-sum",level:3},{value:"Moving / Sliding Average (per 3 rows)",id:"moving--sliding-average-per-3-rows",level:3},{value:"Moving / Sliding Average (per 10 seconds)",id:"moving--sliding-average-per-10-seconds",level:3},{value:"Moving / Sliding Average (per 10 days)",id:"moving--sliding-average-per-10-days",level:3},{value:"Related Content",id:"related-content",level:2}],o={toc:l},u="wrapper";function N(e){let{components:a,...n}=e;return(0,r.kt)(u,(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"ClickHouse supports the standard grammar for defining windows and window functions. The following features are currently supported:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Support or workaround"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ad hoc window specification (",(0,r.kt)("inlineCode",{parentName:"td"},"count(*) over (partition by id order by time desc)"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expressions involving window functions, e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"(count(*) over ()) / 2)")),(0,r.kt)("td",{parentName:"tr",align:null},"supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WINDOW")," clause (",(0,r.kt)("inlineCode",{parentName:"td"},"select ... from table window w as (partition by id)"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ROWS")," frame"),(0,r.kt)("td",{parentName:"tr",align:null},"supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RANGE")," frame"),(0,r.kt)("td",{parentName:"tr",align:null},"supported, the default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"INTERVAL")," syntax for ",(0,r.kt)("inlineCode",{parentName:"td"},"DateTime")," ",(0,r.kt)("inlineCode",{parentName:"td"},"RANGE OFFSET")," frame"),(0,r.kt)("td",{parentName:"tr",align:null},"not supported, specify the number of seconds instead (",(0,r.kt)("inlineCode",{parentName:"td"},"RANGE")," works with any numeric type).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GROUPS")," frame"),(0,r.kt)("td",{parentName:"tr",align:null},"not supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Calculating aggregate functions over a frame (",(0,r.kt)("inlineCode",{parentName:"td"},"sum(value) over (order by time)"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"all aggregate functions are supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rank()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"dense_rank()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"row_number()")),(0,r.kt)("td",{parentName:"tr",align:null},"supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lag/lead(value, offset)")),(0,r.kt)("td",{parentName:"tr",align:null},"Not supported. Workarounds:")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"1) replace with ",(0,r.kt)("inlineCode",{parentName:"td"},"any(value) over (.... rows between <offset> preceding and <offset> preceding)"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"following")," for ",(0,r.kt)("inlineCode",{parentName:"td"},"lead"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2) use ",(0,r.kt)("inlineCode",{parentName:"td"},"lagInFrame/leadInFrame"),", which are analogous, but respect the window frame. To get behavior identical to ",(0,r.kt)("inlineCode",{parentName:"td"},"lag/lead"),", use ",(0,r.kt)("inlineCode",{parentName:"td"},"rows between unbounded preceding and unbounded following"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ntile(buckets)"),(0,r.kt)("td",{parentName:"tr",align:null},"Supported. Specify window like, (partition by x order by y rows between unbounded preceding and unounded following).")))),(0,r.kt)("h2",{id:"clickhouse-specific-window-functions"},"ClickHouse-specific Window Functions"),(0,r.kt)("h3",{id:"nonnegativederivativemetric_column-timestamp_column-interval-x-units"},"nonNegativeDerivative(metric_column, timestamp_column","[, INTERVAL X UNITS]",")"),(0,r.kt)("p",null,"Finds non-negative derivative for given ",(0,r.kt)("inlineCode",{parentName:"p"},"metric_column")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp_column"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"INTERVAL")," can be omitted, default is ",(0,r.kt)("inlineCode",{parentName:"p"},"INTERVAL 1 SECOND"),".\nThe computed value is the following for each row:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," for 1st row,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mfrac",{parentName:"mrow"},(0,r.kt)("mrow",{parentName:"mfrac"},(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"c"),(0,r.kt)("mi",{parentName:"msub"},"i")),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"c"),(0,r.kt)("mrow",{parentName:"msub"},(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1")))),(0,r.kt)("mrow",{parentName:"mfrac"},(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"p"),(0,r.kt)("mi",{parentName:"msub"},"i")),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"p"),(0,r.kt)("mrow",{parentName:"msub"},(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))))),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mi",{parentName:"mrow"},"v"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"l")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{metric_i - metric_{i-1} \\over timestamp_i - timestamp_{i-1}} * interval")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.4002em",verticalAlign:"-0.4868em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,r.kt)("span",{parentName:"span",className:"mfrac"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9134em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.655em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"im"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"es"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"am"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"p"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3281em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.143em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"im"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"es"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"am"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"p"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3281em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2025em"}},(0,r.kt)("span",{parentName:"span"}))))))))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.23em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,r.kt)("span",{parentName:"span",style:{top:"-3.4518em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3281em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.143em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3281em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2025em"}},(0,r.kt)("span",{parentName:"span"})))))))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4868em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"}))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"er"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l")))))," for ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"i"),(0,r.kt)("mi",{parentName:"msub"},"t")),(0,r.kt)("mi",{parentName:"mrow"},"h")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"i_th")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8444em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2806em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"h")))))," row.")),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("h3",{id:"github-issues"},"GitHub Issues"),(0,r.kt)("p",null,"The roadmap for the initial support of window functions is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/issues/18097"},"in this issue"),"."),(0,r.kt)("p",null,"All GitHub issues related to window funtions have the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/labels/comp-window-functions"},"comp-window-functions")," tag."),(0,r.kt)("h3",{id:"tests"},"Tests"),(0,r.kt)("p",null,"These tests contain the examples of the currently supported grammar:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/blob/master/tests/performance/window_functions.xml"},"https://github.com/ClickHouse/ClickHouse/blob/master/tests/performance/window_functions.xml")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/blob/master/tests/queries/0_stateless/01591_window_functions.sql"},"https://github.com/ClickHouse/ClickHouse/blob/master/tests/queries/0_stateless/01591_window_functions.sql")),(0,r.kt)("h3",{id:"postgres-docs"},"Postgres Docs"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-select.html#SQL-WINDOW"},"https://www.postgresql.org/docs/current/sql-select.html#SQL-WINDOW")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/devel/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS"},"https://www.postgresql.org/docs/devel/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/devel/functions-window.html"},"https://www.postgresql.org/docs/devel/functions-window.html")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/devel/tutorial-window.html"},"https://www.postgresql.org/docs/devel/tutorial-window.html")),(0,r.kt)("h3",{id:"mysql-docs"},"MySQL Docs"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html"},"https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html"},"https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/window-functions-frames.html"},"https://dev.mysql.com/doc/refman/8.0/en/window-functions-frames.html")),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"aggregate_function (column_name)\n  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column] \n        [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])\nFROM table_name\nWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PARTITION BY")," - defines how to break a resultset into groups."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ORDER BY")," - defines how to order rows inside the group during calculation aggregate_function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ROWS or RANGE")," - defines bounds of a frame, aggregate_function is calculated within a frame."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WINDOW")," - allows to reuse a window definition with multiple exressions.")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,"These functions can be used only as a window function."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"row_number()")," -\tNumber the current row within its partition starting from 1.\n",(0,r.kt)("inlineCode",{parentName:"p"},"first_value(x)")," -\tReturn the first non-NULL value evaluated within its ordered frame.\n",(0,r.kt)("inlineCode",{parentName:"p"},"last_value(x)")," -\tReturn the last non-NULL value evaluated within its ordered frame.\n",(0,r.kt)("inlineCode",{parentName:"p"},"nth_value(x, offset)")," - Return the first non-NULL value evaluated against the nth row (offset) in its ordered frame.\n",(0,r.kt)("inlineCode",{parentName:"p"},"rank()")," -\tRank the current row within its partition with gaps.\n",(0,r.kt)("inlineCode",{parentName:"p"},"dense_rank()"),"\t- Rank the current row within its partition without gaps.\n",(0,r.kt)("inlineCode",{parentName:"p"},"lagInFrame(x)")," - Return a value evaluated at the row that is at a specified physical offset row before the current row within the ordered frame.\n",(0,r.kt)("inlineCode",{parentName:"p"},"leadInFrame(x)")," - Return a value evaluated at the row that is offset rows after the current row within the ordered frame."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"      PARTITION\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  <-- UNBOUNDED PRECEDING (BEGINNING of the PARTITION)\n\u2502                 \u2502\n\u2502                 \u2502\n\u2502=================\u2502  <-- N PRECEDING  <\u2500\u2510\n\u2502      N ROWS     \u2502                     \u2502  F\n\u2502  Before CURRENT \u2502                     \u2502  R\n\u2502~~~~~~~~~~~~~~~~~\u2502  <-- CURRENT ROW    \u2502  A\n\u2502     M ROWS      \u2502                     \u2502  M\n\u2502   After CURRENT \u2502                     \u2502  E\n\u2502=================\u2502  <-- M FOLLOWING  <\u2500\u2518\n\u2502                 \u2502\n\u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  <--- UNBOUNDED FOLLOWING (END of the PARTITION)\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE wf_partition\n(\n    `part_key` UInt64,\n    `value` UInt64,\n    `order` UInt64    \n)\nENGINE = Memory;\n\nINSERT INTO wf_partition FORMAT Values\n   (1,1,1), (1,2,2), (1,3,3), (2,0,0), (3,0,0);\n\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key) AS frame_values\nFROM wf_partition\nORDER BY\n    part_key ASC,\n    value ASC;\n\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [1,2,3]      \u2502   <\u2510   \n\u2502        1 \u2502     2 \u2502     2 \u2502 [1,2,3]      \u2502    \u2502  1-st group\n\u2502        1 \u2502     3 \u2502     3 \u2502 [1,2,3]      \u2502   <\u2518 \n\u2502        2 \u2502     0 \u2502     0 \u2502 [0]          \u2502   <-  2-nd group\n\u2502        3 \u2502     0 \u2502     0 \u2502 [0]          \u2502   <-  3-d group\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE wf_frame\n(\n    `part_key` UInt64,\n    `value` UInt64,\n    `order` UInt64\n)\nENGINE = Memory;\n\nINSERT INTO wf_frame FORMAT Values\n   (1,1,1), (1,2,2), (1,3,3), (1,4,4), (1,5,5);\n\n-- frame is bounded by bounds of a partition (BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key ORDER BY order ASC\n         Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS frame_values\nFROM wf_frame\nORDER BY\n    part_key ASC,\n    value ASC;\n    \n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [1,2,3,4,5]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- short form - no bound expression, no order by\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key) AS frame_values\nFROM wf_frame\nORDER BY\n    part_key ASC,\n    value ASC;\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [1,2,3,4,5]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- frame is bounded by the beggining of a partition and the current row\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key ORDER BY order ASC\n          Rows BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS frame_values\nFROM wf_frame\nORDER BY\n    part_key ASC,\n    value ASC;\n\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [1]          \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [1,2]        \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [1,2,3]      \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [1,2,3,4]    \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [1,2,3,4,5]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- short form (frame is bounded by the beggining of a partition and the current row)\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key ORDER BY order ASC) AS frame_values\nFROM wf_frame\nORDER BY\n    part_key ASC,\n    value ASC;\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [1]          \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [1,2]        \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [1,2,3]      \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [1,2,3,4]    \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [1,2,3,4,5]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- frame is bounded by the beggining of a partition and the current row, but order is backward\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key ORDER BY order DESC) AS frame_values\nFROM wf_frame\nORDER BY\n    part_key ASC,\n    value ASC;\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [5,4,3,2,1]  \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [5,4,3,2]    \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [5,4,3]      \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [5,4]        \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [5]          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- sliding frame - 1 PRECEDING ROW AND CURRENT ROW\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key ORDER BY order ASC\n          Rows BETWEEN 1 PRECEDING AND CURRENT ROW) AS frame_values\nFROM wf_frame\nORDER BY\n    part_key ASC,\n    value ASC;\n\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [1]          \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [1,2]        \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [2,3]        \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [3,4]        \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [4,5]        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- sliding frame - Rows BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING \nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER (PARTITION BY part_key ORDER BY order ASC\n          Rows BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) AS frame_values\nFROM wf_frame\nORDER BY\n    part_key ASC,\n    value ASC;\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [1,2,3,4,5]  \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [2,3,4,5]    \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [3,4,5]      \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [4,5]        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- row_number does not respect the frame, so rn_1 = rn_2 = rn_3 != rn_4\nSELECT\n    part_key,\n    value,\n    order,\n    groupArray(value) OVER w1 AS frame_values,\n    row_number() OVER w1 AS rn_1,\n    sum(1) OVER w1 AS rn_2,\n    row_number() OVER w2 AS rn_3,\n    sum(1) OVER w2 AS rn_4\nFROM wf_frame\nWINDOW\n    w1 AS (PARTITION BY part_key ORDER BY order DESC),\n    w2 AS (PARTITION BY part_key ORDER BY order DESC \n                   Rows BETWEEN 1 PRECEDING AND CURRENT ROW)\nORDER BY\n    part_key ASC,\n    value ASC;\n\u250c\u2500part_key\u2500\u252c\u2500value\u2500\u252c\u2500order\u2500\u252c\u2500frame_values\u2500\u252c\u2500rn_1\u2500\u252c\u2500rn_2\u2500\u252c\u2500rn_3\u2500\u252c\u2500rn_4\u2500\u2510\n\u2502        1 \u2502     1 \u2502     1 \u2502 [5,4,3,2,1]  \u2502    5 \u2502    5 \u2502    5 \u2502    2 \u2502\n\u2502        1 \u2502     2 \u2502     2 \u2502 [5,4,3,2]    \u2502    4 \u2502    4 \u2502    4 \u2502    2 \u2502\n\u2502        1 \u2502     3 \u2502     3 \u2502 [5,4,3]      \u2502    3 \u2502    3 \u2502    3 \u2502    2 \u2502\n\u2502        1 \u2502     4 \u2502     4 \u2502 [5,4]        \u2502    2 \u2502    2 \u2502    2 \u2502    2 \u2502\n\u2502        1 \u2502     5 \u2502     5 \u2502 [5]          \u2502    1 \u2502    1 \u2502    1 \u2502    1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- first_value and last_value respect the frame\nSELECT\n    groupArray(value) OVER w1 AS frame_values_1,\n    first_value(value) OVER w1 AS first_value_1,\n    last_value(value) OVER w1 AS last_value_1,\n    groupArray(value) OVER w2 AS frame_values_2,\n    first_value(value) OVER w2 AS first_value_2,\n    last_value(value) OVER w2 AS last_value_2\nFROM wf_frame\nWINDOW\n    w1 AS (PARTITION BY part_key ORDER BY order ASC),\n    w2 AS (PARTITION BY part_key ORDER BY order ASC Rows BETWEEN 1 PRECEDING AND CURRENT ROW)\nORDER BY\n    part_key ASC,\n    value ASC;\n\u250c\u2500frame_values_1\u2500\u252c\u2500first_value_1\u2500\u252c\u2500last_value_1\u2500\u252c\u2500frame_values_2\u2500\u252c\u2500first_value_2\u2500\u252c\u2500last_value_2\u2500\u2510\n\u2502 [1]            \u2502             1 \u2502            1 \u2502 [1]            \u2502             1 \u2502            1 \u2502\n\u2502 [1,2]          \u2502             1 \u2502            2 \u2502 [1,2]          \u2502             1 \u2502            2 \u2502\n\u2502 [1,2,3]        \u2502             1 \u2502            3 \u2502 [2,3]          \u2502             2 \u2502            3 \u2502\n\u2502 [1,2,3,4]      \u2502             1 \u2502            4 \u2502 [3,4]          \u2502             3 \u2502            4 \u2502\n\u2502 [1,2,3,4,5]    \u2502             1 \u2502            5 \u2502 [4,5]          \u2502             4 \u2502            5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- second value within the frame\nSELECT\n    groupArray(value) OVER w1 AS frame_values_1,\n    nth_value(value, 2) OVER w1 AS second_value\nFROM wf_frame\nWINDOW w1 AS (PARTITION BY part_key ORDER BY order ASC Rows BETWEEN 3 PRECEDING AND CURRENT ROW)\nORDER BY\n    part_key ASC,\n    value ASC\n\u250c\u2500frame_values_1\u2500\u252c\u2500second_value\u2500\u2510\n\u2502 [1]            \u2502            0 \u2502\n\u2502 [1,2]          \u2502            2 \u2502\n\u2502 [1,2,3]        \u2502            2 \u2502\n\u2502 [1,2,3,4]      \u2502            2 \u2502\n\u2502 [2,3,4,5]      \u2502            3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- second value within the frame + Null for missing values\nSELECT\n    groupArray(value) OVER w1 AS frame_values_1,\n    nth_value(toNullable(value), 2) OVER w1 AS second_value\nFROM wf_frame\nWINDOW w1 AS (PARTITION BY part_key ORDER BY order ASC Rows BETWEEN 3 PRECEDING AND CURRENT ROW)\nORDER BY\n    part_key ASC,\n    value ASC\n\u250c\u2500frame_values_1\u2500\u252c\u2500second_value\u2500\u2510\n\u2502 [1]            \u2502         \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2502 [1,2]          \u2502            2 \u2502\n\u2502 [1,2,3]        \u2502            2 \u2502\n\u2502 [1,2,3,4]      \u2502            2 \u2502\n\u2502 [2,3,4,5]      \u2502            3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"real-world-examples"},"Real world examples"),(0,r.kt)("h3",{id:"maximumtotal-salary-per-department"},"Maximum/total salary per department."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE employees\n(\n    `department` String,\n    `employee_name` String,\n    `salary` Float\n)\nENGINE = Memory;\n\nINSERT INTO employees FORMAT Values\n   ('Finance', 'Jonh', 200),\n   ('Finance', 'Joan', 210),\n   ('Finance', 'Jean', 505),\n   ('IT', 'Tim', 200),\n   ('IT', 'Anna', 300),\n   ('IT', 'Elen', 500);\n\nSELECT\n    department,\n    employee_name AS emp,\n    salary,\n    max_salary_per_dep,\n    total_salary_per_dep,\n    round((salary / total_salary_per_dep) * 100, 2) AS `share_per_dep(%)`\nFROM\n(\n    SELECT\n        department,\n        employee_name,\n        salary,\n        max(salary) OVER wndw AS max_salary_per_dep,\n        sum(salary) OVER wndw AS total_salary_per_dep\n    FROM employees\n    WINDOW wndw AS (PARTITION BY department\n          rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n    ORDER BY\n        department ASC,\n        employee_name ASC\n);\n\n\u250c\u2500department\u2500\u252c\u2500emp\u2500\u2500\u252c\u2500salary\u2500\u252c\u2500max_salary_per_dep\u2500\u252c\u2500total_salary_per_dep\u2500\u252c\u2500share_per_dep(%)\u2500\u2510\n\u2502 Finance    \u2502 Jean \u2502    505 \u2502                505 \u2502                  915 \u2502            55.19 \u2502\n\u2502 Finance    \u2502 Joan \u2502    210 \u2502                505 \u2502                  915 \u2502            22.95 \u2502\n\u2502 Finance    \u2502 Jonh \u2502    200 \u2502                505 \u2502                  915 \u2502            21.86 \u2502\n\u2502 IT         \u2502 Anna \u2502    300 \u2502                500 \u2502                 1000 \u2502               30 \u2502\n\u2502 IT         \u2502 Elen \u2502    500 \u2502                500 \u2502                 1000 \u2502               50 \u2502\n\u2502 IT         \u2502 Tim  \u2502    200 \u2502                500 \u2502                 1000 \u2502               20 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"cumulative-sum"},"Cumulative sum."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE warehouse\n(\n    `item` String,\n    `ts` DateTime,\n    `value` Float\n)\nENGINE = Memory\n\nINSERT INTO warehouse VALUES\n    ('sku38', '2020-01-01', 9),\n    ('sku38', '2020-02-01', 1),\n    ('sku38', '2020-03-01', -4),\n    ('sku1', '2020-01-01', 1),\n    ('sku1', '2020-02-01', 1),\n    ('sku1', '2020-03-01', 1);\n\nSELECT\n    item,\n    ts,\n    value,\n    sum(value) OVER (PARTITION BY item ORDER BY ts ASC) AS stock_balance\nFROM warehouse\nORDER BY\n    item ASC,\n    ts ASC;\n\n\u250c\u2500item\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ts\u2500\u252c\u2500value\u2500\u252c\u2500stock_balance\u2500\u2510\n\u2502 sku1  \u2502 2020-01-01 00:00:00 \u2502     1 \u2502             1 \u2502\n\u2502 sku1  \u2502 2020-02-01 00:00:00 \u2502     1 \u2502             2 \u2502\n\u2502 sku1  \u2502 2020-03-01 00:00:00 \u2502     1 \u2502             3 \u2502\n\u2502 sku38 \u2502 2020-01-01 00:00:00 \u2502     9 \u2502             9 \u2502\n\u2502 sku38 \u2502 2020-02-01 00:00:00 \u2502     1 \u2502            10 \u2502\n\u2502 sku38 \u2502 2020-03-01 00:00:00 \u2502    -4 \u2502             6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"moving--sliding-average-per-3-rows"},"Moving / Sliding Average (per 3 rows)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE sensors\n(\n    `metric` String,\n    `ts` DateTime,\n    `value` Float\n)\nENGINE = Memory;\n\ninsert into sensors values('cpu_temp', '2020-01-01 00:00:00', 87),\n                          ('cpu_temp', '2020-01-01 00:00:01', 77),\n                          ('cpu_temp', '2020-01-01 00:00:02', 93),\n                          ('cpu_temp', '2020-01-01 00:00:03', 87),\n                          ('cpu_temp', '2020-01-01 00:00:04', 87),\n                          ('cpu_temp', '2020-01-01 00:00:05', 87),\n                          ('cpu_temp', '2020-01-01 00:00:06', 87),\n                          ('cpu_temp', '2020-01-01 00:00:07', 87);\nSELECT\n    metric,\n    ts,\n    value,\n    avg(value) OVER\n       (PARTITION BY metric ORDER BY ts ASC Rows BETWEEN 2 PRECEDING AND CURRENT ROW)\n         AS moving_avg_temp\nFROM sensors\nORDER BY\n    metric ASC,\n    ts ASC;\n\n\u250c\u2500metric\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ts\u2500\u252c\u2500value\u2500\u252c\u2500\u2500\u2500moving_avg_temp\u2500\u2510\n\u2502 cpu_temp \u2502 2020-01-01 00:00:00 \u2502    87 \u2502                87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:00:01 \u2502    77 \u2502                82 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:00:02 \u2502    93 \u2502 85.66666666666667 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:00:03 \u2502    87 \u2502 85.66666666666667 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:00:04 \u2502    87 \u2502                89 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:00:05 \u2502    87 \u2502                87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:00:06 \u2502    87 \u2502                87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:00:07 \u2502    87 \u2502                87 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"moving--sliding-average-per-10-seconds"},"Moving / Sliding Average (per 10 seconds)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    metric,\n    ts,\n    value,\n    avg(value) OVER (PARTITION BY metric ORDER BY ts\n      Range BETWEEN 10 PRECEDING AND CURRENT ROW) AS moving_avg_10_seconds_temp\nFROM sensors\nORDER BY\n    metric ASC,\n    ts ASC;\n    \n\u250c\u2500metric\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ts\u2500\u252c\u2500value\u2500\u252c\u2500moving_avg_10_seconds_temp\u2500\u2510\n\u2502 cpu_temp \u2502 2020-01-01 00:00:00 \u2502    87 \u2502                         87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:01:10 \u2502    77 \u2502                         77 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:02:20 \u2502    93 \u2502                         93 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:03:30 \u2502    87 \u2502                         87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:04:40 \u2502    87 \u2502                         87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:05:50 \u2502    87 \u2502                         87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:06:00 \u2502    87 \u2502                         87 \u2502\n\u2502 cpu_temp \u2502 2020-01-01 00:07:10 \u2502    87 \u2502                         87 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"moving--sliding-average-per-10-days"},"Moving / Sliding Average (per 10 days)"),(0,r.kt)("p",null,"Temperature is stored with second precision, but using ",(0,r.kt)("inlineCode",{parentName:"p"},"Range")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY toDate(ts)")," we form a frame with the size of 10 units, and because of ",(0,r.kt)("inlineCode",{parentName:"p"},"toDate(ts)")," the unit is a day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE sensors\n(\n    `metric` String,\n    `ts` DateTime,\n    `value` Float\n)\nENGINE = Memory;\n\ninsert into sensors values('ambient_temp', '2020-01-01 00:00:00', 16),\n                          ('ambient_temp', '2020-01-01 12:00:00', 16),\n                          ('ambient_temp', '2020-01-02 11:00:00', 9),\n                          ('ambient_temp', '2020-01-02 12:00:00', 9),                          \n                          ('ambient_temp', '2020-02-01 10:00:00', 10),\n                          ('ambient_temp', '2020-02-01 12:00:00', 10),\n                          ('ambient_temp', '2020-02-10 12:00:00', 12),                          \n                          ('ambient_temp', '2020-02-10 13:00:00', 12),\n                          ('ambient_temp', '2020-02-20 12:00:01', 16),\n                          ('ambient_temp', '2020-03-01 12:00:00', 16),\n                          ('ambient_temp', '2020-03-01 12:00:00', 16),\n                          ('ambient_temp', '2020-03-01 12:00:00', 16);\n\nSELECT\n    metric,\n    ts,\n    value,\n    round(avg(value) OVER (PARTITION BY metric ORDER BY toDate(ts) \n       Range BETWEEN 10 PRECEDING AND CURRENT ROW),2) AS moving_avg_10_days_temp\nFROM sensors\nORDER BY\n    metric ASC,\n    ts ASC;\n\n\u250c\u2500metric\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ts\u2500\u252c\u2500value\u2500\u252c\u2500moving_avg_10_days_temp\u2500\u2510\n\u2502 ambient_temp \u2502 2020-01-01 00:00:00 \u2502    16 \u2502                      16 \u2502\n\u2502 ambient_temp \u2502 2020-01-01 12:00:00 \u2502    16 \u2502                      16 \u2502\n\u2502 ambient_temp \u2502 2020-01-02 11:00:00 \u2502     9 \u2502                    12.5 \u2502\n\u2502 ambient_temp \u2502 2020-01-02 12:00:00 \u2502     9 \u2502                    12.5 \u2502\n\u2502 ambient_temp \u2502 2020-02-01 10:00:00 \u2502    10 \u2502                      10 \u2502\n\u2502 ambient_temp \u2502 2020-02-01 12:00:00 \u2502    10 \u2502                      10 \u2502\n\u2502 ambient_temp \u2502 2020-02-10 12:00:00 \u2502    12 \u2502                      11 \u2502\n\u2502 ambient_temp \u2502 2020-02-10 13:00:00 \u2502    12 \u2502                      11 \u2502\n\u2502 ambient_temp \u2502 2020-02-20 12:00:01 \u2502    16 \u2502                   13.33 \u2502\n\u2502 ambient_temp \u2502 2020-03-01 12:00:00 \u2502    16 \u2502                      16 \u2502\n\u2502 ambient_temp \u2502 2020-03-01 12:00:00 \u2502    16 \u2502                      16 \u2502\n\u2502 ambient_temp \u2502 2020-03-01 12:00:00 \u2502    16 \u2502                      16 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"related-content"},"Related Content"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Blog: ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/blog/working-with-time-series-data-and-functions-ClickHouse"},"Working with time series data in ClickHouse")),(0,r.kt)("li",{parentName:"ul"},"Blog: ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/blog/clickhouse-window-array-functions-git-commits"},"Window and array functions for Git commit sequences")),(0,r.kt)("li",{parentName:"ul"},"Blog: ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/blog/getting-data-into-clickhouse-part-3-s3"},"Getting Data Into ClickHouse - Part 3 - Using S3"))))}N.isMDXComponent=!0},96961:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>m,metadata:()=>i,toc:()=>o});var t=n(87462),r=(n(67294),n(3905)),s=n(32551);const m={slug:"/ru/sql-reference/window-functions/",sidebar_position:62,sidebar_label:"Window Functions",title:"Window Functions"},p=void 0,i={unversionedId:"ru/sql-reference/window-functions/index",id:"ru/sql-reference/window-functions/index",title:"Window Functions",description:"",source:"@site/docs/ru/sql-reference/window-functions/index.mdx",sourceDirName:"ru/sql-reference/window-functions",slug:"/ru/sql-reference/window-functions/",permalink:"/AlgoliaDocsSelfCrawl/ru/sql-reference/window-functions/",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/ru/sql-reference/window-functions/index.mdx",tags:[],version:"current",sidebarPosition:62,frontMatter:{slug:"/ru/sql-reference/window-functions/",sidebar_position:62,sidebar_label:"Window Functions",title:"Window Functions"},sidebar:"russia",previous:{title:"ANSI Compatibility",permalink:"/AlgoliaDocsSelfCrawl/ru/sql-reference/ansi"},next:{title:"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0430",permalink:"/AlgoliaDocsSelfCrawl/ru/guides/"}},l={},o=[],u={toc:o},N="wrapper";function d(e){let{components:a,...n}=e;return(0,r.kt)(N,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)(s.default,{mdxType:"Content"}))}d.isMDXComponent=!0}}]);