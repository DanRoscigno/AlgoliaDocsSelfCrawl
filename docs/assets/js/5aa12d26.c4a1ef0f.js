"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[7536],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},11651:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={toc:[]},i="wrapper";function l(e){let{components:t,...l}=e;return(0,o.kt)(i,(0,a.Z)({},r,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"SQL console",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you need a SQL client connection, your ClickHouse Cloud service has an associated web based SQL console; expand ",(0,o.kt)("strong",{parentName:"p"},"Connect to SQL console")," below for details.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Connect to SQL console"),(0,o.kt)("p",null,"From your ClickHouse Cloud services list, choose the service that you will work with and click ",(0,o.kt)("strong",{parentName:"p"},"Connect"),".  From here you can ",(0,o.kt)("strong",{parentName:"p"},"Open SQL console"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Connect to SQL Console",src:n(60343).Z,width:"632",height:"387"}))))}l.isMDXComponent=!0},28919:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),r=n(11651);const i={slug:"/en/tutorial",sidebar_label:"ClickHouse Tutorial",sidebar_position:.5,keywords:["clickhouse","install","tutorial","dictionary","dictionaries"]},l="ClickHouse Tutorial",p={unversionedId:"en/tutorial",id:"en/tutorial",title:"ClickHouse Tutorial",description:"What to Expect from This Tutorial?",source:"@site/docs/en/tutorial.md",sourceDirName:"en",slug:"/en/tutorial",permalink:"/AlgoliaDocsSelfCrawl/en/tutorial",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/tutorial.md",tags:[],version:"current",sidebarPosition:.5,frontMatter:{slug:"/en/tutorial",sidebar_label:"ClickHouse Tutorial",sidebar_position:.5,keywords:["clickhouse","install","tutorial","dictionary","dictionaries"]},sidebar:"english",previous:{title:"Quick Start",permalink:"/AlgoliaDocsSelfCrawl/en/getting-started/quick-start"},next:{title:"UK Property Price Paid",permalink:"/AlgoliaDocsSelfCrawl/en/getting-started/example-datasets/uk-price-paid"}},s={},c=[{value:"What to Expect from This Tutorial?",id:"what-to-expect-from-this-tutorial",level:2},{value:"1. Create a New Table",id:"1-create-a-new-table",level:2},{value:"2. Insert the Dataset",id:"2-insert-the-dataset",level:2},{value:"3. Analyze the Data",id:"3-analyze-the-data",level:2},{value:"4. Create a Dictionary",id:"4-create-a-dictionary",level:2},{value:"5. Perform a Join",id:"5-perform-a-join",level:2},{value:"Congrats!",id:"congrats",level:4}],u={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"clickhouse-tutorial"},"ClickHouse Tutorial"),(0,o.kt)("h2",{id:"what-to-expect-from-this-tutorial"},"What to Expect from This Tutorial?"),(0,o.kt)("p",null,"In this tutorial, you will create a table and insert a large dataset (two million rows of the ",(0,o.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/getting-started/example-datasets/nyc-taxi"},"New York taxi data"),"). Then you will run queries on the dataset, including an example of how to create a dictionary and use it to perform a JOIN."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This tutorial assumes you have access to a running ClickHouse service.  If not, check out the ",(0,o.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/getting-started/quick-start"},"Quick Start"),".")),(0,o.kt)("h2",{id:"1-create-a-new-table"},"1. Create a New Table"),(0,o.kt)("p",null,"The New York City taxi data contains the details of millions of taxi rides, with columns like pickup and drop-off times and locations, cost, tip amount, tolls, payment type and so on. Let's create a table to store this data..."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Connect to the SQL console"),(0,o.kt)(r.ZP,{mdxType:"SQLConsoleDetail"}),(0,o.kt)("p",{parentName:"li"},"If you are using self-managed ClickHouse you can connect to the SQL console at https://",(0,o.kt)("em",{parentName:"p"},"hostname"),":8443/play (check with your ClickHouse administrator for the details).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the following ",(0,o.kt)("inlineCode",{parentName:"p"},"trips")," table in the ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," database:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE trips\n(\n    `trip_id` UInt32,\n    `vendor_id` Enum8('1' = 1, '2' = 2, '3' = 3, '4' = 4, 'CMT' = 5, 'VTS' = 6, 'DDS' = 7, 'B02512' = 10, 'B02598' = 11, 'B02617' = 12, 'B02682' = 13, 'B02764' = 14, '' = 15),\n    `pickup_date` Date,\n    `pickup_datetime` DateTime,\n    `dropoff_date` Date,\n    `dropoff_datetime` DateTime,\n    `store_and_fwd_flag` UInt8,\n    `rate_code_id` UInt8,\n    `pickup_longitude` Float64,\n    `pickup_latitude` Float64,\n    `dropoff_longitude` Float64,\n    `dropoff_latitude` Float64,\n    `passenger_count` UInt8,\n    `trip_distance` Float64,\n    `fare_amount` Float32,\n    `extra` Float32,\n    `mta_tax` Float32,\n    `tip_amount` Float32,\n    `tolls_amount` Float32,\n    `ehail_fee` Float32,\n    `improvement_surcharge` Float32,\n    `total_amount` Float32,\n    `payment_type` Enum8('UNK' = 0, 'CSH' = 1, 'CRE' = 2, 'NOC' = 3, 'DIS' = 4),\n    `trip_type` UInt8,\n    `pickup` FixedString(25),\n    `dropoff` FixedString(25),\n    `cab_type` Enum8('yellow' = 1, 'green' = 2, 'uber' = 3),\n    `pickup_nyct2010_gid` Int8,\n    `pickup_ctlabel` Float32,\n    `pickup_borocode` Int8,\n    `pickup_ct2010` String,\n    `pickup_boroct2010` String,\n    `pickup_cdeligibil` String,\n    `pickup_ntacode` FixedString(4),\n    `pickup_ntaname` String,\n    `pickup_puma` UInt16,\n    `dropoff_nyct2010_gid` UInt8,\n    `dropoff_ctlabel` Float32,\n    `dropoff_borocode` UInt8,\n    `dropoff_ct2010` String,\n    `dropoff_boroct2010` String,\n    `dropoff_cdeligibil` String,\n    `dropoff_ntacode` FixedString(4),\n    `dropoff_ntaname` String,\n    `dropoff_puma` UInt16\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMM(pickup_date)\nORDER BY pickup_datetime;\n")))),(0,o.kt)("h2",{id:"2-insert-the-dataset"},"2. Insert the Dataset"),(0,o.kt)("p",null,"Now that you have a table created, let's add the NYC taxi data. It is in CSV files in S3, and you can load the data from there."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The following command inserts ~2,000,000 rows into your ",(0,o.kt)("inlineCode",{parentName:"p"},"trips")," table from two different files in S3: ",(0,o.kt)("inlineCode",{parentName:"p"},"trips_1.tsv.gz")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"trips_2.tsv.gz"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO trips\nSELECT * FROM s3(\n    'https://datasets-documentation.s3.eu-west-3.amazonaws.com/nyc-taxi/trips_{1..2}.gz',\n    'TabSeparatedWithNames', \"\n    `trip_id` UInt32,\n    `vendor_id` Enum8('1' = 1, '2' = 2, '3' = 3, '4' = 4, 'CMT' = 5, 'VTS' = 6, 'DDS' = 7, 'B02512' = 10, 'B02598' = 11, 'B02617' = 12, 'B02682' = 13, 'B02764' = 14, '' = 15),\n    `pickup_date` Date,\n    `pickup_datetime` DateTime,\n    `dropoff_date` Date,\n    `dropoff_datetime` DateTime,\n    `store_and_fwd_flag` UInt8,\n    `rate_code_id` UInt8,\n    `pickup_longitude` Float64,\n    `pickup_latitude` Float64,\n    `dropoff_longitude` Float64,\n    `dropoff_latitude` Float64,\n    `passenger_count` UInt8,\n    `trip_distance` Float64,\n    `fare_amount` Float32,\n    `extra` Float32,\n    `mta_tax` Float32,\n    `tip_amount` Float32,\n    `tolls_amount` Float32,\n    `ehail_fee` Float32,\n    `improvement_surcharge` Float32,\n    `total_amount` Float32,\n    `payment_type` Enum8('UNK' = 0, 'CSH' = 1, 'CRE' = 2, 'NOC' = 3, 'DIS' = 4),\n    `trip_type` UInt8,\n    `pickup` FixedString(25),\n    `dropoff` FixedString(25),\n    `cab_type` Enum8('yellow' = 1, 'green' = 2, 'uber' = 3),\n    `pickup_nyct2010_gid` Int8,\n    `pickup_ctlabel` Float32,\n    `pickup_borocode` Int8,\n    `pickup_ct2010` String,\n    `pickup_boroct2010` String,\n    `pickup_cdeligibil` String,\n    `pickup_ntacode` FixedString(4),\n    `pickup_ntaname` String,\n    `pickup_puma` UInt16,\n    `dropoff_nyct2010_gid` UInt8,\n    `dropoff_ctlabel` Float32,\n    `dropoff_borocode` UInt8,\n    `dropoff_ct2010` String,\n    `dropoff_boroct2010` String,\n    `dropoff_cdeligibil` String,\n    `dropoff_ntacode` FixedString(4),\n    `dropoff_ntaname` String,\n    `dropoff_puma` UInt16\n\") SETTINGS input_format_try_infer_datetimes = 0\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Wait for the ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT")," to finish - it might take a moment for the 150\xa0MB of data to be downloaded."),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"s3")," function cleverly knows how to decompress the data, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"TabSeparatedWithNames")," format tells ClickHouse that the data is tab-separated and also to skip the header row of each file."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When the insert is finished, verify it worked:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count() FROM trips\n")),(0,o.kt)("p",{parentName:"li"},"You should see about 2M rows (1,999,657 rows, to be precise)."),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Notice how quickly and how few rows ClickHouse had to process to determine the count? You can get back the count in 0.001 seconds with only 6 rows processed. (6 just happens to be the number of ",(0,o.kt)("strong",{parentName:"p"},"parts")," that the ",(0,o.kt)("inlineCode",{parentName:"p"},"trips")," table currently has, and parts know how many rows they have.)"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If you run a query that needs to hit every row, you will notice considerably more rows need to be processed, but the run time is still blazing fast:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT(pickup_ntaname) FROM trips\n")),(0,o.kt)("p",{parentName:"li"},"This query has to process 2M rows and return 190 values, but notice it does this in about 1 second. The ",(0,o.kt)("inlineCode",{parentName:"p"},"pickup_ntaname")," column represents the name of the neighborhood in New York City where the taxi ride originated."))),(0,o.kt)("h2",{id:"3-analyze-the-data"},"3. Analyze the Data"),(0,o.kt)("p",null,"Let's run some queries to analyze the 2M rows of data..."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We will start with some simple calculations, like computing the average tip amount:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT round(avg(tip_amount), 2) FROM trips\n")),(0,o.kt)("p",{parentName:"li"},"The response is:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500round(avg(tip_amount), 2)\u2500\u2510\n\u2502                      1.68 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"This query computes the average cost based on the number of passengers:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    passenger_count,\n    ceil(avg(total_amount),2) AS average_total_amount\nFROM trips\nGROUP BY passenger_count\n")),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"passenger_count")," ranges from 0 to 9:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500passenger_count\u2500\u252c\u2500average_total_amount\u2500\u2510\n\u2502               0 \u2502                22.69 \u2502\n\u2502               1 \u2502                15.97 \u2502\n\u2502               2 \u2502                17.15 \u2502\n\u2502               3 \u2502                16.76 \u2502\n\u2502               4 \u2502                17.33 \u2502\n\u2502               5 \u2502                16.35 \u2502\n\u2502               6 \u2502                16.04 \u2502\n\u2502               7 \u2502                 59.8 \u2502\n\u2502               8 \u2502                36.41 \u2502\n\u2502               9 \u2502                 9.81 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Here is a query that calculates the daily number of pickups per neighborhood:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    pickup_date,\n    pickup_ntaname,\n    SUM(1) AS number_of_trips\nFROM trips\nGROUP BY pickup_date, pickup_ntaname\nORDER BY pickup_date ASC\n")),(0,o.kt)("p",{parentName:"li"},"The result looks like:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500pickup_date\u2500\u252c\u2500pickup_ntaname\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500number_of_trips\u2500\u2510\n\u2502  2015-07-01 \u2502 Brooklyn Heights-Cobble Hill                             \u2502              13 \u2502\n\u2502  2015-07-01 \u2502 Old Astoria                                              \u2502               5 \u2502\n\u2502  2015-07-01 \u2502 Flushing                                                 \u2502               1 \u2502\n\u2502  2015-07-01 \u2502 Yorkville                                                \u2502             378 \u2502\n\u2502  2015-07-01 \u2502 Gramercy                                                 \u2502             344 \u2502\n\u2502  2015-07-01 \u2502 Fordham South                                            \u2502               2 \u2502\n\u2502  2015-07-01 \u2502 SoHo-TriBeCa-Civic Center-Little Italy                   \u2502             621 \u2502\n\u2502  2015-07-01 \u2502 Park Slope-Gowanus                                       \u2502              29 \u2502\n\u2502  2015-07-01 \u2502 Bushwick South                                           \u2502               5 \u2502\n")))),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"This query computes the length of the trip and groups the results by that value:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    avg(tip_amount) AS avg_tip,\n    avg(fare_amount) AS avg_fare,\n    avg(passenger_count) AS avg_passenger,\n    count() AS count,\n    truncate(date_diff('second', pickup_datetime, dropoff_datetime)/60) as trip_minutes\nFROM trips\nWHERE trip_minutes > 0\nGROUP BY trip_minutes\nORDER BY trip_minutes DESC\n")),(0,o.kt)("p",{parentName:"li"},"The result looks like:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500avg_tip\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500avg_fare\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500avg_passenger\u2500\u252c\u2500\u2500count\u2500\u252c\u2500trip_minutes\u2500\u2510\n\u2502   1.9600000381469727 \u2502                  8 \u2502                  1 \u2502      1 \u2502        27511 \u2502\n\u2502                    0 \u2502                 12 \u2502                  2 \u2502      1 \u2502        27500 \u2502\n\u2502    0.542166673981895 \u2502 19.716666666666665 \u2502 1.9166666666666667 \u2502     60 \u2502         1439 \u2502\n\u2502    0.902499997522682 \u2502 11.270625001192093 \u2502            1.95625 \u2502    160 \u2502         1438 \u2502\n\u2502   0.9715789457909146 \u2502 13.646616541353383 \u2502 2.0526315789473686 \u2502    133 \u2502         1437 \u2502\n\u2502   0.9682692398245518 \u2502 14.134615384615385 \u2502  2.076923076923077 \u2502    104 \u2502         1436 \u2502\n\u2502   1.1022105210705808 \u2502 13.778947368421052 \u2502  2.042105263157895 \u2502     95 \u2502         1435 \u2502\n")))),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"This query shows the number of pickups in each neighborhood, broken down by hour of the day:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    pickup_ntaname,\n    toHour(pickup_datetime) as pickup_hour,\n    SUM(1) AS pickups\nFROM trips\nWHERE pickup_ntaname != ''\nGROUP BY pickup_ntaname, pickup_hour\nORDER BY pickup_ntaname, pickup_hour\n")),(0,o.kt)("p",{parentName:"li"},"The result looks like:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500pickup_ntaname\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500pickup_hour\u2500\u252c\u2500pickups\u2500\u2510\n\u2502 Airport                                                  \u2502           0 \u2502    3509 \u2502\n\u2502 Airport                                                  \u2502           1 \u2502    1184 \u2502\n\u2502 Airport                                                  \u2502           2 \u2502     401 \u2502\n\u2502 Airport                                                  \u2502           3 \u2502     152 \u2502\n\u2502 Airport                                                  \u2502           4 \u2502     213 \u2502\n\u2502 Airport                                                  \u2502           5 \u2502     955 \u2502\n\u2502 Airport                                                  \u2502           6 \u2502    2161 \u2502\n\u2502 Airport                                                  \u2502           7 \u2502    3013 \u2502\n\u2502 Airport                                                  \u2502           8 \u2502    3601 \u2502\n\u2502 Airport                                                  \u2502           9 \u2502    3792 \u2502\n\u2502 Airport                                                  \u2502          10 \u2502    4546 \u2502\n\u2502 Airport                                                  \u2502          11 \u2502    4659 \u2502\n\u2502 Airport                                                  \u2502          12 \u2502    4621 \u2502\n\u2502 Airport                                                  \u2502          13 \u2502    5348 \u2502\n\u2502 Airport                                                  \u2502          14 \u2502    5889 \u2502\n\u2502 Airport                                                  \u2502          15 \u2502    6505 \u2502\n\u2502 Airport                                                  \u2502          16 \u2502    6119 \u2502\n\u2502 Airport                                                  \u2502          17 \u2502    6341 \u2502\n\u2502 Airport                                                  \u2502          18 \u2502    6173 \u2502\n\u2502 Airport                                                  \u2502          19 \u2502    6329 \u2502\n\u2502 Airport                                                  \u2502          20 \u2502    6271 \u2502\n\u2502 Airport                                                  \u2502          21 \u2502    6649 \u2502\n\u2502 Airport                                                  \u2502          22 \u2502    6356 \u2502\n\u2502 Airport                                                  \u2502          23 \u2502    6016 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           4 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           6 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           7 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           9 \u2502       5 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          10 \u2502       3 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          15 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          20 \u2502       2 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          23 \u2502       1 \u2502\n\u2502 Annadale-Huguenot-Prince's Bay-Eltingville               \u2502          23 \u2502       1 \u2502\n\u2502 Arden Heights                                            \u2502          11 \u2502       1 \u2502\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let's look at rides to LaGuardia or JFK airports:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    pickup_datetime,\n    dropoff_datetime,\n    total_amount,\n    pickup_nyct2010_gid,\n    dropoff_nyct2010_gid,\n    CASE\n        WHEN dropoff_nyct2010_gid = 138 THEN 'LGA'\n        WHEN dropoff_nyct2010_gid = 132 THEN 'JFK'\n    END AS airport_code,\n    EXTRACT(YEAR FROM pickup_datetime) AS year,\n    EXTRACT(DAY FROM pickup_datetime) AS day,\n    EXTRACT(HOUR FROM pickup_datetime) AS hour\nFROM trips\nWHERE dropoff_nyct2010_gid IN (132, 138)\nORDER BY pickup_datetime\n")),(0,o.kt)("p",{parentName:"li"},"The response is:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500pickup_datetime\u2500\u252c\u2500\u2500\u2500\u2500dropoff_datetime\u2500\u252c\u2500total_amount\u2500\u252c\u2500pickup_nyct2010_gid\u2500\u252c\u2500dropoff_nyct2010_gid\u2500\u252c\u2500airport_code\u2500\u252c\u2500year\u2500\u252c\u2500day\u2500\u252c\u2500hour\u2500\u2510\n\u2502 2015-07-01 00:04:14 \u2502 2015-07-01 00:15:29 \u2502         13.3 \u2502                 -34 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:09:42 \u2502 2015-07-01 00:12:55 \u2502          6.8 \u2502                  50 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:23:04 \u2502 2015-07-01 00:24:39 \u2502          4.8 \u2502                -125 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:27:51 \u2502 2015-07-01 00:39:02 \u2502        14.72 \u2502                -101 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:32:03 \u2502 2015-07-01 00:55:39 \u2502        39.34 \u2502                  48 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:34:12 \u2502 2015-07-01 00:40:48 \u2502         9.95 \u2502                 -93 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:38:26 \u2502 2015-07-01 00:49:00 \u2502         13.3 \u2502                 -11 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:41:48 \u2502 2015-07-01 00:44:45 \u2502          6.3 \u2502                 -94 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 01:06:18 \u2502 2015-07-01 01:14:43 \u2502        11.76 \u2502                  37 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    1 \u2502\n")))),(0,o.kt)("h2",{id:"4-create-a-dictionary"},"4. Create a Dictionary"),(0,o.kt)("p",null,"If you are new to ClickHouse, it is important to understand how ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"dictionaries"))," work. A simple way of thinking about a dictionary is a mapping of key->value pairs that is stored in memory. The details and all the options for dictionaries are linked at the end of the tutorial."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let's see how to create a dictionary associated with a table in your ClickHouse service. The table and therefore the dictionary, will be based on a CSV file that contains 265 rows, one row for each neighborhood in NYC. The neighborhoods are mapped to the names of the NYC boroughs (NYC has 5 boroughs: the Bronx, Brooklyn, Manhattan, Queens and Staten Island), and this file counts Newark Airport (EWR) as a borough as well."),(0,o.kt)("p",{parentName:"li"},"This is part of the CSV file (shown as a table for clarity).  The ",(0,o.kt)("inlineCode",{parentName:"p"},"LocationID")," column in the file maps to the ",(0,o.kt)("inlineCode",{parentName:"p"},"pickup_nyct2010_gid")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dropoff_nyct2010_gid")," columns in your ",(0,o.kt)("inlineCode",{parentName:"p"},"trips")," table:"),(0,o.kt)("table",{parentName:"li"},(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"LocationID"),(0,o.kt)("th",{parentName:"tr",align:null},"Borough"),(0,o.kt)("th",{parentName:"tr",align:null},"Zone"),(0,o.kt)("th",{parentName:"tr",align:null},"service_zone"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"1"),(0,o.kt)("td",{parentName:"tr",align:null},"EWR"),(0,o.kt)("td",{parentName:"tr",align:null},"Newark Airport"),(0,o.kt)("td",{parentName:"tr",align:null},"EWR")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"2"),(0,o.kt)("td",{parentName:"tr",align:null},"Queens"),(0,o.kt)("td",{parentName:"tr",align:null},"Jamaica Bay"),(0,o.kt)("td",{parentName:"tr",align:null},"Boro Zone")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"3"),(0,o.kt)("td",{parentName:"tr",align:null},"Bronx"),(0,o.kt)("td",{parentName:"tr",align:null},"Allerton/Pelham Gardens"),(0,o.kt)("td",{parentName:"tr",align:null},"Boro Zone")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"4"),(0,o.kt)("td",{parentName:"tr",align:null},"Manhattan"),(0,o.kt)("td",{parentName:"tr",align:null},"Alphabet City"),(0,o.kt)("td",{parentName:"tr",align:null},"Yellow Zone")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"5"),(0,o.kt)("td",{parentName:"tr",align:null},"Staten Island"),(0,o.kt)("td",{parentName:"tr",align:null},"Arden Heights"),(0,o.kt)("td",{parentName:"tr",align:null},"Boro Zone")))))),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The URL for the file is ",(0,o.kt)("inlineCode",{parentName:"p"},"https://datasets-documentation.s3.eu-west-3.amazonaws.com/nyc-taxi/taxi_zone_lookup.csv"),". Run the following SQL, which creates a Dictionary named ",(0,o.kt)("inlineCode",{parentName:"p"},"taxi_zone_dictionary")," and populates the dictionary from the CSV file in S3:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY taxi_zone_dictionary\n(\n  `LocationID` UInt16 DEFAULT 0,\n  `Borough` String,\n  `Zone` String,\n  `service_zone` String\n)\nPRIMARY KEY LocationID\nSOURCE(HTTP(URL 'https://datasets-documentation.s3.eu-west-3.amazonaws.com/nyc-taxi/taxi_zone_lookup.csv' FORMAT 'CSVWithNames'))\nLIFETIME(MIN 0 MAX 0)\nLAYOUT(HASHED_ARRAY())\n")),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"LIFETIME")," to 0 means this dictionary will never update with its source. It is used here to not send unnecessary traffic to our S3 bucket, but in general you could specify any lifetime values you prefer."),(0,o.kt)("p",{parentName:"admonition"},"  For example:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"LIFETIME(MIN 1 MAX 10)\n")),(0,o.kt)("p",{parentName:"admonition"},"  specifies the dictionary to update after some random time between 1 and 10 seconds. (The random time is necessary in order to distribute the load on the dictionary source when updating on a large number of servers.)"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Verify it worked - you should get 265 rows (one row for each neighborhood):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM taxi_zone_dictionary\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dictGet")," function (",(0,o.kt)("a",{parentName:"p",href:"./sql-reference/functions/ext-dict-functions.md"},"or its variations"),") to retrieve a value from a dictionary. You pass in the name of the dictionary, the value you want, and the key (which in our example is the ",(0,o.kt)("inlineCode",{parentName:"p"},"LocationID")," column of ",(0,o.kt)("inlineCode",{parentName:"p"},"taxi_zone_dictionary"),")."),(0,o.kt)("p",{parentName:"li"},"For example, the following query returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"Borough")," whose ",(0,o.kt)("inlineCode",{parentName:"p"},"LocationID")," is 132 (which as we saw above is JFK airport):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictGet('taxi_zone_dictionary', 'Borough', 132)\n")),(0,o.kt)("p",{parentName:"li"},"JFK is in Queens, and notice the time to retrieve the value is essentially 0:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500dictGet('taxi_zone_dictionary', 'Borough', 132)\u2500\u2510\n\u2502 Queens                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 rows in set. Elapsed: 0.004 sec.\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dictHas"),' function to see if a key is present in the dictionary. For example, the following query returns 1 (which is "true" in ClickHouse):'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictHas('taxi_zone_dictionary', 132)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The following query returns 0 because 4567 is not a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"LocationID")," in the dictionary:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictHas('taxi_zone_dictionary', 4567)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dictGet")," function to retrieve a borough's name in a query. For example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    count(1) AS total,\n    dictGetOrDefault('taxi_zone_dictionary','Borough', toUInt64(pickup_nyct2010_gid), 'Unknown') AS borough_name\nFROM trips\nWHERE dropoff_nyct2010_gid = 132 OR dropoff_nyct2010_gid = 138\nGROUP BY borough_name\nORDER BY total DESC\n")),(0,o.kt)("p",{parentName:"li"},"This query sums up the number of taxi rides per borough that end at either the LaGuardia or JFK airport. The result looks like the following, and notice there are quite a few trips where the dropoff neighborhood is unknown:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500total\u2500\u252c\u2500borough_name\u2500\u2500\u2510\n\u2502 23683 \u2502 Unknown       \u2502\n\u2502  7053 \u2502 Manhattan     \u2502\n\u2502  6828 \u2502 Brooklyn      \u2502\n\u2502  4458 \u2502 Queens        \u2502\n\u2502  2670 \u2502 Bronx         \u2502\n\u2502   554 \u2502 Staten Island \u2502\n\u2502    53 \u2502 EWR           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n7 rows in set. Elapsed: 0.019 sec. Processed 2.00 million rows, 4.00 MB (105.70 million rows/s., 211.40 MB/s.)\n")))),(0,o.kt)("h2",{id:"5-perform-a-join"},"5. Perform a Join"),(0,o.kt)("p",null,"Let's write some queries that join the ",(0,o.kt)("inlineCode",{parentName:"p"},"taxi_zone_dictionary")," with your ",(0,o.kt)("inlineCode",{parentName:"p"},"trips")," table."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We can start with a simple JOIN that acts similarly to the previous airport query above:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    count(1) AS total,\n    Borough\nFROM trips\nJOIN taxi_zone_dictionary ON toUInt64(trips.pickup_nyct2010_gid) = taxi_zone_dictionary.LocationID\nWHERE dropoff_nyct2010_gid = 132 OR dropoff_nyct2010_gid = 138\nGROUP BY Borough\nORDER BY total DESC\n")),(0,o.kt)("p",{parentName:"li"},"The response looks familiar:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500total\u2500\u252c\u2500Borough\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  7053 \u2502 Manhattan     \u2502\n\u2502  6828 \u2502 Brooklyn      \u2502\n\u2502  4458 \u2502 Queens        \u2502\n\u2502  2670 \u2502 Bronx         \u2502\n\u2502   554 \u2502 Staten Island \u2502\n\u2502    53 \u2502 EWR           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n6 rows in set. Elapsed: 0.034 sec. Processed 2.00 million rows, 4.00 MB (59.14 million rows/s., 118.29 MB/s.)\n")),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Notice the output of the above ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," query is the same as the query before it that used ",(0,o.kt)("inlineCode",{parentName:"p"},"dictGetOrDefault")," (except that the ",(0,o.kt)("inlineCode",{parentName:"p"},"Unknown")," values are not included). Behind the scenes, ClickHouse is actually calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"dictGet")," function for the ",(0,o.kt)("inlineCode",{parentName:"p"},"taxi_zone_dictionary")," dictionary, but the ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," syntax is more familiar for SQL developers."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We do not use ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT *")," often in ClickHouse - you should only retrieve the columns you actually need! But it is difficult to find a query that takes a long time, so this query purposely selects every column and returns every row (except there is a built-in 10,000 row maximum in the response by default), and also does a right join of every row with the dictionary:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM trips\nJOIN taxi_zone_dictionary\n    ON trips.dropoff_nyct2010_gid = taxi_zone_dictionary.LocationID\nWHERE tip_amount > 0\nORDER BY tip_amount DESC\nLIMIT 1000\n")))),(0,o.kt)("h4",{id:"congrats"},"Congrats!"),(0,o.kt)("p",null,"Well done - you made it through the tutorial, and hopefully you have a better understanding of how to use ClickHouse. Here are some options for what to do next:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Read ",(0,o.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/guides/improving-query-performance/sparse-primary-indexes/sparse-primary-indexes-intro"},"how primary keys work in ClickHouse")," - this knowledge will move you a long ways forward along your journey to becoming a ClickHouse expert"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/intro"},"Integrate an external data source")," like files, Kafka, PostgreSQL, data pipelines, or lots of other data sources"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./integrations/data-visualization/"},"Connect your favorite UI/BI tool")," to ClickHouse"),(0,o.kt)("li",{parentName:"ul"},"Check out the ",(0,o.kt)("a",{parentName:"li",href:"./sql-reference/"},"SQL Reference")," and browse through the various functions. ClickHouse has an amazing collection of functions for transforming, processing and analyzing data"),(0,o.kt)("li",{parentName:"ul"},"Learn more about ",(0,o.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/dictionaries/external-dictionaries/external-dicts.md"},"Dictionaries"))))}m.isMDXComponent=!0},60343:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cloud-connect-to-sql-console-cadbf0b6a87ae117ed4aad3ab3419293.png"}}]);