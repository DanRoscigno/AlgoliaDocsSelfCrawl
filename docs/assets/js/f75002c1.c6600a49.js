"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[17518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},92513:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={slug:"/en/engines/table-engines/special/keeper-map",sidebar_position:150,sidebar_label:"KeeperMap"},l="KeeperMap",p={unversionedId:"en/engines/table-engines/special/keepermap",id:"en/engines/table-engines/special/keepermap",title:"KeeperMap",description:"keepermap}",source:"@site/docs/en/engines/table-engines/special/keepermap.md",sourceDirName:"en/engines/table-engines/special",slug:"/en/engines/table-engines/special/keeper-map",permalink:"/docs/en/engines/table-engines/special/keeper-map",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/engines/table-engines/special/keepermap.md",tags:[],version:"current",sidebarPosition:150,frontMatter:{slug:"/en/engines/table-engines/special/keeper-map",sidebar_position:150,sidebar_label:"KeeperMap"},sidebar:"english",previous:{title:"GenerateRandom",permalink:"/docs/en/engines/table-engines/special/generate"},next:{title:"Guides",permalink:"/docs/en/guides"}},o={},s=[{value:"Creating a Table",id:"table_engine-KeeperMap-creating-a-table",level:2},{value:"Supported operations",id:"table_engine-KeeperMap-supported-operations",level:2},{value:"Inserts",id:"inserts",level:3},{value:"Deletes",id:"deletes",level:3},{value:"Updates",id:"updates",level:3}],u={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"keepermap"},"KeeperMap"),(0,r.kt)("p",null,"This engine allows you to use Keeper/ZooKeeper cluster as consistent key-value store with linearizable writes and sequentially consistent reads."),(0,r.kt)("p",null,"To enable KeeperMap storage engine, you need to define a ZooKeeper path where the tables will be stored using ",(0,r.kt)("inlineCode",{parentName:"p"},"<keeper_map_path_prefix>")," config."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <keeper_map_path_prefix>/keeper_map_tables</keeper_map_path_prefix>\n</clickhouse>\n")),(0,r.kt)("p",null,"where path can be any other valid ZooKeeper path."),(0,r.kt)("h2",{id:"table_engine-KeeperMap-creating-a-table"},"Creating a Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],\n    ...\n) ENGINE = KeeperMap(root_path, [keys_limit]) PRIMARY KEY(primary_key_name)\n")),(0,r.kt)("p",null,"Engine parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root_path")," - ZooKeeper path where the ",(0,r.kt)("inlineCode",{parentName:"li"},"table_name")," will be stored.",(0,r.kt)("br",{parentName:"li"}),"This path should not contain the prefix defined by ",(0,r.kt)("inlineCode",{parentName:"li"},"<keeper_map_path_prefix>")," config because the prefix will be automatically appended to the ",(0,r.kt)("inlineCode",{parentName:"li"},"root_path"),".",(0,r.kt)("br",{parentName:"li"}),"Additionally, format of ",(0,r.kt)("inlineCode",{parentName:"li"},"auxiliary_zookeper_cluster_name:/some/path")," is also supported where ",(0,r.kt)("inlineCode",{parentName:"li"},"auxiliary_zookeper_cluster")," is a ZooKeeper cluster defined inside ",(0,r.kt)("inlineCode",{parentName:"li"},"<auxiliary_zookeepers>")," config.",(0,r.kt)("br",{parentName:"li"}),"By default, ZooKeeper cluster defined inside ",(0,r.kt)("inlineCode",{parentName:"li"},"<zookeeper>")," config is used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys_limit")," - number of keys allowed inside the table.",(0,r.kt)("br",{parentName:"li"}),"This limit is a soft limit and it can be possible that more keys will end up in the table for some edge cases."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"primary_key_name")," \u2013 any column name in the column list."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"primary key")," must be specified, it supports only one column in the primary key. The primary key will be serialized in binary as a ",(0,r.kt)("inlineCode",{parentName:"li"},"node name")," inside ZooKeeper. "),(0,r.kt)("li",{parentName:"ul"},"columns other than the primary key will be serialized to binary in corresponding order and stored as a value of the resulting node defined by the serialized key."),(0,r.kt)("li",{parentName:"ul"},"queries with key ",(0,r.kt)("inlineCode",{parentName:"li"},"equals")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"in")," filtering will be optimized to multi keys lookup from ",(0,r.kt)("inlineCode",{parentName:"li"},"Keeper"),", otherwise all values will be fetched.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE keeper_map_table\n(\n    `key` String,\n    `v1` UInt32,\n    `v2` String,\n    `v3` Float32\n)\nENGINE = KeeperMap(/keeper_map_table, 4)\nPRIMARY KEY key\n")),(0,r.kt)("p",null,"with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <keeper_map_path_prefix>/keeper_map_tables</keeper_map_path_prefix>\n</clickhouse>\n")),(0,r.kt)("p",null,"Each value, which is binary serialization of ",(0,r.kt)("inlineCode",{parentName:"p"},"(v1, v2, v3)"),", will be stored inside ",(0,r.kt)("inlineCode",{parentName:"p"},"/keeper_map_tables/keeper_map_table/data/serialized_key")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Keeper"),".\nAdditionally, number of keys will have a soft limit of 4 for the number of keys."),(0,r.kt)("p",null,"If multiple tables are created on the same ZooKeeper path, the values are persisted until there exists at least 1 table using it.",(0,r.kt)("br",{parentName:"p"}),"\n","As a result, it is possible to use ",(0,r.kt)("inlineCode",{parentName:"p"},"ON CLUSTER")," clause when creating the table and sharing the data from multiple ClickHouse instances.",(0,r.kt)("br",{parentName:"p"}),"\n","Of course, it's possible to manually run ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE")," with same path on nonrelated ClickHouse instances to have same data sharing effect."),(0,r.kt)("h2",{id:"table_engine-KeeperMap-supported-operations"},"Supported operations"),(0,r.kt)("h3",{id:"inserts"},"Inserts"),(0,r.kt)("p",null,"When new rows are inserted into ",(0,r.kt)("inlineCode",{parentName:"p"},"KeeperMap"),", if the key already exists, the value will be updated, otherwise new key is created."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO keeper_map_table VALUES ('some key', 1, 'value', 3.2);\n")),(0,r.kt)("h3",{id:"deletes"},"Deletes"),(0,r.kt)("p",null,"Rows can be deleted using ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," query or ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUNCATE"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE FROM keeper_map_table WHERE key LIKE 'some%' AND v1 > 1;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE keeper_map_table DELETE WHERE key LIKE 'some%' AND v1 > 1;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"TRUNCATE TABLE keeper_map_table;\n")),(0,r.kt)("h3",{id:"updates"},"Updates"),(0,r.kt)("p",null,"Values can be updated using ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER TABLE")," query. Primary key cannot be updated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE keeper_map_table UPDATE v1 = v1 * 10 + 2 WHERE key LIKE 'some%' AND v3 > 3.1;\n")))}d.isMDXComponent=!0}}]);