"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[95575],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>p});var n=t(67294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=d(t),c=i,p=u["".concat(s,".").concat(c)]||u[c]||g[c]||l;return t?n.createElement(p,r(r({ref:a},m),{},{components:t})):n.createElement(p,r({ref:a},m))}));function p(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var d=2;d<l;d++)r[d]=t[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},36162:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=t(87462),i=(t(67294),t(3905));const l={slug:"/en/guides/developer/cascading-materialized-views",sidebar_label:"Materialized Views",description:"HowTo use multiple materialized views from a source table.",keywords:["materialized view","how to","aggregation"]},r="Materialized views",o={unversionedId:"en/guides/developer/cascading-materialized-views",id:"en/guides/developer/cascading-materialized-views",title:"Materialized views",description:"HowTo use multiple materialized views from a source table.",source:"@site/docs/en/guides/developer/cascading-materialized-views.md",sourceDirName:"en/guides/developer",slug:"/en/guides/developer/cascading-materialized-views",permalink:"/AlgoliaDocsSelfCrawl/en/guides/developer/cascading-materialized-views",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/guides/developer/cascading-materialized-views.md",tags:[],version:"current",frontMatter:{slug:"/en/guides/developer/cascading-materialized-views",sidebar_label:"Materialized Views",description:"HowTo use multiple materialized views from a source table.",keywords:["materialized view","how to","aggregation"]},sidebar:"english",previous:{title:"Other Approaches",permalink:"/AlgoliaDocsSelfCrawl/en/guides/developer/working-with-json/json-other-approaches"},next:{title:"Lightweight Delete",permalink:"/AlgoliaDocsSelfCrawl/en/guides/developer/lightweght-delete"}},s={},d=[{value:"Source table for the materialized views",id:"source-table-for-the-materialized-views",level:2},{value:"Monthly aggregated table and materialized view",id:"monthly-aggregated-table-and-materialized-view",level:2},{value:"Yearly aggregated table and materialized view",id:"yearly-aggregated-table-and-materialized-view",level:2},{value:"Sample data",id:"sample-data",level:2},{value:"Results",id:"results",level:2}],m={toc:d},u="wrapper";function g(e){let{components:a,...t}=e;return(0,i.kt)(u,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"materialized-views"},"Materialized views"),(0,i.kt)("p",null,"This example demonstrates how to create a Materialized View, and then how to cascade a second Materialized View on to the first. In this page, you will see how to do it, many of the possibilities, and the limitations.\nDifferent use cases can be answered by creating a Materialized view using a second Materialized view as the source."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("p",null,"We will use a fake dataset with the number of views per hour for a group of domain names."),(0,i.kt)("p",null,"Our Goal"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We need the data aggregated by month for each domain name,"),(0,i.kt)("li",{parentName:"ol"},"We also need the data aggregated by year for each domain name.")),(0,i.kt)("p",null,"You could choose one of these options:\nwrite queries that will read and aggregate the data during the SELECT request\nprepare the data at the ingest time to a new format\nPrepare the data at the time of ingest to a specific aggregation."),(0,i.kt)("p",null,"Preparing the data using Materialized views will allow you to limit the amount of data and calculation ClickHouse needs to do, making your SELECT requests faster."),(0,i.kt)("h2",{id:"source-table-for-the-materialized-views"},"Source table for the materialized views"),(0,i.kt)("p",null,"Create the source table, because our goals involve reporting on the aggregated data and not the individual rows, we can parse it, pass the information on to the Materialized Views, and discard the actual incoming data.  This meets our goals and saves on storage so we will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Null")," table engine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE IF NOT EXISTS analytics;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE analytics.hourly_data\n(\n    `domain_name` String,\n    `event_time` DateTime,\n    `count_views` UInt64\n)\nENGINE = Null\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can create a materialized view on a Null table. So the data written to the table will end up affecting the view, but the original raw data will still be discarded.")),(0,i.kt)("h2",{id:"monthly-aggregated-table-and-materialized-view"},"Monthly aggregated table and materialized view"),(0,i.kt)("p",null,"For the first Materialized View, we need to create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Target")," table, for this example, it will be ",(0,i.kt)("inlineCode",{parentName:"p"},"analytics.monthly_aggregated_data")," and we will store the sum of the views by month and domain name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE analytics.monthly_aggregated_data\n(\n    `domain_name` String,\n    `month` Date,\n    `sumCountViews` AggregateFunction(sum, UInt64)\n)\nENGINE = AggregatingMergeTree\nORDER BY (domain_name, month)\n")),(0,i.kt)("p",null,"The Materialized View that will forward the data on the target table will look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW analytics.monthly_aggregated_data_mv\nTO analytics.monthly_aggregated_data\nAS\nSELECT\n    toDate(toStartOfMonth(event_time)) AS month,\n    domain_name,\n    sumState(count_views) AS sumCountViews\nFROM analytics.hourly_data\nGROUP BY\n    domain_name,\n    month\n")),(0,i.kt)("h2",{id:"yearly-aggregated-table-and-materialized-view"},"Yearly aggregated table and materialized view"),(0,i.kt)("p",null,"Now we will create the second Materialized view that will be linked to our previous target table ",(0,i.kt)("inlineCode",{parentName:"p"},"monthly_aggregated_data"),"."),(0,i.kt)("p",null,"First, we will create a new target table that will store the sum of views aggregated by year for each domain name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE analytics.year_aggregated_data\n(\n    `domain_name` String,\n    `year` UInt16,\n    `sumCountViews` UInt64\n)\nENGINE = SummingMergeTree()\nORDER BY (domain_name, year)\n")),(0,i.kt)("p",null,"This step defines the cascade. The ",(0,i.kt)("inlineCode",{parentName:"p"},"FROM")," statement will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"monthly_aggregated_data")," table, this means the data flow will be:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The data comes to the ",(0,i.kt)("inlineCode",{parentName:"li"},"hourly_data")," table."),(0,i.kt)("li",{parentName:"ol"},"ClickHouse will forward the data received to the first Materialized View ",(0,i.kt)("inlineCode",{parentName:"li"},"monthly_aggregated_data")," table,"),(0,i.kt)("li",{parentName:"ol"},"Finally, the data received in step 2 will be forwarded to the ",(0,i.kt)("inlineCode",{parentName:"li"},"year_aggregated_data"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW analytics.year_aggregated_data_mv\nTO analytics.year_aggregated_data\nAS\nSELECT\n    toYear(toStartOfYear(month)) AS year,\n    domain_name,\n    sumMerge(sumCountViews) as sumCountViews\nFROM analytics.monthly_aggregated_data\nGROUP BY\n    domain_name,\n    year\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"A common misinterpretation when working with Materialized views is that data is read from the table, This is not how ",(0,i.kt)("inlineCode",{parentName:"p"},"Materialized views")," work; the data forwarded is the inserted block, not the final result in your table."),(0,i.kt)("p",{parentName:"admonition"},"Let's imagine in this example that the engine used in ",(0,i.kt)("inlineCode",{parentName:"p"},"monthly_aggregated_data")," is a CollapsingMergeTree, the data forwarded to our second Materialized view ",(0,i.kt)("inlineCode",{parentName:"p"},"year_aggregated_data")," will not be the final result of the collapsed table, it will forward the block of data with the fields defined as in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT ... GROUP BY"),"."),(0,i.kt)("p",{parentName:"admonition"},"If you are using CollapsingMergeTree, ReplacingMergeTree, or even SummingMergeTree and you plan to create a cascade Materialized view you need to understand the limitations described here.")),(0,i.kt)("h2",{id:"sample-data"},"Sample data"),(0,i.kt)("p",null,"Now is the time to test our cascade materialized view by inserting some data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO analytics.hourly_data (domain_name, event_time, count_views)\nVALUES ('clickhouse.com', '2019-01-01 10:00:00', 1),\n       ('clickhouse.com', '2019-02-02 00:00:00', 2),\n       ('clickhouse.com', '2019-02-01 00:00:00', 3),\n       ('clickhouse.com', '2020-01-01 00:00:00', 6);\n")),(0,i.kt)("p",null,"If you SELECT the contents of ",(0,i.kt)("inlineCode",{parentName:"p"},"analytics.hourly_data")," you will see the following because the table engine is ",(0,i.kt)("inlineCode",{parentName:"p"},"Null"),", but the data was processed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM analytics.hourly_data\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-response"},"Ok.\n\n0 rows in set. Elapsed: 0.002 sec. \n")),(0,i.kt)("p",null,"We have used a small dataset to be sure we can follow and compare the result with what we are expecting, once your flow is correct with a small data set, you could just move to a large amount of data."),(0,i.kt)("h2",{id:"results"},"Results"),(0,i.kt)("p",null,"If you try to query the target table by selecting the ",(0,i.kt)("inlineCode",{parentName:"p"},"sumCountViews")," field, you will see the binary representation (in some terminals), as the value is not stored as a number but as an AggregateFunction type.\nTo get the final result of the aggregation you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-Merge")," suffix."),(0,i.kt)("p",null,"You can see the special characters stored in AggregateFunction with this query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sumCountViews FROM analytics.monthly_aggregated_data\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500sumCountViews\u2500\u2510\n\u2502               \u2502\n\u2502               \u2502\n\u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3 rows in set. Elapsed: 0.003 sec.\n")),(0,i.kt)("p",null,"Instead, let's try using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Merge")," suffix to get the ",(0,i.kt)("inlineCode",{parentName:"p"},"sumCountViews")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n   sumMerge(sumCountViews) as sumCountViews\nFROM analytics.monthly_aggregated_data;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500sumCountViews\u2500\u2510\n\u2502            12 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 row in set. Elapsed: 0.003 sec.\n")),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"AggregatingMergeTree")," we have defined the ",(0,i.kt)("inlineCode",{parentName:"p"},"AggregateFunction")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"sum"),", so we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sumMerge"),". When we use the function ",(0,i.kt)("inlineCode",{parentName:"p"},"avg")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"AggregateFunction"),", we will use ",(0,i.kt)("inlineCode",{parentName:"p"},"avgMerge"),", and so forth."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    month,\n    domain_name,\n    sumMerge(sumCountViews) as sumCountViews\nFROM analytics.monthly_aggregated_data\nGROUP BY\n    domain_name,\n    month\n")),(0,i.kt)("p",null,"Now we can review that the Materialized Views answer the goal we have defined."),(0,i.kt)("p",null,"Now that we have the data stored in the target table ",(0,i.kt)("inlineCode",{parentName:"p"},"monthly_aggregated_data")," we can get the data aggregated by month for each domain name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n   month,\n   domain_name,\n   sumMerge(sumCountViews) as sumCountViews\nFROM analytics.monthly_aggregated_data\nGROUP BY\n   domain_name,\n   month\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500domain_name\u2500\u2500\u2500\u2500\u252c\u2500sumCountViews\u2500\u2510\n\u2502 2020-01-01 \u2502 clickhouse.com \u2502             6 \u2502\n\u2502 2019-01-01 \u2502 clickhouse.com \u2502             1 \u2502\n\u2502 2019-02-01 \u2502 clickhouse.com \u2502             5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3 rows in set. Elapsed: 0.004 sec.\n")),(0,i.kt)("p",null,"The data aggregated by year for each domain name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n   year,\n   domain_name,\n   sum(sumCountViews)\nFROM analytics.year_aggregated_data\nGROUP BY\n   domain_name,\n   year\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500year\u2500\u252c\u2500domain_name\u2500\u2500\u2500\u2500\u252c\u2500sum(sumCountViews)\u2500\u2510\n\u2502 2019 \u2502 clickhouse.com \u2502                  6 \u2502\n\u2502 2020 \u2502 clickhouse.com \u2502                  6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n2 rows in set. Elapsed: 0.004 sec.\n")))}g.isMDXComponent=!0}}]);