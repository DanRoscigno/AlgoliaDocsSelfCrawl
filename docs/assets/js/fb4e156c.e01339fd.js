"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[31192],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),u=r,m=g["".concat(o,".").concat(u)]||g[u]||d[u]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[g]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},64821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={slug:"/en/engines/table-engines/special/merge",sidebar_position:30,sidebar_label:"Merge"},i="Merge Table Engine",s={unversionedId:"en/engines/table-engines/special/merge",id:"en/engines/table-engines/special/merge",title:"Merge Table Engine",description:"The Merge engine (not to be confused with MergeTree) does not store data itself, but allows reading from any number of other tables simultaneously.",source:"@site/docs/en/engines/table-engines/special/merge.md",sourceDirName:"en/engines/table-engines/special",slug:"/en/engines/table-engines/special/merge",permalink:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/merge",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/engines/table-engines/special/merge.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{slug:"/en/engines/table-engines/special/merge",sidebar_position:30,sidebar_label:"Merge"},sidebar:"english",previous:{title:"Dictionary",permalink:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/dictionary"},next:{title:"Executable",permalink:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/executable"}},o={},p=[{value:"Creating a Table",id:"creating-a-table",level:2},{value:"Engine Parameters",id:"engine-parameters",level:2},{value:"db_name",id:"db_name",level:3},{value:"tables_regexp",id:"tables_regexp",level:3},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Virtual Columns",id:"virtual-columns",level:2}],c={toc:p},g="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"merge-table-engine"},"Merge Table Engine"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Merge")," engine (not to be confused with ",(0,r.kt)("inlineCode",{parentName:"p"},"MergeTree"),") does not store data itself, but allows reading from any number of other tables simultaneously."),(0,r.kt)("p",null,"Reading is automatically parallelized. Writing to a table is not supported. When reading, the indexes of tables that are actually being read are used, if they exist."),(0,r.kt)("h2",{id:"creating-a-table"},"Creating a Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE ... Engine=Merge(db_name, tables_regexp)\n")),(0,r.kt)("h2",{id:"engine-parameters"},"Engine Parameters"),(0,r.kt)("h3",{id:"db_name"},"db_name"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"db_name")," \u2014 Possible values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- database name,\n- constant expression that returns a string with a database name, for example, `currentDatabase()`,\n- `REGEXP(expression)`, where `expression` is a regular expression to match the DB names.\n")),(0,r.kt)("h3",{id:"tables_regexp"},"tables_regexp"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tables_regexp")," \u2014 A regular expression to match the table names in the specified DB or DBs."),(0,r.kt)("p",null,"Regular expressions \u2014 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/re2"},"re2"),' (supports a subset of PCRE), case-sensitive.\nSee the notes about escaping symbols in regular expressions in the "match" section.'),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"When selecting tables to read, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Merge")," table itself is not selected, even if it matches the regex. This is to avoid loops.\nIt is possible to create two ",(0,r.kt)("inlineCode",{parentName:"p"},"Merge")," tables that will endlessly try to read each others' data, but this is not a good idea."),(0,r.kt)("p",null,"The typical way to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Merge")," engine is for working with a large number of ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyLog")," tables as if with a single table."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1")),(0,r.kt)("p",null,"Consider two databases ",(0,r.kt)("inlineCode",{parentName:"p"},"ABC_corporate_site")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ABC_store"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"all_visitors")," table will contain IDs from the tables ",(0,r.kt)("inlineCode",{parentName:"p"},"visitors")," in both databases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE all_visitors (id UInt32) ENGINE=Merge(REGEXP('ABC_*'), 'visitors');\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2")),(0,r.kt)("p",null,"Let's say you have an old table ",(0,r.kt)("inlineCode",{parentName:"p"},"WatchLog_old")," and decided to change partitioning without moving data to a new table ",(0,r.kt)("inlineCode",{parentName:"p"},"WatchLog_new"),", and you need to see data from both tables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE WatchLog_old(date Date, UserId Int64, EventType String, Cnt UInt64)\n    ENGINE=MergeTree(date, (UserId, EventType), 8192);\nINSERT INTO WatchLog_old VALUES ('2018-01-01', 1, 'hit', 3);\n\nCREATE TABLE WatchLog_new(date Date, UserId Int64, EventType String, Cnt UInt64)\n    ENGINE=MergeTree PARTITION BY date ORDER BY (UserId, EventType) SETTINGS index_granularity=8192;\nINSERT INTO WatchLog_new VALUES ('2018-01-02', 2, 'hit', 3);\n\nCREATE TABLE WatchLog as WatchLog_old ENGINE=Merge(currentDatabase(), '^WatchLog');\n\nSELECT * FROM WatchLog;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500UserId\u2500\u252c\u2500EventType\u2500\u252c\u2500Cnt\u2500\u2510\n\u2502 2018-01-01 \u2502      1 \u2502 hit       \u2502   3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500UserId\u2500\u252c\u2500EventType\u2500\u252c\u2500Cnt\u2500\u2510\n\u2502 2018-01-02 \u2502      2 \u2502 hit       \u2502   3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"virtual-columns"},"Virtual Columns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_table")," \u2014 Contains the name of the table from which data was read. Type: ",(0,r.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("p",{parentName:"li"},"You can set the constant conditions on ",(0,r.kt)("inlineCode",{parentName:"p"},"_table")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE/PREWHERE")," clause (for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE _table='xyz'"),"). In this case the read operation is performed only for that tables where the condition on ",(0,r.kt)("inlineCode",{parentName:"p"},"_table")," is satisfied, so the ",(0,r.kt)("inlineCode",{parentName:"p"},"_table")," column acts as an index."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/#table_engines-virtual_columns"},"Virtual columns")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/merge"},"merge")," table function")))}d.isMDXComponent=!0}}]);