"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[40850],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13686:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={slug:"/en/sql-reference/statements/select/prewhere",sidebar_label:"PREWHERE"},i="PREWHERE Clause",s={unversionedId:"en/sql-reference/statements/select/prewhere",id:"en/sql-reference/statements/select/prewhere",title:"PREWHERE Clause",description:"Prewhere is an optimization to apply filtering more efficiently. It is enabled by default even if PREWHERE clause is not specified explicitly. It works by automatically moving part of WHERE condition to prewhere stage. The role of PREWHERE clause is only to control this optimization if you think that you know how to do it better than it happens by default.",source:"@site/docs/en/sql-reference/statements/select/prewhere.md",sourceDirName:"en/sql-reference/statements/select",slug:"/en/sql-reference/statements/select/prewhere",permalink:"/docs/en/sql-reference/statements/select/prewhere",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/statements/select/prewhere.md",tags:[],version:"current",frontMatter:{slug:"/en/sql-reference/statements/select/prewhere",sidebar_label:"PREWHERE"},sidebar:"english",previous:{title:"ORDER BY",permalink:"/docs/en/sql-reference/statements/select/order-by"},next:{title:"SAMPLE",permalink:"/docs/en/sql-reference/statements/select/sample"}},l={},p=[{value:"Controlling Prewhere Manually",id:"controlling-prewhere-manually",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Example",id:"example",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prewhere-clause"},"PREWHERE Clause"),(0,o.kt)("p",null,"Prewhere is an optimization to apply filtering more efficiently. It is enabled by default even if ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," clause is not specified explicitly. It works by automatically moving part of ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/select/where"},"WHERE")," condition to prewhere stage. The role of ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," clause is only to control this optimization if you think that you know how to do it better than it happens by default."),(0,o.kt)("p",null,"With prewhere optimization, at first only the columns necessary for executing prewhere expression are read. Then the other columns are read that are needed for running the rest of the query, but only those blocks where the prewhere expression is ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," at least for some rows. If there are a lot of blocks where prewhere expression is ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," for all rows and prewhere needs less columns than other parts of query, this often allows to read a lot less data from disk for query execution."),(0,o.kt)("h2",{id:"controlling-prewhere-manually"},"Controlling Prewhere Manually"),(0,o.kt)("p",null,"The clause has the same meaning as the ",(0,o.kt)("inlineCode",{parentName:"p"},"WHERE")," clause. The difference is in which data is read from the table. When manually controlling ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," for filtration conditions that are used by a minority of the columns in the query, but that provide strong data filtration. This reduces the volume of data to read."),(0,o.kt)("p",null,"A query may simultaneously specify ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"WHERE"),". In this case, ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," precedes ",(0,o.kt)("inlineCode",{parentName:"p"},"WHERE"),"."),(0,o.kt)("p",null,"If the ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/settings#optimize_move_to_prewhere"},"optimize_move_to_prewhere")," setting is set to 0, heuristics to automatically move parts of expressions from ",(0,o.kt)("inlineCode",{parentName:"p"},"WHERE")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," are disabled."),(0,o.kt)("p",null,"If query has ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/select/from#select-from-final"},"FINAL")," modifier, the ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," optimization is not always correct. It is enabled only if both settings ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/settings#optimize_move_to_prewhere"},"optimize_move_to_prewhere")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/settings#optimize_move_to_prewhere_if_final"},"optimize_move_to_prewhere_if_final")," are turned on."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," section is executed before ",(0,o.kt)("inlineCode",{parentName:"p"},"FINAL"),", so the results of ",(0,o.kt)("inlineCode",{parentName:"p"},"FROM ... FINAL")," queries may be skewed when using ",(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," with fields not in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ORDER BY")," section of a table.")),(0,o.kt)("h2",{id:"limitations"},"Limitations"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PREWHERE")," is only supported by tables from the ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/mergetree-family/"},"*MergeTree")," family."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE mydata\n(\n    `A` Int64,\n    `B` Int8,\n    `C` String\n)\nENGINE = MergeTree\nORDER BY A AS\nSELECT\n    number,\n    0,\n    if(number between 1000 and 2000, 'x', toString(number))\nFROM numbers(10000000);\n\nSELECT count()\nFROM mydata\nWHERE (B = 0) AND (C = 'x');\n\n1 row in set. Elapsed: 0.074 sec. Processed 10.00 million rows, 168.89 MB (134.98 million rows/s., 2.28 GB/s.)\n\n-- let's enable tracing to see which predicate are moved to PREWHERE\nset send_logs_level='debug';\n\nMergeTreeWhereOptimizer: condition \"B = 0\" moved to PREWHERE  \n-- Clickhouse moves automatically `B = 0` to PREWHERE, but it has no sense because B is always 0.\n\n-- Let's move other predicate `C = 'x'` \n\nSELECT count()\nFROM mydata\nPREWHERE C = 'x'\nWHERE B = 0;\n\n1 row in set. Elapsed: 0.069 sec. Processed 10.00 million rows, 158.89 MB (144.90 million rows/s., 2.30 GB/s.)\n\n-- This query with manual `PREWHERE` processes slightly less data: 158.89 MB VS 168.89 MB\n")))}u.isMDXComponent=!0}}]);