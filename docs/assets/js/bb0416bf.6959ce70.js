"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[58335],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},f=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||r;return n?l.createElement(d,i(i({ref:t},c),{},{components:n})):l.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}f.displayName="MDXCreateElement"},21277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var l=n(87462),a=(n(67294),n(3905));const r={slug:"/en/sql-reference/statements/select/into-outfile",sidebar_label:"INTO OUTFILE"},i="INTO OUTFILE Clause",o={unversionedId:"en/sql-reference/statements/select/into-outfile",id:"en/sql-reference/statements/select/into-outfile",title:"INTO OUTFILE Clause",description:"INTO OUTFILE clause redirects the result of a SELECT query to a file on the client side.",source:"@site/docs/en/sql-reference/statements/select/into-outfile.md",sourceDirName:"en/sql-reference/statements/select",slug:"/en/sql-reference/statements/select/into-outfile",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/into-outfile",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/statements/select/into-outfile.md",tags:[],version:"current",frontMatter:{slug:"/en/sql-reference/statements/select/into-outfile",sidebar_label:"INTO OUTFILE"},sidebar:"english",previous:{title:"INTERSECT",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/intersect"},next:{title:"JOIN",permalink:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join"}},s={},p=[{value:"Implementation Details",id:"implementation-details",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"into-outfile-clause"},"INTO OUTFILE Clause"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"INTO OUTFILE")," clause redirects the result of a ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT")," query to a file on the ",(0,a.kt)("strong",{parentName:"p"},"client")," side."),(0,a.kt)("p",null,"Compressed files are supported. Compression type is detected by the extension of the file name (mode ",(0,a.kt)("inlineCode",{parentName:"p"},"'auto'")," is used by default). Or it can be explicitly specified in a ",(0,a.kt)("inlineCode",{parentName:"p"},"COMPRESSION")," clause. The compression level for a certain compression type can be specified in a ",(0,a.kt)("inlineCode",{parentName:"p"},"LEVEL")," clause."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Syntax")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT <expr_list> INTO OUTFILE file_name [AND STDOUT] [COMPRESSION type [LEVEL level]]\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"file_name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," are string literals. Supported compression types are: ",(0,a.kt)("inlineCode",{parentName:"p"},"'none'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'gzip'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'deflate'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'br'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'xz'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'zstd'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'lz4'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'bz2'"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"level")," is a numeric literal. Positive integers in following ranges are supported: ",(0,a.kt)("inlineCode",{parentName:"p"},"1-12")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"lz4")," type, ",(0,a.kt)("inlineCode",{parentName:"p"},"1-22")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"zstd")," type and ",(0,a.kt)("inlineCode",{parentName:"p"},"1-9")," for other compression types."),(0,a.kt)("h2",{id:"implementation-details"},"Implementation Details"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This functionality is available in the ",(0,a.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/interfaces/cli"},"command-line client")," and ",(0,a.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/operations/utilities/clickhouse-local"},"clickhouse-local"),". Thus a query sent via ",(0,a.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/interfaces/http"},"HTTP interface")," will fail."),(0,a.kt)("li",{parentName:"ul"},"The query will fail if a file with the same file name already exists."),(0,a.kt)("li",{parentName:"ul"},"The default ",(0,a.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats"},"output format")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"TabSeparated")," (like in the command-line client batch mode). Use ",(0,a.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/format"},"FORMAT")," clause to change it."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"AND STDOUT")," is mentioned in the query then the output that is written to the file is also displayed on standard output. If used with compression, the plaintext is displayed on standard output.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,"Execute the following query using ",(0,a.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/cli"},"command-line client"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-client --query=\"SELECT 1,'ABC' INTO OUTFILE 'select.gz' FORMAT CSV;\"\nzcat select.gz \n")),(0,a.kt)("p",null,"Result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},'1,"ABC"\n')))}m.isMDXComponent=!0}}]);