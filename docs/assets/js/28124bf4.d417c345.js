"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[78040],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(t),g=r,m=p["".concat(l,".").concat(g)]||p[g]||u[g]||s;return t?a.createElement(m,i(i({ref:n},d),{},{components:t})):a.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4837:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const s={slug:"/en/getting-started/example-datasets/amplab-benchmark",sidebar_label:"AMPLab Big Data Benchmark",description:"A benchmark dataset used for comparing the performance of data warehousing solutions."},i="AMPLab Big Data Benchmark",o={unversionedId:"en/getting-started/example-datasets/amplab-benchmark",id:"en/getting-started/example-datasets/amplab-benchmark",title:"AMPLab Big Data Benchmark",description:"A benchmark dataset used for comparing the performance of data warehousing solutions.",source:"@site/docs/en/getting-started/example-datasets/amplab-benchmark.md",sourceDirName:"en/getting-started/example-datasets",slug:"/en/getting-started/example-datasets/amplab-benchmark",permalink:"/AlgoliaDocsSelfCrawl/en/getting-started/example-datasets/amplab-benchmark",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/getting-started/example-datasets/amplab-benchmark.md",tags:[],version:"current",frontMatter:{slug:"/en/getting-started/example-datasets/amplab-benchmark",sidebar_label:"AMPLab Big Data Benchmark",description:"A benchmark dataset used for comparing the performance of data warehousing solutions."},sidebar:"english",previous:{title:"Cell Towers",permalink:"/AlgoliaDocsSelfCrawl/en/getting-started/example-datasets/cell-towers"},next:{title:"Brown University Benchmark",permalink:"/AlgoliaDocsSelfCrawl/en/getting-started/example-datasets/brown-benchmark"}},l={},c=[],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"amplab-big-data-benchmark"},"AMPLab Big Data Benchmark"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://amplab.cs.berkeley.edu/benchmark/"},"https://amplab.cs.berkeley.edu/benchmark/")),(0,r.kt)("p",null,"Sign up for a free account at ",(0,r.kt)("a",{parentName:"p",href:"https://aws.amazon.com."},"https://aws.amazon.com.")," It requires a credit card, email, and phone number. Get a new access key at ",(0,r.kt)("a",{parentName:"p",href:"https://console.aws.amazon.com/iam/home?nc2=h_m_sc#security_credential"},"https://console.aws.amazon.com/iam/home?nc2=h_m_sc#security_credential")),(0,r.kt)("p",null,"Run the following in the console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get install s3cmd\n$ mkdir tiny; cd tiny;\n$ s3cmd sync s3://big-data-benchmark/pavlo/text-deflate/tiny/ .\n$ cd ..\n$ mkdir 1node; cd 1node;\n$ s3cmd sync s3://big-data-benchmark/pavlo/text-deflate/1node/ .\n$ cd ..\n$ mkdir 5nodes; cd 5nodes;\n$ s3cmd sync s3://big-data-benchmark/pavlo/text-deflate/5nodes/ .\n$ cd ..\n")),(0,r.kt)("p",null,"Run the following ClickHouse queries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE rankings_tiny\n(\n    pageURL String,\n    pageRank UInt32,\n    avgDuration UInt32\n) ENGINE = Log;\n\nCREATE TABLE uservisits_tiny\n(\n    sourceIP String,\n    destinationURL String,\n    visitDate Date,\n    adRevenue Float32,\n    UserAgent String,\n    cCode FixedString(3),\n    lCode FixedString(6),\n    searchWord String,\n    duration UInt32\n) ENGINE = MergeTree(visitDate, visitDate, 8192);\n\nCREATE TABLE rankings_1node\n(\n    pageURL String,\n    pageRank UInt32,\n    avgDuration UInt32\n) ENGINE = Log;\n\nCREATE TABLE uservisits_1node\n(\n    sourceIP String,\n    destinationURL String,\n    visitDate Date,\n    adRevenue Float32,\n    UserAgent String,\n    cCode FixedString(3),\n    lCode FixedString(6),\n    searchWord String,\n    duration UInt32\n) ENGINE = MergeTree(visitDate, visitDate, 8192);\n\nCREATE TABLE rankings_5nodes_on_single\n(\n    pageURL String,\n    pageRank UInt32,\n    avgDuration UInt32\n) ENGINE = Log;\n\nCREATE TABLE uservisits_5nodes_on_single\n(\n    sourceIP String,\n    destinationURL String,\n    visitDate Date,\n    adRevenue Float32,\n    UserAgent String,\n    cCode FixedString(3),\n    lCode FixedString(6),\n    searchWord String,\n    duration UInt32\n) ENGINE = MergeTree(visitDate, visitDate, 8192);\n")),(0,r.kt)("p",null,"Go back to the console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ for i in tiny/rankings/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO rankings_tiny FORMAT CSV"; done\n$ for i in tiny/uservisits/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO uservisits_tiny FORMAT CSV"; done\n$ for i in 1node/rankings/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO rankings_1node FORMAT CSV"; done\n$ for i in 1node/uservisits/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO uservisits_1node FORMAT CSV"; done\n$ for i in 5nodes/rankings/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO rankings_5nodes_on_single FORMAT CSV"; done\n$ for i in 5nodes/uservisits/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO uservisits_5nodes_on_single FORMAT CSV"; done\n')),(0,r.kt)("p",null,"Queries for obtaining data samples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT pageURL, pageRank FROM rankings_1node WHERE pageRank > 1000\n\nSELECT substring(sourceIP, 1, 8), sum(adRevenue) FROM uservisits_1node GROUP BY substring(sourceIP, 1, 8)\n\nSELECT\n    sourceIP,\n    sum(adRevenue) AS totalRevenue,\n    avg(pageRank) AS pageRank\nFROM rankings_1node ALL INNER JOIN\n(\n    SELECT\n        sourceIP,\n        destinationURL AS pageURL,\n        adRevenue\n    FROM uservisits_1node\n    WHERE (visitDate > '1980-01-01') AND (visitDate < '1980-04-01')\n) USING pageURL\nGROUP BY sourceIP\nORDER BY totalRevenue DESC\nLIMIT 1\n")))}u.isMDXComponent=!0}}]);