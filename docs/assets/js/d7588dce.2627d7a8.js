"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[98712],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={slug:"/en/engines/table-functions/executable",sidebar_position:55,sidebar_label:"executable",keywords:["udf","user defined function","clickhouse","executable","table","function"]},o="executable Table Function for UDFs",s={unversionedId:"en/sql-reference/table-functions/executable",id:"en/sql-reference/table-functions/executable",title:"executable Table Function for UDFs",description:"The executable table function creates a table based on the output of a user-defined function (UDF) that you define in a script that outputs rows to stdout. The executable script is stored in the users_scripts directory and can read data from any source.",source:"@site/docs/en/sql-reference/table-functions/executable.md",sourceDirName:"en/sql-reference/table-functions",slug:"/en/engines/table-functions/executable",permalink:"/docs/en/engines/table-functions/executable",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/table-functions/executable.md",tags:[],version:"current",sidebarPosition:55,frontMatter:{slug:"/en/engines/table-functions/executable",sidebar_position:55,sidebar_label:"executable",keywords:["udf","user defined function","clickhouse","executable","table","function"]},sidebar:"english",previous:{title:"dictionary function",permalink:"/docs/en/sql-reference/table-functions/dictionary"},next:{title:"hdfsCluster",permalink:"/docs/en/sql-reference/table-functions/hdfsCluster"}},l={},u=[{value:"Syntax",id:"syntax",level:2},{value:"Passing Query Results to a Script",id:"passing-query-results-to-a-script",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"executable-table-function-for-udfs"},"executable Table Function for UDFs"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"executable")," table function creates a table based on the output of a user-defined function (UDF) that you define in a script that outputs rows to ",(0,r.kt)("strong",{parentName:"p"},"stdout"),". The executable script is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"users_scripts")," directory and can read data from any source."),(0,r.kt)("p",null,"You can optionally include one or more input queries that stream their results to ",(0,r.kt)("strong",{parentName:"p"},"stdin")," for the script to read."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A key advantage between ordinary UDF functions and the ",(0,r.kt)("inlineCode",{parentName:"p"},"executable")," table function and ",(0,r.kt)("inlineCode",{parentName:"p"},"Executable")," table engine is that ordinary UDF functions cannot change the row count. For example, if the input is 100 rows, then the result must return 100 rows. When using the ",(0,r.kt)("inlineCode",{parentName:"p"},"executable")," table function or ",(0,r.kt)("inlineCode",{parentName:"p"},"Executable")," table engine, your script can make any data transformations you want, including complex aggregations.")),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"executable")," table function requires three parameters and accepts an optional list of input queries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"executable(script_name, format, structure, [input_query...])\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"script_name"),": the file name of the script. saved in the ",(0,r.kt)("inlineCode",{parentName:"li"},"user_scripts")," folder (the default folder of the ",(0,r.kt)("inlineCode",{parentName:"li"},"user_scripts_path")," setting)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"format"),": the format of the generated table"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"structure"),": the table schema of the generated table"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_query"),": an optional query (or collection or queries) whose results are passed to the script via ",(0,r.kt)("strong",{parentName:"li"},"stdin"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you are going to invoke the same script repeatedly with the same input queries, consider using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/special/executable"},(0,r.kt)("inlineCode",{parentName:"a"},"Executable")," table engine"),".")),(0,r.kt)("p",null,"The following Python script is named ",(0,r.kt)("inlineCode",{parentName:"p"},"generate_random.py")," and is saved in the ",(0,r.kt)("inlineCode",{parentName:"p"},"user_scripts")," folder. It reads in a number ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," and prints ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," random strings, with each string preceded by a number that is separated by a tab:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#!/usr/local/bin/python3.9\n\nimport sys\nimport string\nimport random\n\ndef main():\n\n    # Read input value\n    for number in sys.stdin:\n        i = int(number)\n\n        # Generate some random rows\n        for id in range(0, i):\n            letters = string.ascii_letters\n            random_string =  ''.join(random.choices(letters ,k=10))\n            print(str(id) + '\\t' + random_string + '\\n', end='')\n\n        # Flush results to stdout\n        sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    main()\n")),(0,r.kt)("p",null,"Let's invoke the script and have it generate 10 random strings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM executable('my_script.py', TabSeparated, 'id UInt32, random String', (SELECT 10))\n")),(0,r.kt)("p",null,"The response looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500id\u2500\u252c\u2500random\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502 xheXXCiSkH \u2502\n\u2502  1 \u2502 AqxvHAoTrl \u2502\n\u2502  2 \u2502 JYvPCEbIkY \u2502\n\u2502  3 \u2502 sWgnqJwGRm \u2502\n\u2502  4 \u2502 fTZGrjcLon \u2502\n\u2502  5 \u2502 ZQINGktPnd \u2502\n\u2502  6 \u2502 YFSvGGoezb \u2502\n\u2502  7 \u2502 QyMJJZOOia \u2502\n\u2502  8 \u2502 NfiyDDhmcI \u2502\n\u2502  9 \u2502 REJRdJpWrg \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"passing-query-results-to-a-script"},"Passing Query Results to a Script"),(0,r.kt)("p",null,"Be sure to check out the example in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Executable")," table engine on ",(0,r.kt)("a",{parentName:"p",href:"../../engines/table-engines/special/executable#passing-query-results-to-a-script"},"how to pass query results to a script"),". Here is how you execute the same script in that example using the ",(0,r.kt)("inlineCode",{parentName:"p"},"executable")," table function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM executable(\n    'sentiment.py',\n    TabSeparated,\n    'id UInt64, sentiment Float32',\n    (SELECT id, comment FROM hackernews WHERE id > 0 AND comment != '' LIMIT 20)\n);\n")))}d.isMDXComponent=!0}}]);