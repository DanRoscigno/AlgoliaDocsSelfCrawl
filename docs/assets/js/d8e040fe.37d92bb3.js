"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[40832],{3905:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>k});var a=l(67294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function i(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?i(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function s(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)l=i[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)l=i[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var o=a.createContext({}),u=function(e){var t=a.useContext(o),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(l),c=n,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||i;return l?a.createElement(k,r(r({ref:t},p),{},{components:l})):a.createElement(k,r({ref:t},p))}));function k(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=l.length,r=new Array(i);r[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:n,r[1]=s;for(var u=2;u<i;u++)r[u]=l[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,l)}c.displayName="MDXCreateElement"},87472:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=l(87462),n=(l(67294),l(3905));const i={sidebar_label:"Core Settings",sidebar_position:2,slug:"/en/operations/settings/settings",toc_max_heading_level:2},r="Core Settings",s={unversionedId:"en/operations/settings/settings",id:"en/operations/settings/settings",title:"Core Settings",description:"additionaltablefilters",source:"@site/docs/en/operations/settings/settings.md",sourceDirName:"en/operations/settings",slug:"/en/operations/settings/settings",permalink:"/AlgoliaDocsSelfCrawl/en/operations/settings/settings",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/settings/settings.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Core Settings",sidebar_position:2,slug:"/en/operations/settings/settings",toc_max_heading_level:2},sidebar:"english",previous:{title:"Settings Overview",permalink:"/AlgoliaDocsSelfCrawl/en/operations/settings/"},next:{title:"Format Settings",permalink:"/AlgoliaDocsSelfCrawl/en/operations/settings/formats"}},o={},u=[{value:"additional_table_filters",id:"additional_table_filters",level:2},{value:"allow_nondeterministic_mutations",id:"allow_nondeterministic_mutations",level:2},{value:"distributed_product_mode",id:"distributed-product-mode",level:2},{value:"prefer_global_in_and_join",id:"prefer-global-in-and-join",level:2},{value:"enable_optimize_predicate_expression",id:"enable-optimize-predicate-expression",level:2},{value:"fallback_to_stale_replicas_for_distributed_queries",id:"settings-fallback_to_stale_replicas_for_distributed_queries",level:2},{value:"force_index_by_date",id:"settings-force_index_by_date",level:2},{value:"force_primary_key",id:"force-primary-key",level:2},{value:"use_skip_indexes",id:"settings-use_skip_indexes",level:2},{value:"force_data_skipping_indices",id:"settings-force_data_skipping_indices",level:2},{value:"convert_query_to_cnf",id:"convert_query_to_cnf",level:2},{value:"fsync_metadata",id:"fsync-metadata",level:2},{value:"function_range_max_elements_in_block",id:"settings-function_range_max_elements_in_block",level:2},{value:"enable_http_compression",id:"settings-enable_http_compression",level:2},{value:"http_zlib_compression_level",id:"settings-http_zlib_compression_level",level:2},{value:"http_native_compression_disable_checksumming_on_decompress",id:"settings-http_native_compression_disable_checksumming_on_decompress",level:2},{value:"http_max_uri_size",id:"http-max-uri-size",level:2},{value:"table_function_remote_max_addresses",id:"table_function_remote_max_addresses",level:2},{value:"glob_expansion_max_elements",id:"glob_expansion_max_elements",level:2},{value:"send_progress_in_http_headers",id:"settings-send_progress_in_http_headers",level:2},{value:"max_http_get_redirects",id:"setting-max_http_get_redirects",level:2},{value:"insert_null_as_default",id:"insert_null_as_default",level:2},{value:"join_default_strictness",id:"settings-join_default_strictness",level:2},{value:"join_algorithm",id:"settings-join_algorithm",level:2},{value:"join_any_take_last_row",id:"settings-join_any_take_last_row",level:2},{value:"join_use_nulls",id:"join_use_nulls",level:2},{value:"group_by_use_nulls",id:"group_by_use_nulls",level:2},{value:"partial_merge_join_optimizations",id:"partial_merge_join_optimizations",level:2},{value:"partial_merge_join_rows_in_right_blocks",id:"partial_merge_join_rows_in_right_blocks",level:2},{value:"join_on_disk_max_files_to_merge",id:"join_on_disk_max_files_to_merge",level:2},{value:"any_join_distinct_right_table_keys",id:"any_join_distinct_right_table_keys",level:2},{value:"temporary_files_codec",id:"temporary_files_codec",level:2},{value:"max_block_size",id:"setting-max_block_size",level:2},{value:"preferred_block_size_bytes",id:"preferred-block-size-bytes",level:2},{value:"merge_tree_min_rows_for_concurrent_read",id:"setting-merge-tree-min-rows-for-concurrent-read",level:2},{value:"merge_tree_min_rows_for_concurrent_read_for_remote_filesystem",id:"merge-tree-min-rows-for-concurrent-read-for-remote-filesystem",level:2},{value:"merge_tree_min_bytes_for_concurrent_read",id:"setting-merge-tree-min-bytes-for-concurrent-read",level:2},{value:"merge_tree_min_bytes_for_concurrent_read_for_remote_filesystem",id:"merge-tree-min-bytes-for-concurrent-read-for-remote-filesystem",level:2},{value:"merge_tree_min_rows_for_seek",id:"setting-merge-tree-min-rows-for-seek",level:2},{value:"merge_tree_min_bytes_for_seek",id:"setting-merge-tree-min-bytes-for-seek",level:2},{value:"merge_tree_coarse_index_granularity",id:"setting-merge-tree-coarse-index-granularity",level:2},{value:"merge_tree_max_rows_to_use_cache",id:"setting-merge-tree-max-rows-to-use-cache",level:2},{value:"merge_tree_max_bytes_to_use_cache",id:"setting-merge-tree-max-bytes-to-use-cache",level:2},{value:"min_bytes_to_use_direct_io",id:"settings-min-bytes-to-use-direct-io",level:2},{value:"network_compression_method",id:"network_compression_method",level:2},{value:"network_zstd_compression_level",id:"network_zstd_compression_level",level:2},{value:"log_queries",id:"settings-log-queries",level:2},{value:"log_queries_min_query_duration_ms",id:"settings-log-queries-min-query-duration-ms",level:2},{value:"log_queries_min_type",id:"settings-log-queries-min-type",level:2},{value:"log_query_threads",id:"settings-log-query-threads",level:2},{value:"log_query_views",id:"settings-log-query-views",level:2},{value:"log_formatted_queries",id:"settings-log-formatted-queries",level:2},{value:"log_comment",id:"settings-log-comment",level:2},{value:"log_processors_profiles",id:"settings-log_processors_profiles",level:2},{value:"max_insert_block_size",id:"settings-max_insert_block_size",level:2},{value:"min_insert_block_size_rows",id:"min-insert-block-size-rows",level:2},{value:"min_insert_block_size_bytes",id:"min-insert-block-size-bytes",level:2},{value:"max_replica_delay_for_distributed_queries",id:"settings-max_replica_delay_for_distributed_queries",level:2},{value:"max_threads",id:"settings-max_threads",level:2},{value:"max_insert_threads",id:"settings-max-insert-threads",level:2},{value:"max_compress_block_size",id:"max-compress-block-size",level:2},{value:"min_compress_block_size",id:"min-compress-block-size",level:2},{value:"max_query_size",id:"settings-max_query_size",level:2},{value:"max_parser_depth",id:"max_parser_depth",level:2},{value:"interactive_delay",id:"interactive-delay",level:2},{value:"connect_timeout, receive_timeout, send_timeout",id:"connect-timeout-receive-timeout-send-timeout",level:2},{value:"cancel_http_readonly_queries_on_client_close",id:"cancel-http-readonly-queries-on-client-close",level:2},{value:"poll_interval",id:"poll-interval",level:2},{value:"max_distributed_connections",id:"max-distributed-connections",level:2},{value:"distributed_connections_pool_size",id:"distributed-connections-pool-size",level:2},{value:"max_distributed_depth",id:"max-distributed-depth",level:2},{value:"max_replicated_fetches_network_bandwidth_for_server",id:"max_replicated_fetches_network_bandwidth_for_server",level:2},{value:"max_replicated_sends_network_bandwidth_for_server",id:"max_replicated_sends_network_bandwidth_for_server",level:2},{value:"connect_timeout_with_failover_ms",id:"connect-timeout-with-failover-ms",level:2},{value:"connection_pool_max_wait_ms",id:"connection-pool-max-wait-ms",level:2},{value:"connections_with_failover_max_tries",id:"connections-with-failover-max-tries",level:2},{value:"extremes",id:"extremes",level:2},{value:"kafka_max_wait_ms",id:"kafka-max-wait-ms",level:2},{value:"kafka_disable_num_consumers_limit",id:"kafka-disable-num-consumers-limit",level:2},{value:"use_uncompressed_cache",id:"setting-use_uncompressed_cache",level:2},{value:"replace_running_query",id:"replace-running-query",level:2},{value:"replace_running_query_max_wait_ms",id:"replace-running-query-max-wait-ms",level:2},{value:"stream_flush_interval_ms",id:"stream-flush-interval-ms",level:2},{value:"stream_poll_timeout_ms",id:"stream_poll_timeout_ms",level:2},{value:"load_balancing",id:"settings-load_balancing",level:2},{value:"Random (by Default)",id:"load_balancing-random",level:3},{value:"Nearest Hostname",id:"load_balancing-nearest_hostname",level:3},{value:"In Order",id:"load_balancing-in_order",level:3},{value:"First or Random",id:"load_balancing-first_or_random",level:3},{value:"Round Robin",id:"load_balancing-round_robin",level:3},{value:"prefer_localhost_replica",id:"settings-prefer-localhost-replica",level:2},{value:"totals_mode",id:"totals-mode",level:2},{value:"totals_auto_threshold",id:"totals-auto-threshold",level:2},{value:"max_parallel_replicas",id:"settings-max_parallel_replicas",level:2},{value:"compile_expressions",id:"compile-expressions",level:2},{value:"min_count_to_compile_expression",id:"min-count-to-compile-expression",level:2},{value:"compile_aggregate_expressions",id:"compile_aggregate_expressions",level:2},{value:"min_count_to_compile_aggregate_expression",id:"min_count_to_compile_aggregate_expression",level:2},{value:"use_query_cache",id:"use-query-cache",level:2},{value:"enable_reads_from_query_cache",id:"enable-reads-from-query-cache",level:2},{value:"enable_writes_to_query_cache",id:"enable-writes-to-query-cache",level:2},{value:"query_cache_store_results_of_queries_with_nondeterministic_functions",id:"query--store-results-of-queries-with-nondeterministic-functions",level:2},{value:"query_cache_min_query_runs",id:"query-cache-min-query-runs",level:2},{value:"query_cache_min_query_duration",id:"query-cache-min-query-duration",level:2},{value:"query_cache_ttl",id:"query-cache-ttl",level:2},{value:"query_cache_share_between_users",id:"query-cache-share-between-users",level:2},{value:"insert_quorum",id:"settings-insert_quorum",level:2},{value:"insert_quorum_timeout",id:"settings-insert_quorum_timeout",level:2},{value:"insert_quorum_parallel",id:"settings-insert_quorum_parallel",level:2},{value:"select_sequential_consistency",id:"settings-select_sequential_consistency",level:2},{value:"insert_deduplicate",id:"settings-insert-deduplicate",level:2},{value:"Asynchronous Insert settings",id:"asynchronous-insert-settings",level:2},{value:"async_insert",id:"async-insert",level:3},{value:"async_insert_threads",id:"async-insert-threads",level:3},{value:"wait_for_async_insert",id:"wait-for-async-insert",level:3},{value:"wait_for_async_insert_timeout",id:"wait-for-async-insert-timeout",level:3},{value:"async_insert_max_data_size",id:"async-insert-max-data-size",level:3},{value:"async_insert_max_query_number",id:"async-insert-max-query-number",level:3},{value:"async_insert_busy_timeout_ms",id:"async-insert-busy-timeout-ms",level:3},{value:"async_insert_stale_timeout_ms",id:"async-insert-stale-timeout-ms",level:3},{value:"async_insert_deduplicate",id:"settings-async-insert-deduplicate",level:3},{value:"deduplicate_blocks_in_dependent_materialized_views",id:"settings-deduplicate-blocks-in-dependent-materialized-views",level:2},{value:"insert_deduplication_token",id:"insert_deduplication_token",level:2},{value:"insert_keeper_max_retries",id:"insert_keeper_max_retries",level:2},{value:"insert_keeper_retry_initial_backoff_ms",id:"insert_keeper_retry_initial_backoff_ms",level:2},{value:"insert_keeper_retry_max_backoff_ms",id:"insert_keeper_retry_max_backoff_ms",level:2},{value:"max_network_bytes",id:"settings-max-network-bytes",level:2},{value:"max_network_bandwidth",id:"settings-max-network-bandwidth",level:2},{value:"max_network_bandwidth_for_user",id:"settings-max-network-bandwidth-for-user",level:2},{value:"max_network_bandwidth_for_all_users",id:"settings-max-network-bandwidth-for-all-users",level:2},{value:"count_distinct_implementation",id:"settings-count_distinct_implementation",level:2},{value:"skip_unavailable_shards",id:"settings-skip_unavailable_shards",level:2},{value:"distributed_group_by_no_merge",id:"distributed-group-by-no-merge",level:2},{value:"distributed_push_down_limit",id:"distributed-push-down-limit",level:2},{value:"optimize_skip_unused_shards_limit",id:"optimize-skip-unused-shards-limit",level:2},{value:"optimize_skip_unused_shards",id:"optimize-skip-unused-shards",level:2},{value:"optimize_skip_unused_shards_rewrite_in",id:"optimize-skip-unused-shards-rewrite-in",level:2},{value:"allow_nondeterministic_optimize_skip_unused_shards",id:"allow-nondeterministic-optimize-skip-unused-shards",level:2},{value:"optimize_skip_unused_shards_nesting",id:"optimize-skip-unused-shards-nesting",level:2},{value:"force_optimize_skip_unused_shards",id:"force-optimize-skip-unused-shards",level:2},{value:"force_optimize_skip_unused_shards_nesting",id:"settings-force_optimize_skip_unused_shards_nesting",level:2},{value:"optimize_distributed_group_by_sharding_key",id:"optimize-distributed-group-by-sharding-key",level:2},{value:"optimize_throw_if_noop",id:"setting-optimize_throw_if_noop",level:2},{value:"optimize_skip_merged_partitions",id:"optimize-skip-merged-partitions",level:2},{value:"optimize_functions_to_subcolumns",id:"optimize-functions-to-subcolumns",level:2},{value:"optimize_trivial_count_query",id:"optimize-trivial-count-query",level:2},{value:"distributed_replica_error_half_life",id:"settings-distributed_replica_error_half_life",level:2},{value:"distributed_replica_error_cap",id:"settings-distributed_replica_error_cap",level:2},{value:"distributed_replica_max_ignored_errors",id:"settings-distributed_replica_max_ignored_errors",level:2},{value:"distributed_directory_monitor_sleep_time_ms",id:"distributed_directory_monitor_sleep_time_ms",level:2},{value:"distributed_directory_monitor_max_sleep_time_ms",id:"distributed_directory_monitor_max_sleep_time_ms",level:2},{value:"distributed_directory_monitor_batch_inserts",id:"distributed_directory_monitor_batch_inserts",level:2},{value:"distributed_directory_monitor_split_batch_on_failure",id:"distributed_directory_monitor_split_batch_on_failure",level:2},{value:"os_thread_priority",id:"setting-os-thread-priority",level:2},{value:"query_profiler_real_time_period_ns",id:"query_profiler_real_time_period_ns",level:2},{value:"query_profiler_cpu_time_period_ns",id:"query_profiler_cpu_time_period_ns",level:2},{value:"memory_profiler_step",id:"memory_profiler_step",level:2},{value:"memory_profiler_sample_probability",id:"memory_profiler_sample_probability",level:2},{value:"trace_profile_events",id:"trace_profile_events",level:2},{value:"allow_introspection_functions",id:"settings-allow_introspection_functions",level:2},{value:"input_format_parallel_parsing",id:"input-format-parallel-parsing",level:2},{value:"output_format_parallel_formatting",id:"output-format-parallel-formatting",level:2},{value:"min_chunk_bytes_for_parallel_parsing",id:"min-chunk-bytes-for-parallel-parsing",level:2},{value:"merge_selecting_sleep_ms",id:"merge_selecting_sleep_ms",level:2},{value:"parallel_distributed_insert_select",id:"parallel_distributed_insert_select",level:2},{value:"insert_distributed_sync",id:"insert_distributed_sync",level:2},{value:"insert_shard_id",id:"insert_shard_id",level:2},{value:"use_compact_format_in_distributed_parts_names",id:"use_compact_format_in_distributed_parts_names",level:2},{value:"background_buffer_flush_schedule_pool_size",id:"background_buffer_flush_schedule_pool_size",level:2},{value:"background_move_pool_size",id:"background_move_pool_size",level:2},{value:"background_schedule_pool_size",id:"background_schedule_pool_size",level:2},{value:"background_fetches_pool_size",id:"background_fetches_pool_size",level:2},{value:"always_fetch_merged_part",id:"always_fetch_merged_part",level:2},{value:"background_distributed_schedule_pool_size",id:"background_distributed_schedule_pool_size",level:2},{value:"background_message_broker_schedule_pool_size",id:"background_message_broker_schedule_pool_size",level:2},{value:"validate_polygons",id:"validate_polygons",level:2},{value:"transform_null_in",id:"transform_null_in",level:2},{value:"low_cardinality_max_dictionary_size",id:"low_cardinality_max_dictionary_size",level:2},{value:"low_cardinality_use_single_dictionary_for_part",id:"low_cardinality_use_single_dictionary_for_part",level:2},{value:"low_cardinality_allow_in_native_format",id:"low_cardinality_allow_in_native_format",level:2},{value:"allow_suspicious_low_cardinality_types",id:"allow_suspicious_low_cardinality_types",level:2},{value:"min_insert_block_size_rows_for_materialized_views",id:"min-insert-block-size-rows-for-materialized-views",level:2},{value:"min_insert_block_size_bytes_for_materialized_views",id:"min-insert-block-size-bytes-for-materialized-views",level:2},{value:"optimize_read_in_order",id:"optimize_read_in_order",level:2},{value:"optimize_aggregation_in_order",id:"optimize_aggregation_in_order",level:2},{value:"mutations_sync",id:"mutations_sync",level:2},{value:"ttl_only_drop_parts",id:"ttl_only_drop_parts",level:2},{value:"lock_acquire_timeout",id:"lock_acquire_timeout",level:2},{value:"cast_keep_nullable",id:"cast_keep_nullable",level:2},{value:"system_events_show_zero_values",id:"system_events_show_zero_values",level:2},{value:"allow_nullable_key",id:"allow-nullable-key",level:2},{value:"aggregate_functions_null_for_empty",id:"aggregate_functions_null_for_empty",level:2},{value:"union_default_mode",id:"union-default-mode",level:2},{value:"default_table_engine",id:"default_table_engine",level:2},{value:"data_type_default_nullable",id:"data_type_default_nullable",level:2},{value:"execute_merges_on_single_replica_time_threshold",id:"execute-merges-on-single-replica-time-threshold",level:2},{value:"max_final_threads",id:"max-final-threads",level:2},{value:"opentelemetry_start_trace_probability",id:"opentelemetry-start-trace-probability",level:2},{value:"optimize_on_insert",id:"optimize-on-insert",level:2},{value:"engine_file_empty_if_not_exists",id:"engine-file-empty_if-not-exists",level:2},{value:"engine_file_truncate_on_insert",id:"engine-file-truncate-on-insert",level:2},{value:"s3_truncate_on_insert",id:"s3_truncate_on_insert",level:2},{value:"hdfs_truncate_on_insert",id:"hdfs_truncate_on_insert",level:2},{value:"engine_file_allow_create_multiple_files",id:"engine_file_allow_create_multiple_files",level:2},{value:"s3_create_new_file_on_insert",id:"s3_create_new_file_on_insert",level:2},{value:"hdfs_create_new_file_on_insert",id:"hdfs_create_new_file_on_insert",level:2},{value:"allow_experimental_geo_types",id:"allow-experimental-geo-types",level:2},{value:"database_atomic_wait_for_drop_and_detach_synchronously",id:"database_atomic_wait_for_drop_and_detach_synchronously",level:2},{value:"show_table_uuid_in_table_create_query_if_not_nil",id:"show_table_uuid_in_table_create_query_if_not_nil",level:2},{value:"allow_experimental_live_view",id:"allow-experimental-live-view",level:2},{value:"live_view_heartbeat_interval",id:"live-view-heartbeat-interval",level:2},{value:"max_live_view_insert_blocks_before_refresh",id:"max-live-view-insert-blocks-before-refresh",level:2},{value:"periodic_live_view_refresh",id:"periodic-live-view-refresh",level:2},{value:"http_connection_timeout",id:"http_connection_timeout",level:2},{value:"http_send_timeout",id:"http_send_timeout",level:2},{value:"http_receive_timeout",id:"http_receive_timeout",level:2},{value:"check_query_single_value_result",id:"check_query_single_value_result",level:2},{value:"prefer_column_name_to_alias",id:"prefer-column-name-to-alias",level:2},{value:"limit",id:"limit",level:2},{value:"offset",id:"offset",level:2},{value:"optimize_syntax_fuse_functions",id:"optimize_syntax_fuse_functions",level:2},{value:"optimize_rewrite_aggregate_function_with_if",id:"optimize_rewrite_aggregate_function_with_if",level:2},{value:"allow_experimental_database_replicated",id:"allow_experimental_database_replicated",level:2},{value:"database_replicated_initial_query_timeout_sec",id:"database_replicated_initial_query_timeout_sec",level:2},{value:"distributed_ddl_task_timeout",id:"distributed_ddl_task_timeout",level:2},{value:"distributed_ddl_output_mode",id:"distributed_ddl_output_mode",level:2},{value:"flatten_nested",id:"flatten-nested",level:2},{value:"external_table_functions_use_nulls",id:"external-table-functions-use-nulls",level:2},{value:"allow_experimental_projection_optimization",id:"allow-experimental-projection-optimization",level:2},{value:"force_optimize_projection",id:"force-optimize-projection",level:2},{value:"alter_sync",id:"alter-sync",level:2},{value:"replication_wait_for_inactive_replica_timeout",id:"replication-wait-for-inactive-replica-timeout",level:2},{value:"regexp_max_matches_per_row",id:"regexp-max-matches-per-row",level:2},{value:"http_max_single_read_retries",id:"http-max-single-read-retries",level:2},{value:"log_queries_probability",id:"log-queries-probability",level:2},{value:"short_circuit_function_evaluation",id:"short-circuit-function-evaluation",level:2},{value:"max_hyperscan_regexp_length",id:"max-hyperscan-regexp-length",level:2},{value:"max_hyperscan_regexp_total_length",id:"max-hyperscan-regexp-total-length",level:2},{value:"enable_positional_arguments",id:"enable-positional-arguments",level:2},{value:"enable_extended_results_for_datetime_functions",id:"enable-extended-results-for-datetime-functions",level:2},{value:"optimize_move_to_prewhere",id:"optimize_move_to_prewhere",level:2},{value:"optimize_move_to_prewhere_if_final",id:"optimize_move_to_prewhere_if_final",level:2},{value:"optimize_using_constraints",id:"optimize_using_constraints",level:2},{value:"optimize_append_index",id:"optimize_append_index",level:2},{value:"optimize_substitute_columns",id:"optimize_substitute_columns",level:2},{value:"describe_include_subcolumns",id:"describe_include_subcolumns",level:2},{value:"alter_partition_verbose_result",id:"alter-partition-verbose-result",level:2},{value:"min_bytes_to_use_mmap_io",id:"min-bytes-to-use-mmap-io",level:2},{value:"shutdown_wait_unfinished_queries",id:"shutdown_wait_unfinished_queries",level:2},{value:"shutdown_wait_unfinished",id:"shutdown_wait_unfinished",level:2},{value:"memory_overcommit_ratio_denominator",id:"memory_overcommit_ratio_denominator",level:2},{value:"memory_usage_overcommit_max_wait_microseconds",id:"memory_usage_overcommit_max_wait_microseconds",level:2},{value:"memory_overcommit_ratio_denominator_for_user",id:"memory_overcommit_ratio_denominator_for_user",level:2},{value:"Schema Inference settings",id:"schema-inference-settings",level:2},{value:"schema_inference_use_cache_for_file {schema_inference_use_cache_for_file}",id:"schema_inference_use_cache_for_file-schema_inference_use_cache_for_file",level:3},{value:"schema_inference_use_cache_for_s3 {schema_inference_use_cache_for_s3}",id:"schema_inference_use_cache_for_s3-schema_inference_use_cache_for_s3",level:3},{value:"schema_inference_use_cache_for_url {schema_inference_use_cache_for_url}",id:"schema_inference_use_cache_for_url-schema_inference_use_cache_for_url",level:3},{value:"schema_inference_use_cache_for_hdfs {schema_inference_use_cache_for_hdfs}",id:"schema_inference_use_cache_for_hdfs-schema_inference_use_cache_for_hdfs",level:3},{value:"schema_inference_cache_require_modification_time_for_url",id:"schema_inference_cache_require_modification_time_for_url",level:3},{value:"use_structure_from_insertion_table_in_table_functions {use_structure_from_insertion_table_in_table_functions}",id:"use_structure_from_insertion_table_in_table_functions-use_structure_from_insertion_table_in_table_functions",level:3},{value:"compatibility",id:"compatibility",level:2},{value:"allow_settings_after_format_in_insert",id:"allow_settings_after_format_in_insert",level:2},{value:"final",id:"final",level:2},{value:"asterisk_include_materialized_columns",id:"asterisk_include_materialized_columns",level:2},{value:"asterisk_include_alias_columns",id:"asterisk_include_alias_columns",level:2}],p={toc:u},m="wrapper";function d(e){let{components:t,...l}=e;return(0,n.kt)(m,(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"core-settings"},"Core Settings"),(0,n.kt)("h2",{id:"additional_table_filters"},"additional_table_filters"),(0,n.kt)("p",null,"An additional filter expression that is applied after reading\nfrom the specified table."),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"insert into table_1 values (1, 'a'), (2, 'bb'), (3, 'ccc'), (4, 'dddd');\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500x\u2500\u252c\u2500y\u2500\u2500\u2500\u2500\u2510\n\u2502 1 \u2502 a    \u2502\n\u2502 2 \u2502 bb   \u2502\n\u2502 3 \u2502 ccc  \u2502\n\u2502 4 \u2502 dddd \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM table_1\nSETTINGS additional_table_filters = (('table_1', 'x != 2'))\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500x\u2500\u252c\u2500y\u2500\u2500\u2500\u2500\u2510\n\u2502 1 \u2502 a    \u2502\n\u2502 3 \u2502 ccc  \u2502\n\u2502 4 \u2502 dddd \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"allow_nondeterministic_mutations"},"allow_nondeterministic_mutations"),(0,n.kt)("p",null,"User-level setting that allows mutations on replicated tables to make use of non-deterministic functions such as ",(0,n.kt)("inlineCode",{parentName:"p"},"dictGet"),"."),(0,n.kt)("p",null,"Given that, for example, dictionaries, can be out of sync across nodes, mutations that pull values from them are disallowed on replicated tables by default. Enabling this setting allows this behavior, making it the user's responsibility to ensure that the data used is in sync across all nodes."),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml"},"<profiles>\n    <default>\n        <allow_nondeterministic_mutations>1</allow_nondeterministic_mutations>\n\n        \x3c!-- ... --\x3e\n    </default>\n\n    \x3c!-- ... --\x3e\n\n</profiles>\n")),(0,n.kt)("h2",{id:"distributed-product-mode"},"distributed_product_mode"),(0,n.kt)("p",null,"Changes the behaviour of ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/operators/in"},"distributed subqueries"),"."),(0,n.kt)("p",null,"ClickHouse applies this setting when the query contains the product of distributed tables, i.e.\xa0when the query for a distributed table contains a non-GLOBAL subquery for the distributed table."),(0,n.kt)("p",null,"Restrictions:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Only applied for IN and JOIN subqueries."),(0,n.kt)("li",{parentName:"ul"},"Only if the FROM section uses a distributed table containing more than one shard."),(0,n.kt)("li",{parentName:"ul"},"If the subquery concerns a distributed table containing more than one shard."),(0,n.kt)("li",{parentName:"ul"},"Not used for a table-valued ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/remote"},"remote")," function.")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"deny")," \u2014 Default value. Prohibits using these types of subqueries (returns the \u201cDouble-distributed in/JOIN subqueries is denied\u201d exception)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"local")," \u2014 Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal ",(0,n.kt)("inlineCode",{parentName:"li"},"IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"JOIN.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"global")," \u2014 Replaces the ",(0,n.kt)("inlineCode",{parentName:"li"},"IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"JOIN")," query with ",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL JOIN.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"allow")," \u2014 Allows the use of these types of subqueries.")),(0,n.kt)("h2",{id:"prefer-global-in-and-join"},"prefer_global_in_and_join"),(0,n.kt)("p",null,"Enables the replacement of ",(0,n.kt)("inlineCode",{parentName:"p"},"IN"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"JOIN")," operators with ",(0,n.kt)("inlineCode",{parentName:"p"},"GLOBAL IN"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"GLOBAL JOIN"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled. ",(0,n.kt)("inlineCode",{parentName:"li"},"IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"JOIN")," operators are not replaced with ",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL JOIN"),"."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled. ",(0,n.kt)("inlineCode",{parentName:"li"},"IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"JOIN")," operators are replaced with ",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL JOIN"),".")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Usage")),(0,n.kt)("p",null,"Although ",(0,n.kt)("inlineCode",{parentName:"p"},"SET distributed_product_mode=global"),"\xa0can change the queries behavior for the distributed tables, it's not suitable for local tables or tables from external resources. Here is when the ",(0,n.kt)("inlineCode",{parentName:"p"},"prefer_global_in_and_join")," setting comes into play."),(0,n.kt)("p",null,"For example, we have query serving nodes that contain local tables, which are not suitable for distribution. We need to scatter their data on the fly during distributed processing with the ",(0,n.kt)("inlineCode",{parentName:"p"},"GLOBAL")," keyword \u2014 ",(0,n.kt)("inlineCode",{parentName:"p"},"GLOBAL IN"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"GLOBAL JOIN"),"."),(0,n.kt)("p",null,"Another use case of ",(0,n.kt)("inlineCode",{parentName:"p"},"prefer_global_in_and_join"),"\xa0is accessing tables created by external engines. This setting helps to reduce the number of calls to external sources while joining such tables: only one call per query."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/operators/in/#select-distributed-subqueries"},"Distributed subqueries")," for more information on how to use ",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL IN"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"GLOBAL JOIN"))),(0,n.kt)("h2",{id:"enable-optimize-predicate-expression"},"enable_optimize_predicate_expression"),(0,n.kt)("p",null,"Turns on predicate pushdown in ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,n.kt)("p",null,"Predicate pushdown may significantly reduce network traffic for distributed queries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("p",null,"Usage"),(0,n.kt)("p",null,"Consider the following queries:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT count() FROM test_table WHERE date = '2018-10-10'")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT count() FROM (SELECT * FROM test_table) WHERE date = '2018-10-10'"))),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"enable_optimize_predicate_expression = 1"),", then the execution time of these queries is equal because ClickHouse applies ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE")," to the subquery when processing it."),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"enable_optimize_predicate_expression = 0"),", then the execution time of the second query is much longer because the ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE")," clause applies to all the data after the subquery finishes."),(0,n.kt)("h2",{id:"settings-fallback_to_stale_replicas_for_distributed_queries"},"fallback_to_stale_replicas_for_distributed_queries"),(0,n.kt)("p",null,"Forces a query to an out-of-date replica if updated data is not available. See ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"Replication"),"."),(0,n.kt)("p",null,"ClickHouse selects the most relevant from the outdated replicas of the table."),(0,n.kt)("p",null,"Used when performing ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," from a distributed table that points to replicated tables."),(0,n.kt)("p",null,"By default, 1 (enabled)."),(0,n.kt)("h2",{id:"settings-force_index_by_date"},"force_index_by_date"),(0,n.kt)("p",null,"Disables query execution if the index can\u2019t be used by date."),(0,n.kt)("p",null,"Works with tables in the MergeTree family."),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"force_index_by_date=1"),", ClickHouse checks whether the query has a date key condition that can be used for restricting data ranges. If there is no suitable condition, it throws an exception. However, it does not check whether the condition reduces the amount of data to read. For example, the condition ",(0,n.kt)("inlineCode",{parentName:"p"},"Date != ' 2000-01-01 '")," is acceptable even when it matches all the data in the table (i.e., running the query requires a full scan). For more information about ranges of data in MergeTree tables, see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree"),"."),(0,n.kt)("h2",{id:"force-primary-key"},"force_primary_key"),(0,n.kt)("p",null,"Disables query execution if indexing by the primary key is not possible."),(0,n.kt)("p",null,"Works with tables in the MergeTree family."),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"force_primary_key=1"),", ClickHouse checks to see if the query has a primary key condition that can be used for restricting data ranges. If there is no suitable condition, it throws an exception. However, it does not check whether the condition reduces the amount of data to read. For more information about data ranges in MergeTree tables, see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree"),"."),(0,n.kt)("h2",{id:"settings-use_skip_indexes"},"use_skip_indexes"),(0,n.kt)("p",null,"Use data skipping indexes during query execution."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("h2",{id:"settings-force_data_skipping_indices"},"force_data_skipping_indices"),(0,n.kt)("p",null,"Disables query execution if passed data skipping indices wasn't used."),(0,n.kt)("p",null,"Consider the following example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE data\n(\n    key Int,\n    d1 Int,\n    d1_null Nullable(Int),\n    INDEX d1_idx d1 TYPE minmax GRANULARITY 1,\n    INDEX d1_null_idx assumeNotNull(d1_null) TYPE minmax GRANULARITY 1\n)\nEngine=MergeTree()\nORDER BY key;\n\nSELECT * FROM data_01515;\nSELECT * FROM data_01515 SETTINGS force_data_skipping_indices=''; -- query will produce CANNOT_PARSE_TEXT error.\nSELECT * FROM data_01515 SETTINGS force_data_skipping_indices='d1_idx'; -- query will produce INDEX_NOT_USED error.\nSELECT * FROM data_01515 WHERE d1 = 0 SETTINGS force_data_skipping_indices='d1_idx'; -- Ok.\nSELECT * FROM data_01515 WHERE d1 = 0 SETTINGS force_data_skipping_indices='`d1_idx`'; -- Ok (example of full featured parser).\nSELECT * FROM data_01515 WHERE d1 = 0 SETTINGS force_data_skipping_indices='`d1_idx`, d1_null_idx'; -- query will produce INDEX_NOT_USED error, since d1_null_idx is not used.\nSELECT * FROM data_01515 WHERE d1 = 0 AND assumeNotNull(d1_null) = 0 SETTINGS force_data_skipping_indices='`d1_idx`, d1_null_idx'; -- Ok.\n")),(0,n.kt)("p",null,"Works with tables in the MergeTree family."),(0,n.kt)("h2",{id:"convert_query_to_cnf"},"convert_query_to_cnf"),(0,n.kt)("p",null,"When set to ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),", a ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," query will be converted to conjuctive normal form (CNF). There are scenarios where rewriting a query in CNF may execute faster (view this ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/issues/11749"},"Github issue")," for an explanation)."),(0,n.kt)("p",null,"For example, notice how the following ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," query is not modified (the default behavior):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SYNTAX\nSELECT *\nFROM\n(\n    SELECT number AS x\n    FROM numbers(20)\n) AS a\nWHERE ((x >= 1) AND (x <= 5)) OR ((x >= 10) AND (x <= 15))\nSETTINGS convert_query_to_cnf = false;\n")),(0,n.kt)("p",null,"The result is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 SELECT x                                                       \u2502\n\u2502 FROM                                                           \u2502\n\u2502 (                                                              \u2502\n\u2502     SELECT number AS x                                         \u2502\n\u2502     FROM numbers(20)                                           \u2502\n\u2502     WHERE ((x >= 1) AND (x <= 5)) OR ((x >= 10) AND (x <= 15)) \u2502\n\u2502 ) AS a                                                         \u2502\n\u2502 WHERE ((x >= 1) AND (x <= 5)) OR ((x >= 10) AND (x <= 15))     \u2502\n\u2502 SETTINGS convert_query_to_cnf = 0                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Let's set ",(0,n.kt)("inlineCode",{parentName:"p"},"convert_query_to_cnf")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," and see what changes:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SYNTAX\nSELECT *\nFROM\n(\n    SELECT number AS x\n    FROM numbers(20)\n) AS a\nWHERE ((x >= 1) AND (x <= 5)) OR ((x >= 10) AND (x <= 15))\nSETTINGS convert_query_to_cnf = true;\n")),(0,n.kt)("p",null,"Notice the ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE")," clause is rewritten in CNF, but the result set is the identical - the Boolean logic is unchanged:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 SELECT x                                                                                                              \u2502\n\u2502 FROM                                                                                                                  \u2502\n\u2502 (                                                                                                                     \u2502\n\u2502     SELECT number AS x                                                                                                \u2502\n\u2502     FROM numbers(20)                                                                                                  \u2502\n\u2502     WHERE ((x <= 15) OR (x <= 5)) AND ((x <= 15) OR (x >= 1)) AND ((x >= 10) OR (x <= 5)) AND ((x >= 10) OR (x >= 1)) \u2502\n\u2502 ) AS a                                                                                                                \u2502\n\u2502 WHERE ((x >= 10) OR (x >= 1)) AND ((x >= 10) OR (x <= 5)) AND ((x <= 15) OR (x >= 1)) AND ((x <= 15) OR (x <= 5))     \u2502\n\u2502 SETTINGS convert_query_to_cnf = 1                                                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Possible values: true, false"),(0,n.kt)("p",null,"Default value: false"),(0,n.kt)("h2",{id:"fsync-metadata"},"fsync_metadata"),(0,n.kt)("p",null,"Enables or disables ",(0,n.kt)("a",{parentName:"p",href:"http://pubs.opengroup.org/onlinepubs/9699919799/functions/fsync.html"},"fsync")," when writing ",(0,n.kt)("inlineCode",{parentName:"p"},".sql")," files. Enabled by default."),(0,n.kt)("p",null,"It makes sense to disable it if the server has millions of tiny tables that are constantly being created and destroyed."),(0,n.kt)("h2",{id:"settings-function_range_max_elements_in_block"},"function_range_max_elements_in_block"),(0,n.kt)("p",null,"Sets the safety threshold for data volume generated by function ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/array-functions/#range"},"range"),". Defines the maximum number of values generated by function per block of data (sum of array sizes for every row in a block)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"500,000,000"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#setting-max_block_size"},"max_block_size")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#min-insert-block-size-rows"},"min_insert_block_size_rows"))),(0,n.kt)("h2",{id:"settings-enable_http_compression"},"enable_http_compression"),(0,n.kt)("p",null,"Enables or disables data compression in the response to an HTTP request."),(0,n.kt)("p",null,"For more information, read the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/http"},"HTTP interface description"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"settings-http_zlib_compression_level"},"http_zlib_compression_level"),(0,n.kt)("p",null,"Sets the level of data compression in the response to an HTTP request if ",(0,n.kt)("a",{parentName:"p",href:"#settings-enable_http_compression"},"enable_http_compression = 1"),"."),(0,n.kt)("p",null,"Possible values: Numbers from 1 to 9."),(0,n.kt)("p",null,"Default value: 3."),(0,n.kt)("h2",{id:"settings-http_native_compression_disable_checksumming_on_decompress"},"http_native_compression_disable_checksumming_on_decompress"),(0,n.kt)("p",null,"Enables or disables checksum verification when decompressing the HTTP POST data from the client. Used only for ClickHouse native compression format (not used with ",(0,n.kt)("inlineCode",{parentName:"p"},"gzip")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"deflate"),")."),(0,n.kt)("p",null,"For more information, read the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/http"},"HTTP interface description"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"http-max-uri-size"},"http_max_uri_size"),(0,n.kt)("p",null,"Sets the maximum URI length of an HTTP request."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: 1048576."),(0,n.kt)("h2",{id:"table_function_remote_max_addresses"},"table_function_remote_max_addresses"),(0,n.kt)("p",null,"Sets the maximum number of addresses generated from patterns for the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/remote"},"remote")," function."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1000"),"."),(0,n.kt)("h2",{id:"glob_expansion_max_elements"},"glob_expansion_max_elements"),(0,n.kt)("p",null,"Sets the maximum number of addresses generated from patterns for external storages and table functions (like ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/url"},"url"),") except the ",(0,n.kt)("inlineCode",{parentName:"p"},"remote")," function."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1000"),"."),(0,n.kt)("h2",{id:"settings-send_progress_in_http_headers"},"send_progress_in_http_headers"),(0,n.kt)("p",null,"Enables or disables ",(0,n.kt)("inlineCode",{parentName:"p"},"X-ClickHouse-Progress")," HTTP response headers in ",(0,n.kt)("inlineCode",{parentName:"p"},"clickhouse-server")," responses."),(0,n.kt)("p",null,"For more information, read the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/http"},"HTTP interface description"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"setting-max_http_get_redirects"},"max_http_get_redirects"),(0,n.kt)("p",null,"Limits the maximum number of HTTP GET redirect hops for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/url"},"URL"),"-engine tables. The setting applies to both types of tables: those created by the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/table"},"CREATE TABLE")," query and by the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/url"},"url")," table function."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer number of hops."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 No hops allowed.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"insert_null_as_default"},"insert_null_as_default"),(0,n.kt)("p",null,"Enables or disables the insertion of ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/table/#create-default-values"},"default values")," instead of ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax/#null-literal"},"NULL")," into columns with not ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#data_type-nullable"},"nullable")," data type.\nIf column type is not nullable and this setting is disabled, then inserting ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL")," causes an exception. If column type is nullable, then ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL")," values are inserted as is, regardless of this setting."),(0,n.kt)("p",null,"This setting is applicable to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/insert-into/#inserting-the-results-of-select"},"INSERT ... SELECT")," queries. Note that ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," subqueries may be concatenated with ",(0,n.kt)("inlineCode",{parentName:"p"},"UNION ALL")," clause."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Inserting ",(0,n.kt)("inlineCode",{parentName:"li"},"NULL")," into a not nullable column causes an exception."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Default column value is inserted instead of ",(0,n.kt)("inlineCode",{parentName:"li"},"NULL"),".")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"settings-join_default_strictness"},"join_default_strictness"),(0,n.kt)("p",null,"Sets default strictness for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join/#select-join"},"JOIN clauses"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ALL")," \u2014 If the right table has several matching rows, ClickHouse creates a ",(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Cartesian_product"},"Cartesian product")," from matching rows. This is the normal ",(0,n.kt)("inlineCode",{parentName:"li"},"JOIN")," behaviour from standard SQL."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ANY")," \u2014 If the right table has several matching rows, only the first one found is joined. If the right table has only one matching row, the results of ",(0,n.kt)("inlineCode",{parentName:"li"},"ANY")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"ALL")," are the same."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ASOF")," \u2014 For joining sequences with an uncertain match."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Empty string")," \u2014 If ",(0,n.kt)("inlineCode",{parentName:"li"},"ALL")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"ANY")," is not specified in the query, ClickHouse throws an exception.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"ALL"),"."),(0,n.kt)("h2",{id:"settings-join_algorithm"},"join_algorithm"),(0,n.kt)("p",null,"Specifies which ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join"},"JOIN")," algorithm is used."),(0,n.kt)("p",null,"Several algorithms can be specified, and an available one would be chosen for a particular query based on kind/strictness and table engine."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"default"),(0,n.kt)("p",{parentName:"li"},"This is the equivalent of ",(0,n.kt)("inlineCode",{parentName:"p"},"hash")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"direct"),", if possible (same as ",(0,n.kt)("inlineCode",{parentName:"p"},"direct,hash"),")")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"grace_hash"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_join#Grace_hash_join"},"Grace hash join")," is used.  Grace hash provides an algorithm option that provides performant complex joins while limiting memory use."),(0,n.kt)("p",{parentName:"li"},"The first phase of a grace join reads the right table and splits it into N buckets depending on the hash value of key columns (initially, N is ",(0,n.kt)("inlineCode",{parentName:"p"},"grace_hash_join_initial_buckets"),"). This is done in a way to ensure that each bucket can be processed independently. Rows from the first bucket are added to an in-memory hash table while the others are saved to disk. If the hash table grows beyond the memory limit (e.g., as set by ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/query-complexity/#settings-max_bytes_in_join"},(0,n.kt)("inlineCode",{parentName:"a"},"max_bytes_in_join")),"), the number of buckets is increased and the assigned bucket for each row. Any rows which don\u2019t belong to the current bucket are flushed and reassigned.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"hash"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_join"},"Hash join algorithm")," is used. The most generic implementation that supports all combinations of kind and strictness and multiple join keys that are combined with ",(0,n.kt)("inlineCode",{parentName:"p"},"OR")," in the ",(0,n.kt)("inlineCode",{parentName:"p"},"JOIN ON")," section.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"parallel_hash"),(0,n.kt)("p",{parentName:"li"},"A variation of ",(0,n.kt)("inlineCode",{parentName:"p"},"hash")," join that splits the data into buckets and builds several hashtables instead of one concurrently to speed up this process."),(0,n.kt)("p",{parentName:"li"},"When using the ",(0,n.kt)("inlineCode",{parentName:"p"},"hash")," algorithm, the right part of ",(0,n.kt)("inlineCode",{parentName:"p"},"JOIN")," is uploaded into RAM.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"partial_merge"),(0,n.kt)("p",{parentName:"li"},"A variation of the ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Sort-merge_join"},"sort-merge algorithm"),", where only the right table is fully sorted."),(0,n.kt)("p",{parentName:"li"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"RIGHT JOIN")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"FULL JOIN")," are supported only with ",(0,n.kt)("inlineCode",{parentName:"p"},"ALL")," strictness (",(0,n.kt)("inlineCode",{parentName:"p"},"SEMI"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"ANTI"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"ANY"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"ASOF")," are not supported)."),(0,n.kt)("p",{parentName:"li"},"When using the ",(0,n.kt)("inlineCode",{parentName:"p"},"partial_merge")," algorithm, ClickHouse sorts the data and dumps it to the disk. The ",(0,n.kt)("inlineCode",{parentName:"p"},"partial_merge")," algorithm in ClickHouse differs slightly from the classic realization. First, ClickHouse sorts the right table by joining keys in blocks and creates a min-max index for sorted blocks. Then it sorts parts of the left table by the ",(0,n.kt)("inlineCode",{parentName:"p"},"join key")," and joins them over the right table. The min-max index is also used to skip unneeded right table blocks.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"direct"),(0,n.kt)("p",{parentName:"li"},"This algorithm can be applied when the storage for the right table supports key-value requests."),(0,n.kt)("p",{parentName:"li"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"direct")," algorithm performs a lookup in the right table using rows from the left table as keys. It's supported only by special storage such as ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/dictionary/#dictionary"},"Dictionary")," or ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/integrations/embedded-rocksdb"},"EmbeddedRocksDB")," and only the ",(0,n.kt)("inlineCode",{parentName:"p"},"LEFT")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"INNER")," JOINs.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"auto"),(0,n.kt)("p",{parentName:"li"},"When set to ",(0,n.kt)("inlineCode",{parentName:"p"},"auto"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"hash")," join is tried first, and the algorithm is switched on the fly to another algorithm if the memory limit is violated.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"full_sorting_merge"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Sort-merge_join"},"Sort-merge algorithm")," with full sorting joined tables before joining.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"prefer_partial_merge"),(0,n.kt)("p",{parentName:"li"},"ClickHouse always tries to use ",(0,n.kt)("inlineCode",{parentName:"p"},"partial_merge")," join if possible, otherwise, it uses ",(0,n.kt)("inlineCode",{parentName:"p"},"hash"),". ",(0,n.kt)("em",{parentName:"p"},"Deprecated"),", same as ",(0,n.kt)("inlineCode",{parentName:"p"},"partial_merge,hash"),"."))),(0,n.kt)("h2",{id:"settings-join_any_take_last_row"},"join_any_take_last_row"),(0,n.kt)("p",null,"Changes the behaviour of join operations with ",(0,n.kt)("inlineCode",{parentName:"p"},"ANY")," strictness."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"This setting applies only for ",(0,n.kt)("inlineCode",{parentName:"p"},"JOIN")," operations with ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/join"},"Join")," engine tables.")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 If the right table has more than one matching row, only the first one found is joined."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 If the right table has more than one matching row, only the last one found is joined.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join/#select-join"},"JOIN clause")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/join"},"Join table engine")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-join_default_strictness"},"join_default_strictness"))),(0,n.kt)("h2",{id:"join_use_nulls"},"join_use_nulls"),(0,n.kt)("p",null,"Sets the type of ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join"},"JOIN")," behaviour. When merging tables, empty cells may appear. ClickHouse fills them differently based on this setting."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The empty cells are filled with the default value of the corresponding field type."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"JOIN")," behaves the same way as in standard SQL. The type of the corresponding field is converted to ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#data_type-nullable"},"Nullable"),", and empty cells are filled with ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax"},"NULL"),".")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"group_by_use_nulls"},"group_by_use_nulls"),(0,n.kt)("p",null,"Changes the way the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/group-by"},"GROUP BY clause")," treats the types of aggregation keys.\nWhen the ",(0,n.kt)("inlineCode",{parentName:"p"},"ROLLUP"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"CUBE"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"GROUPING SETS")," specifiers are used, some aggregation keys may not be used to produce some result rows.\nColumns for these keys are filled with either default value or ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL")," in corresponding rows depending on this setting."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The default value for the aggregation key type is used to produce missing values."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ClickHouse executes ",(0,n.kt)("inlineCode",{parentName:"li"},"GROUP BY")," the same way as the SQL standard says. The types of aggregation keys are converted to ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#data_type-nullable"},"Nullable"),". Columns for corresponding aggregation keys are filled with ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax"},"NULL")," for rows that didn't use it.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/group-by"},"GROUP BY clause"))),(0,n.kt)("h2",{id:"partial_merge_join_optimizations"},"partial_merge_join_optimizations"),(0,n.kt)("p",null,"Disables optimizations in partial merge join algorithm for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join"},"JOIN")," queries."),(0,n.kt)("p",null,"By default, this setting enables improvements that could lead to wrong results. If you see suspicious results in your queries, disable optimizations by this setting. Optimizations can be different in different versions of the ClickHouse server."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Optimizations disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Optimizations enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("h2",{id:"partial_merge_join_rows_in_right_blocks"},"partial_merge_join_rows_in_right_blocks"),(0,n.kt)("p",null,"Limits sizes of right-hand join data blocks in partial merge join algorithm for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join"},"JOIN")," queries."),(0,n.kt)("p",null,"ClickHouse server:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Splits right-hand join data into blocks with up to the specified number of rows."),(0,n.kt)("li",{parentName:"ol"},"Indexes each block with its minimum and maximum values."),(0,n.kt)("li",{parentName:"ol"},"Unloads prepared blocks to disk if it is possible.")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer. Recommended range of values: ","[","1000, 100000","]",".")),(0,n.kt)("p",null,"Default value: 65536."),(0,n.kt)("h2",{id:"join_on_disk_max_files_to_merge"},"join_on_disk_max_files_to_merge"),(0,n.kt)("p",null,"Limits the number of files allowed for parallel sorting in MergeJoin operations when they are executed on disk."),(0,n.kt)("p",null,"The bigger the value of the setting, the more RAM is used and the less disk I/O is needed."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer, starting from 2.")),(0,n.kt)("p",null,"Default value: 64."),(0,n.kt)("h2",{id:"any_join_distinct_right_table_keys"},"any_join_distinct_right_table_keys"),(0,n.kt)("p",null,"Enables legacy ClickHouse server behaviour in ",(0,n.kt)("inlineCode",{parentName:"p"},"ANY INNER|LEFT JOIN")," operations."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Use this setting only for backward compatibility if your use cases depend on legacy ",(0,n.kt)("inlineCode",{parentName:"p"},"JOIN")," behaviour.")),(0,n.kt)("p",null,"When the legacy behaviour is enabled:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Results of ",(0,n.kt)("inlineCode",{parentName:"li"},"t1 ANY LEFT JOIN t2")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"t2 ANY RIGHT JOIN t1")," operations are not equal because ClickHouse uses the logic with many-to-one left-to-right table keys mapping."),(0,n.kt)("li",{parentName:"ul"},"Results of ",(0,n.kt)("inlineCode",{parentName:"li"},"ANY INNER JOIN")," operations contain all rows from the left table like the ",(0,n.kt)("inlineCode",{parentName:"li"},"SEMI LEFT JOIN")," operations do.")),(0,n.kt)("p",null,"When the legacy behaviour is disabled:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Results of ",(0,n.kt)("inlineCode",{parentName:"li"},"t1 ANY LEFT JOIN t2")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"t2 ANY RIGHT JOIN t1")," operations are equal because ClickHouse uses the logic which provides one-to-many keys mapping in ",(0,n.kt)("inlineCode",{parentName:"li"},"ANY RIGHT JOIN")," operations."),(0,n.kt)("li",{parentName:"ul"},"Results of ",(0,n.kt)("inlineCode",{parentName:"li"},"ANY INNER JOIN")," operations contain one row per key from both the left and right tables.")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Legacy behaviour is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Legacy behaviour is enabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/join/#join-settings"},"JOIN strictness"))),(0,n.kt)("h2",{id:"temporary_files_codec"},"temporary_files_codec"),(0,n.kt)("p",null,"Sets compression codec for temporary files used in sorting and joining operations on disk."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"LZ4 \u2014 ",(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/LZ4_(compression_algorithm)"},"LZ4")," compression is applied."),(0,n.kt)("li",{parentName:"ul"},"NONE \u2014 No compression is applied.")),(0,n.kt)("p",null,"Default value: LZ4."),(0,n.kt)("h2",{id:"setting-max_block_size"},"max_block_size"),(0,n.kt)("p",null,"In ClickHouse, data is processed by blocks (sets of column parts). The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block. The ",(0,n.kt)("inlineCode",{parentName:"p"},"max_block_size")," setting is a recommendation for what size of the block (in a count of rows) to load from tables. The block size shouldn\u2019t be too small, so that the expenditures on each block are still noticeable, but not too large so that the query with LIMIT that is completed after the first block is processed quickly. The goal is to avoid consuming too much memory when extracting a large number of columns in multiple threads and to preserve at least some cache locality."),(0,n.kt)("p",null,"Default value: 65,536."),(0,n.kt)("p",null,"Blocks the size of ",(0,n.kt)("inlineCode",{parentName:"p"},"max_block_size")," are not always loaded from the table. If it is obvious that less data needs to be retrieved, a smaller block is processed."),(0,n.kt)("h2",{id:"preferred-block-size-bytes"},"preferred_block_size_bytes"),(0,n.kt)("p",null,"Used for the same purpose as ",(0,n.kt)("inlineCode",{parentName:"p"},"max_block_size"),", but it sets the recommended block size in bytes by adapting it to the number of rows in the block.\nHowever, the block size cannot be more than ",(0,n.kt)("inlineCode",{parentName:"p"},"max_block_size")," rows.\nBy default: 1,000,000. It only works when reading from MergeTree engines."),(0,n.kt)("h2",{id:"setting-merge-tree-min-rows-for-concurrent-read"},"merge_tree_min_rows_for_concurrent_read"),(0,n.kt)("p",null,"If the number of rows to be read from a file of a ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," table exceeds ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_tree_min_rows_for_concurrent_read")," then ClickHouse tries to perform a concurrent reading from this file on several threads."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"163840"),"."),(0,n.kt)("h2",{id:"merge-tree-min-rows-for-concurrent-read-for-remote-filesystem"},"merge_tree_min_rows_for_concurrent_read_for_remote_filesystem"),(0,n.kt)("p",null,"The minimum number of lines to read from one file before the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," engine can parallelize reading, when reading from remote filesystem."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"163840"),"."),(0,n.kt)("h2",{id:"setting-merge-tree-min-bytes-for-concurrent-read"},"merge_tree_min_bytes_for_concurrent_read"),(0,n.kt)("p",null,"If the number of bytes to read from one file of a ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree"),"-engine table exceeds ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_tree_min_bytes_for_concurrent_read"),", then ClickHouse tries to concurrently read from this file in several threads."),(0,n.kt)("p",null,"Possible value:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"251658240"),"."),(0,n.kt)("h2",{id:"merge-tree-min-bytes-for-concurrent-read-for-remote-filesystem"},"merge_tree_min_bytes_for_concurrent_read_for_remote_filesystem"),(0,n.kt)("p",null,"The minimum number of bytes to read from one file before ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," engine can parallelize reading, when reading from remote filesystem."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"251658240"),"."),(0,n.kt)("h2",{id:"setting-merge-tree-min-rows-for-seek"},"merge_tree_min_rows_for_seek"),(0,n.kt)("p",null,"If the distance between two data blocks to be read in one file is less than ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_tree_min_rows_for_seek")," rows, then ClickHouse does not seek through the file but reads the data sequentially."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"setting-merge-tree-min-bytes-for-seek"},"merge_tree_min_bytes_for_seek"),(0,n.kt)("p",null,"If the distance between two data blocks to be read in one file is less than ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_tree_min_bytes_for_seek")," bytes, then ClickHouse sequentially reads a range of file that contains both blocks, thus avoiding extra seek."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"setting-merge-tree-coarse-index-granularity"},"merge_tree_coarse_index_granularity"),(0,n.kt)("p",null,"When searching for data, ClickHouse checks the data marks in the index file. If ClickHouse finds that required keys are in some range, it divides this range into ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_tree_coarse_index_granularity")," subranges and searches the required keys there recursively."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive even integer.")),(0,n.kt)("p",null,"Default value: 8."),(0,n.kt)("h2",{id:"setting-merge-tree-max-rows-to-use-cache"},"merge_tree_max_rows_to_use_cache"),(0,n.kt)("p",null,"If ClickHouse should read more than ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_tree_max_rows_to_use_cache")," rows in one query, it does not use the cache of uncompressed blocks."),(0,n.kt)("p",null,"The cache of uncompressed blocks stores data extracted for queries. ClickHouse uses this cache to speed up responses to repeated small queries. This setting protects the cache from trashing by queries that read a large amount of data. The ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings/#server-settings-uncompressed_cache_size"},"uncompressed_cache_size")," server setting defines the size of the cache of uncompressed blocks."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 128 \u2715 8192."),(0,n.kt)("h2",{id:"setting-merge-tree-max-bytes-to-use-cache"},"merge_tree_max_bytes_to_use_cache"),(0,n.kt)("p",null,"If ClickHouse should read more than ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_tree_max_bytes_to_use_cache")," bytes in one query, it does not use the cache of uncompressed blocks."),(0,n.kt)("p",null,"The cache of uncompressed blocks stores data extracted for queries. ClickHouse uses this cache to speed up responses to repeated small queries. This setting protects the cache from trashing by queries that read a large amount of data. The ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings/#server-settings-uncompressed_cache_size"},"uncompressed_cache_size")," server setting defines the size of the cache of uncompressed blocks."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 2013265920."),(0,n.kt)("h2",{id:"settings-min-bytes-to-use-direct-io"},"min_bytes_to_use_direct_io"),(0,n.kt)("p",null,"The minimum data volume required for using direct I/O access to the storage disk."),(0,n.kt)("p",null,"ClickHouse uses this setting when reading data from tables. If the total storage volume of all the data to be read exceeds ",(0,n.kt)("inlineCode",{parentName:"p"},"min_bytes_to_use_direct_io")," bytes, then ClickHouse reads the data from the storage disk with the ",(0,n.kt)("inlineCode",{parentName:"p"},"O_DIRECT")," option."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Direct I/O is disabled."),(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"network_compression_method"},"network_compression_method"),(0,n.kt)("p",null,"Sets the method of data compression that is used for communication between servers and between server and ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/cli"},"clickhouse-client"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"LZ4")," \u2014 sets LZ4 compression method."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ZSTD")," \u2014 sets ZSTD compression method.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"LZ4"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#network_zstd_compression_level"},"network_zstd_compression_level"))),(0,n.kt)("h2",{id:"network_zstd_compression_level"},"network_zstd_compression_level"),(0,n.kt)("p",null,"Adjusts the level of ZSTD compression. Used only when ",(0,n.kt)("a",{parentName:"p",href:"#network_compression_method"},"network_compression_method")," is set to ",(0,n.kt)("inlineCode",{parentName:"p"},"ZSTD"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer from 1 to 15.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"settings-log-queries"},"log_queries"),(0,n.kt)("p",null,"Setting up query logging."),(0,n.kt)("p",null,"Queries sent to ClickHouse with this setup are logged according to the rules in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings/#server_configuration_parameters-query-log"},"query_log")," server configuration parameter."),(0,n.kt)("p",null,"Example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"log_queries=1\n")),(0,n.kt)("h2",{id:"settings-log-queries-min-query-duration-ms"},"log_queries_min_query_duration_ms"),(0,n.kt)("p",null,"If enabled (non-zero), queries faster than the value of this setting will not be logged (you can think about this as a ",(0,n.kt)("inlineCode",{parentName:"p"},"long_query_time")," for ",(0,n.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html"},"MySQL Slow Query Log"),"), and this basically means that you will not find them in the following tables:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"system.query_log")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"system.query_thread_log"))),(0,n.kt)("p",null,"Only the queries with the following type will get to the log:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"QUERY_FINISH"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"EXCEPTION_WHILE_PROCESSING"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Type: milliseconds")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Default value: 0 (any query)"))),(0,n.kt)("h2",{id:"settings-log-queries-min-type"},"log_queries_min_type"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"query_log")," minimal type to log."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"QUERY_START")," (",(0,n.kt)("inlineCode",{parentName:"li"},"=1"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"QUERY_FINISH")," (",(0,n.kt)("inlineCode",{parentName:"li"},"=2"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"EXCEPTION_BEFORE_START")," (",(0,n.kt)("inlineCode",{parentName:"li"},"=3"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"EXCEPTION_WHILE_PROCESSING")," (",(0,n.kt)("inlineCode",{parentName:"li"},"=4"),")")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"QUERY_START"),"."),(0,n.kt)("p",null,"Can be used to limit which entities will go to ",(0,n.kt)("inlineCode",{parentName:"p"},"query_log"),", say you are interested only in errors, then you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"EXCEPTION_WHILE_PROCESSING"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"log_queries_min_type='EXCEPTION_WHILE_PROCESSING'\n")),(0,n.kt)("h2",{id:"settings-log-query-threads"},"log_query_threads"),(0,n.kt)("p",null,"Setting up query threads logging."),(0,n.kt)("p",null,"Query threads log into the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/query_thread_log"},"system.query_thread_log")," table. This setting has effect only when ",(0,n.kt)("a",{parentName:"p",href:"#settings-log-queries"},"log_queries")," is true. Queries\u2019 threads run by ClickHouse with this setup are logged according to the rules in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings/#server_configuration_parameters-query_thread_log"},"query_thread_log")," server configuration parameter."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"log_query_threads=1\n")),(0,n.kt)("h2",{id:"settings-log-query-views"},"log_query_views"),(0,n.kt)("p",null,"Setting up query views logging."),(0,n.kt)("p",null,"When a query run by ClickHouse with this setting enabled has associated views (materialized or live views), they are logged in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings/#server_configuration_parameters-query_views_log"},"query_views_log")," server configuration parameter."),(0,n.kt)("p",null,"Example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"log_query_views=1\n")),(0,n.kt)("h2",{id:"settings-log-formatted-queries"},"log_formatted_queries"),(0,n.kt)("p",null,"Allows to log formatted queries to the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/query_log"},"system.query_log")," system table (populates ",(0,n.kt)("inlineCode",{parentName:"p"},"formatted_query")," column in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/query_log"},"system.query_log"),")."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Formatted queries are not logged in the system table."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Formatted queries are logged in the system table.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"settings-log-comment"},"log_comment"),(0,n.kt)("p",null,"Specifies the value for the ",(0,n.kt)("inlineCode",{parentName:"p"},"log_comment")," field of the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/query_log"},"system.query_log")," table and comment text for the server log."),(0,n.kt)("p",null,"It can be used to improve the readability of server logs. Additionally, it helps to select queries related to the test from the ",(0,n.kt)("inlineCode",{parentName:"p"},"system.query_log")," after running ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/development/tests"},"clickhouse-test"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any string no longer than ",(0,n.kt)("a",{parentName:"li",href:"#settings-max_query_size"},"max_query_size"),". If the max_query_size is exceeded, the server throws an exception.")),(0,n.kt)("p",null,"Default value: empty string."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET log_comment = 'log_comment test', log_queries = 1;\nSELECT 1;\nSYSTEM FLUSH LOGS;\nSELECT type, query FROM system.query_log WHERE log_comment = 'log_comment test' AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 2;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500query\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 QueryStart  \u2502 SELECT 1; \u2502\n\u2502 QueryFinish \u2502 SELECT 1; \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"settings-log_processors_profiles"},"log_processors_profiles"),(0,n.kt)("p",null,"Write time that processor spent during execution/waiting for data to ",(0,n.kt)("inlineCode",{parentName:"p"},"system.processors_profile_log")," table."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/processors_profile_log#system-processors_profile_log"},(0,n.kt)("inlineCode",{parentName:"a"},"system.processors_profile_log"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/explain#explain-pipeline"},(0,n.kt)("inlineCode",{parentName:"a"},"EXPLAIN PIPELINE")))),(0,n.kt)("h2",{id:"settings-max_insert_block_size"},"max_insert_block_size"),(0,n.kt)("p",null,"The size of blocks (in a count of rows) to form for insertion into a table.\nThis setting only applies in cases when the server forms the blocks.\nFor example, for an INSERT via the HTTP interface, the server parses the data format and forms blocks of the specified size.\nBut when using clickhouse-client, the client parses the data itself, and the \u2018max_insert_block_size\u2019 setting on the server does not affect the size of the inserted blocks.\nThe setting also does not have a purpose when using INSERT SELECT, since data is inserted using the same blocks that are formed after SELECT."),(0,n.kt)("p",null,"Default value: 1,048,576."),(0,n.kt)("p",null,"The default is slightly more than ",(0,n.kt)("inlineCode",{parentName:"p"},"max_block_size"),". The reason for this is that certain table engines (",(0,n.kt)("inlineCode",{parentName:"p"},"*MergeTree"),") form a data part on the disk for each inserted block, which is a fairly large entity. Similarly, ",(0,n.kt)("inlineCode",{parentName:"p"},"*MergeTree")," tables sort data during insertion, and a large enough block size allow sorting more data in RAM."),(0,n.kt)("h2",{id:"min-insert-block-size-rows"},"min_insert_block_size_rows"),(0,n.kt)("p",null,"Sets the minimum number of rows in the block that can be inserted into a table by an ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query. Smaller-sized blocks are squashed into bigger ones."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Squashing disabled.")),(0,n.kt)("p",null,"Default value: 1048576."),(0,n.kt)("h2",{id:"min-insert-block-size-bytes"},"min_insert_block_size_bytes"),(0,n.kt)("p",null,"Sets the minimum number of bytes in the block which can be inserted into a table by an ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query. Smaller-sized blocks are squashed into bigger ones."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Squashing disabled.")),(0,n.kt)("p",null,"Default value: 268435456."),(0,n.kt)("h2",{id:"settings-max_replica_delay_for_distributed_queries"},"max_replica_delay_for_distributed_queries"),(0,n.kt)("p",null,"Disables lagging replicas for distributed queries. See ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"Replication"),"."),(0,n.kt)("p",null,"Sets the time in seconds. If a replica's lag is greater than or equal to the set value, this replica is not used."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Replica lags are not checked.")),(0,n.kt)("p",null,"To prevent the use of any replica with a non-zero lag, set this parameter to 1."),(0,n.kt)("p",null,"Default value: 300."),(0,n.kt)("p",null,"Used when performing ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," from a distributed table that points to replicated tables."),(0,n.kt)("h2",{id:"settings-max_threads"},"max_threads"),(0,n.kt)("p",null,"The maximum number of query processing threads, excluding threads for retrieving data from remote servers (see the \u2018max_distributed_connections\u2019 parameter)."),(0,n.kt)("p",null,"This parameter applies to threads that perform the same stages of the query processing pipeline in parallel.\nFor example, when reading from a table, if it is possible to evaluate expressions with functions, filter with WHERE and pre-aggregate for GROUP BY in parallel using at least \u2018max_threads\u2019 number of threads, then \u2018max_threads\u2019 are used."),(0,n.kt)("p",null,"Default value: the number of physical CPU cores."),(0,n.kt)("p",null,"For queries that are completed quickly because of a LIMIT, you can set a lower \u2018max_threads\u2019. For example, if the necessary number of entries are located in every block and max_threads = 8, then 8 blocks are retrieved, although it would have been enough to read just one."),(0,n.kt)("p",null,"The smaller the ",(0,n.kt)("inlineCode",{parentName:"p"},"max_threads")," value, the less memory is consumed."),(0,n.kt)("h2",{id:"settings-max-insert-threads"},"max_insert_threads"),(0,n.kt)("p",null,"The maximum number of threads to execute the ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT SELECT")," query."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 (or 1) \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT SELECT")," no parallel execution."),(0,n.kt)("li",{parentName:"ul"},"Positive integer. Bigger than 1.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,"Parallel ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT SELECT")," has effect only if the ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," part is executed in parallel, see ",(0,n.kt)("a",{parentName:"p",href:"#settings-max_threads"},"max_threads")," setting.\nHigher values will lead to higher memory usage."),(0,n.kt)("h2",{id:"max-compress-block-size"},"max_compress_block_size"),(0,n.kt)("p",null,"The maximum size of blocks of uncompressed data before compressing for writing to a table. By default, 1,048,576 (1 MiB). Specifying a smaller block size generally leads to slightly reduced compression ratio, the compression and decompression speed increases slightly due to cache locality, and memory consumption is reduced."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"This is an expert-level setting, and you shouldn't change it if you're just getting started with ClickHouse.")),(0,n.kt)("p",null,"Don\u2019t confuse blocks for compression (a chunk of memory consisting of bytes) with blocks for query processing (a set of rows from a table)."),(0,n.kt)("h2",{id:"min-compress-block-size"},"min_compress_block_size"),(0,n.kt)("p",null,"For ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," tables. In order to reduce latency when processing queries, a block is compressed when writing the next mark if its size is at least ",(0,n.kt)("inlineCode",{parentName:"p"},"min_compress_block_size"),". By default, 65,536."),(0,n.kt)("p",null,"The actual size of the block, if the uncompressed data is less than ",(0,n.kt)("inlineCode",{parentName:"p"},"max_compress_block_size"),", is no less than this value and no less than the volume of data for one mark."),(0,n.kt)("p",null,"Let\u2019s look at an example. Assume that ",(0,n.kt)("inlineCode",{parentName:"p"},"index_granularity")," was set to 8192 during table creation."),(0,n.kt)("p",null,"We are writing a UInt32-type column (4 bytes per value). When writing 8192 rows, the total will be 32 KB of data. Since min_compress_block_size = 65,536, a compressed block will be formed for every two marks."),(0,n.kt)("p",null,"We are writing a URL column with the String type (average size of 60 bytes per value). When writing 8192 rows, the average will be slightly less than 500 KB of data. Since this is more than 65,536, a compressed block will be formed for each mark. In this case, when reading data from the disk in the range of a single mark, extra data won\u2019t be decompressed."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"This is an expert-level setting, and you shouldn't change it if you're just getting started with ClickHouse.")),(0,n.kt)("h2",{id:"settings-max_query_size"},"max_query_size"),(0,n.kt)("p",null,"The maximum part of a query that can be taken to RAM for parsing with the SQL parser.\nThe INSERT query also contains data for INSERT that is processed by a separate stream parser (that consumes O(1) RAM), which is not included in this restriction."),(0,n.kt)("p",null,"Default value: 256 KiB."),(0,n.kt)("h2",{id:"max_parser_depth"},"max_parser_depth"),(0,n.kt)("p",null,"Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Recursion depth is unlimited.")),(0,n.kt)("p",null,"Default value: 1000."),(0,n.kt)("h2",{id:"interactive-delay"},"interactive_delay"),(0,n.kt)("p",null,"The interval in microseconds for checking whether request execution has been canceled and sending the progress."),(0,n.kt)("p",null,"Default value: 100,000 (checks for cancelling and sends the progress ten times per second)."),(0,n.kt)("h2",{id:"connect-timeout-receive-timeout-send-timeout"},"connect_timeout, receive_timeout, send_timeout"),(0,n.kt)("p",null,"Timeouts in seconds on the socket used for communicating with the client."),(0,n.kt)("p",null,"Default value: 10, 300, 300."),(0,n.kt)("h2",{id:"cancel-http-readonly-queries-on-client-close"},"cancel_http_readonly_queries_on_client_close"),(0,n.kt)("p",null,"Cancels HTTP read-only queries (e.g.\xa0SELECT) when a client closes the connection without waiting for the response."),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("h2",{id:"poll-interval"},"poll_interval"),(0,n.kt)("p",null,"Lock in a wait loop for the specified number of seconds."),(0,n.kt)("p",null,"Default value: 10."),(0,n.kt)("h2",{id:"max-distributed-connections"},"max_distributed_connections"),(0,n.kt)("p",null,"The maximum number of simultaneous connections with remote servers for distributed processing of a single query to a single Distributed table. We recommend setting a value no less than the number of servers in the cluster."),(0,n.kt)("p",null,"Default value: 1024."),(0,n.kt)("p",null,"The following parameters are only used when creating Distributed tables (and when launching a server), so there is no reason to change them at runtime."),(0,n.kt)("h2",{id:"distributed-connections-pool-size"},"distributed_connections_pool_size"),(0,n.kt)("p",null,"The maximum number of simultaneous connections with remote servers for distributed processing of all queries to a single Distributed table. We recommend setting a value no less than the number of servers in the cluster."),(0,n.kt)("p",null,"Default value: 1024."),(0,n.kt)("h2",{id:"max-distributed-depth"},"max_distributed_depth"),(0,n.kt)("p",null,"Limits the maximum depth of recursive queries for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Distributed")," tables."),(0,n.kt)("p",null,"If the value is exceeded, the server throws an exception."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Unlimited depth.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,n.kt)("h2",{id:"max_replicated_fetches_network_bandwidth_for_server"},"max_replicated_fetches_network_bandwidth_for_server"),(0,n.kt)("p",null,"Limits the maximum speed of data exchange over the network in bytes per second for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"replicated")," fetches for the server. Only has meaning at server startup. You can also limit the speed for a particular table with ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#max_replicated_fetches_network_bandwidth"},"max_replicated_fetches_network_bandwidth")," setting."),(0,n.kt)("p",null,"The setting isn't followed perfectly accurately."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Unlimited.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Usage")),(0,n.kt)("p",null,"Could be used for throttling speed when replicating the data to add or replace new nodes."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"60000000 bytes/s approximatly corresponds to 457 Mbps (60000000 / 1024 / 1024 * 8).")),(0,n.kt)("h2",{id:"max_replicated_sends_network_bandwidth_for_server"},"max_replicated_sends_network_bandwidth_for_server"),(0,n.kt)("p",null,"Limits the maximum speed of data exchange over the network in bytes per second for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"replicated")," sends for the server. Only has meaning at server startup.  You can also limit the speed for a particular table with ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#max_replicated_sends_network_bandwidth"},"max_replicated_sends_network_bandwidth")," setting."),(0,n.kt)("p",null,"The setting isn't followed perfectly accurately."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Unlimited.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Usage")),(0,n.kt)("p",null,"Could be used for throttling speed when replicating the data to add or replace new nodes."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"60000000 bytes/s approximatly corresponds to 457 Mbps (60000000 / 1024 / 1024 * 8).")),(0,n.kt)("h2",{id:"connect-timeout-with-failover-ms"},"connect_timeout_with_failover_ms"),(0,n.kt)("p",null,"The timeout in milliseconds for connecting to a remote server for a Distributed table engine, if the \u2018shard\u2019 and \u2018replica\u2019 sections are used in the cluster definition.\nIf unsuccessful, several attempts are made to connect to various replicas."),(0,n.kt)("p",null,"Default value: 50."),(0,n.kt)("h2",{id:"connection-pool-max-wait-ms"},"connection_pool_max_wait_ms"),(0,n.kt)("p",null,"The wait time in milliseconds for a connection when the connection pool is full."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Infinite timeout.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"connections-with-failover-max-tries"},"connections_with_failover_max_tries"),(0,n.kt)("p",null,"The maximum number of connection attempts with each replica for the Distributed table engine."),(0,n.kt)("p",null,"Default value: 3."),(0,n.kt)("h2",{id:"extremes"},"extremes"),(0,n.kt)("p",null,"Whether to count extreme values (the minimums and maximums in columns of a query result). Accepts 0 or 1. By default, 0 (disabled).\nFor more information, see the section \u201cExtreme values\u201d."),(0,n.kt)("h2",{id:"kafka-max-wait-ms"},"kafka_max_wait_ms"),(0,n.kt)("p",null,"The wait time in milliseconds for reading messages from ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/integrations/kafka/#kafka"},"Kafka")," before retry."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Infinite timeout.")),(0,n.kt)("p",null,"Default value: 5000."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://kafka.apache.org/"},"Apache Kafka"))),(0,n.kt)("h2",{id:"kafka-disable-num-consumers-limit"},"kafka_disable_num_consumers_limit"),(0,n.kt)("p",null,"Disable limit on kafka_num_consumers that depends on the number of available CPU cores."),(0,n.kt)("p",null,"Default value: false."),(0,n.kt)("h2",{id:"setting-use_uncompressed_cache"},"use_uncompressed_cache"),(0,n.kt)("p",null,"Whether to use a cache of uncompressed blocks. Accepts 0 or 1. By default, 0 (disabled).\nUsing the uncompressed cache (only for tables in the MergeTree family) can significantly reduce latency and increase throughput when working with a large number of short queries. Enable this setting for users who send frequent short requests. Also pay attention to the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings/#server-settings-uncompressed_cache_size"},"uncompressed_cache_size")," configuration parameter (only set in the config file) \u2013 the size of uncompressed cache blocks. By default, it is 8 GiB. The uncompressed cache is filled in as needed and the least-used data is automatically deleted."),(0,n.kt)("p",null,"For queries that read at least a somewhat large volume of data (one million rows or more), the uncompressed cache is disabled automatically to save space for truly small queries. This means that you can keep the \u2018use_uncompressed_cache\u2019 setting always set to 1."),(0,n.kt)("h2",{id:"replace-running-query"},"replace_running_query"),(0,n.kt)("p",null,"When using the HTTP interface, the \u2018query_id\u2019 parameter can be passed. This is any string that serves as the query identifier.\nIf a query from the same user with the same \u2018query_id\u2019 already exists at this time, the behaviour depends on the \u2018replace_running_query\u2019 parameter."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"0")," (default) \u2013 Throw an exception (do not allow the query to run if a query with the same \u2018query_id\u2019 is already running)."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"1")," \u2013 Cancel the old query and start running the new one."),(0,n.kt)("p",null,"Set this parameter to 1 for implementing suggestions for segmentation conditions. After entering the next character, if the old query hasn\u2019t finished yet, it should be cancelled."),(0,n.kt)("h2",{id:"replace-running-query-max-wait-ms"},"replace_running_query_max_wait_ms"),(0,n.kt)("p",null,"The wait time for running the query with the same ",(0,n.kt)("inlineCode",{parentName:"p"},"query_id")," to finish, when the ",(0,n.kt)("a",{parentName:"p",href:"#replace-running-query"},"replace_running_query")," setting is active."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Throwing an exception that does not allow to run a new query if the server already executes a query with the same ",(0,n.kt)("inlineCode",{parentName:"li"},"query_id"),".")),(0,n.kt)("p",null,"Default value: 5000."),(0,n.kt)("h2",{id:"stream-flush-interval-ms"},"stream_flush_interval_ms"),(0,n.kt)("p",null,"Works for tables with streaming in the case of a timeout, or when a thread generates ",(0,n.kt)("a",{parentName:"p",href:"#settings-max_insert_block_size"},"max_insert_block_size")," rows."),(0,n.kt)("p",null,"The default value is 7500."),(0,n.kt)("p",null,"The smaller the value, the more often data is flushed into the table. Setting the value too low leads to poor performance."),(0,n.kt)("h2",{id:"stream_poll_timeout_ms"},"stream_poll_timeout_ms"),(0,n.kt)("p",null,"Timeout for polling data from/to streaming storages."),(0,n.kt)("p",null,"Default value: 500."),(0,n.kt)("h2",{id:"settings-load_balancing"},"load_balancing"),(0,n.kt)("p",null,"Specifies the algorithm of replicas selection that is used for distributed query processing."),(0,n.kt)("p",null,"ClickHouse supports the following algorithms of choosing replicas:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-random"},"Random")," (by default)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-nearest_hostname"},"Nearest hostname")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-in_order"},"In order")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-first_or_random"},"First or random")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-round_robin"},"Round robin"))),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-distributed_replica_max_ignored_errors"},"distributed_replica_max_ignored_errors"))),(0,n.kt)("h3",{id:"load_balancing-random"},"Random (by Default)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"load_balancing = random\n")),(0,n.kt)("p",null,"The number of errors is counted for each replica. The query is sent to the replica with the fewest errors, and if there are several of these, to anyone of them.\nDisadvantages: Server proximity is not accounted for; if the replicas have different data, you will also get different data."),(0,n.kt)("h3",{id:"load_balancing-nearest_hostname"},"Nearest Hostname"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"load_balancing = nearest_hostname\n")),(0,n.kt)("p",null,"The number of errors is counted for each replica. Every 5 minutes, the number of errors is integrally divided by 2. Thus, the number of errors is calculated for a recent time with exponential smoothing. If there is one replica with a minimal number of errors (i.e.\xa0errors occurred recently on the other replicas), the query is sent to it. If there are multiple replicas with the same minimal number of errors, the query is sent to the replica with a hostname that is most similar to the server\u2019s hostname in the config file (for the number of different characters in identical positions, up to the minimum length of both hostnames)."),(0,n.kt)("p",null,"For instance, example01-01-1 and example01-01-2 are different in one position, while example01-01-1 and example01-02-2 differ in two places.\nThis method might seem primitive, but it does not require external data about network topology, and it does not compare IP addresses, which would be complicated for our IPv6 addresses."),(0,n.kt)("p",null,"Thus, if there are equivalent replicas, the closest one by name is preferred.\nWe can also assume that when sending a query to the same server, in the absence of failures, a distributed query will also go to the same servers. So even if different data is placed on the replicas, the query will return mostly the same results."),(0,n.kt)("h3",{id:"load_balancing-in_order"},"In Order"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"load_balancing = in_order\n")),(0,n.kt)("p",null,"Replicas with the same number of errors are accessed in the same order as they are specified in the configuration.\nThis method is appropriate when you know exactly which replica is preferable."),(0,n.kt)("h3",{id:"load_balancing-first_or_random"},"First or Random"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"load_balancing = first_or_random\n")),(0,n.kt)("p",null,"This algorithm chooses the first replica in the set or a random replica if the first is unavailable. It\u2019s effective in cross-replication topology setups, but useless in other configurations."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"first_or_random")," algorithm solves the problem of the ",(0,n.kt)("inlineCode",{parentName:"p"},"in_order")," algorithm. With ",(0,n.kt)("inlineCode",{parentName:"p"},"in_order"),", if one replica goes down, the next one gets a double load while the remaining replicas handle the usual amount of traffic. When using the ",(0,n.kt)("inlineCode",{parentName:"p"},"first_or_random")," algorithm, the load is evenly distributed among replicas that are still available."),(0,n.kt)("p",null,"It's possible to explicitly define what the first replica is by using the setting ",(0,n.kt)("inlineCode",{parentName:"p"},"load_balancing_first_offset"),". This gives more control to rebalance query workloads among replicas."),(0,n.kt)("h3",{id:"load_balancing-round_robin"},"Round Robin"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"load_balancing = round_robin\n")),(0,n.kt)("p",null,"This algorithm uses a round-robin policy across replicas with the same number of errors (only the queries with ",(0,n.kt)("inlineCode",{parentName:"p"},"round_robin")," policy is accounted)."),(0,n.kt)("h2",{id:"settings-prefer-localhost-replica"},"prefer_localhost_replica"),(0,n.kt)("p",null,"Enables/disables preferable using the localhost replica when processing distributed queries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ClickHouse always sends a query to the localhost replica if it exists."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ClickHouse uses the balancing strategy specified by the ",(0,n.kt)("a",{parentName:"li",href:"#settings-load_balancing"},"load_balancing")," setting.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Disable this setting if you use ",(0,n.kt)("a",{parentName:"p",href:"#settings-max_parallel_replicas"},"max_parallel_replicas"),".")),(0,n.kt)("h2",{id:"totals-mode"},"totals_mode"),(0,n.kt)("p",null,"How to calculate TOTALS when HAVING is present, as well as when max_rows_to_group_by and group_by_overflow_mode = \u2018any\u2019 are present.\nSee the section \u201cWITH TOTALS modifier\u201d."),(0,n.kt)("h2",{id:"totals-auto-threshold"},"totals_auto_threshold"),(0,n.kt)("p",null,"The threshold for ",(0,n.kt)("inlineCode",{parentName:"p"},"totals_mode = 'auto'"),".\nSee the section \u201cWITH TOTALS modifier\u201d."),(0,n.kt)("h2",{id:"settings-max_parallel_replicas"},"max_parallel_replicas"),(0,n.kt)("p",null,"The maximum number of replicas for each shard when executing a query."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Additional Info")),(0,n.kt)("p",null,"This setting is useful for replicated tables with a sampling key. A query may be processed faster if it is executed on several servers in parallel. But the query performance may degrade in the following cases:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The position of the sampling key in the partitioning key does not allow efficient range scans."),(0,n.kt)("li",{parentName:"ul"},"Adding a sampling key to the table makes filtering by other columns less efficient."),(0,n.kt)("li",{parentName:"ul"},"The sampling key is an expression that is expensive to calculate."),(0,n.kt)("li",{parentName:"ul"},"The cluster latency distribution has a long tail, so that querying more servers increases the query overall latency.")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"This setting will produce incorrect results when joins or subqueries are involved, and all tables don't meet certain requirements. See ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/operators/in/#max_parallel_replica-subqueries"},"Distributed Subqueries and max_parallel_replicas")," for more details.")),(0,n.kt)("h2",{id:"compile-expressions"},"compile_expressions"),(0,n.kt)("p",null,"Enables or disables compilation of frequently used simple functions and operators to native code with LLVM at runtime."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"min-count-to-compile-expression"},"min_count_to_compile_expression"),(0,n.kt)("p",null,"Minimum count of executing same expression before it is get compiled."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,n.kt)("h2",{id:"compile_aggregate_expressions"},"compile_aggregate_expressions"),(0,n.kt)("p",null,"Enables or disables JIT-compilation of aggregate functions to native code. Enabling this setting can improve the performance."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Aggregation is done without JIT compilation."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Aggregation is done using JIT compilation.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#min_count_to_compile_aggregate_expression"},"min_count_to_compile_aggregate_expression"))),(0,n.kt)("h2",{id:"min_count_to_compile_aggregate_expression"},"min_count_to_compile_aggregate_expression"),(0,n.kt)("p",null,"The minimum number of identical aggregate expressions to start JIT-compilation. Works only if the ",(0,n.kt)("a",{parentName:"p",href:"#compile_aggregate_expressions"},"compile_aggregate_expressions")," setting is enabled."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Identical aggregate expressions are always JIT-compiled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,n.kt)("h2",{id:"use-query-cache"},"use_query_cache"),(0,n.kt)("p",null,"If turned on, ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries may utilize the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache"),". Parameters ",(0,n.kt)("a",{parentName:"p",href:"#enable-reads-from-query-cache"},"enable_reads_from_query_cache"),"\nand ",(0,n.kt)("a",{parentName:"p",href:"#enable-writes-to-query-cache"},"enable_writes_to_query_cache")," control in more detail how the cache is used."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - Yes"),(0,n.kt)("li",{parentName:"ul"},"1 - No")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"enable-reads-from-query-cache"},"enable_reads_from_query_cache"),(0,n.kt)("p",null,"If turned on, results of ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries are retrieved from the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - Disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - Enabled")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"enable-writes-to-query-cache"},"enable_writes_to_query_cache"),(0,n.kt)("p",null,"If turned on, results of ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries are stored in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - Disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - Enabled")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"query--store-results-of-queries-with-nondeterministic-functions"},"query_cache_store_results_of_queries_with_nondeterministic_functions"),(0,n.kt)("p",null,"If turned on, then results of ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries with non-deterministic functions (e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"rand()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"now()"),") can be cached in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - Disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - Enabled")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"query-cache-min-query-runs"},"query_cache_min_query_runs"),(0,n.kt)("p",null,"Minimum number of times a ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," query must run before its result is stored in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer >= 0.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0")),(0,n.kt)("h2",{id:"query-cache-min-query-duration"},"query_cache_min_query_duration"),(0,n.kt)("p",null,"Minimum duration in milliseconds a query needs to run for its result to be stored in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer >= 0.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0")),(0,n.kt)("h2",{id:"query-cache-ttl"},"query_cache_ttl"),(0,n.kt)("p",null,"After this time in seconds entries in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache")," become stale."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer >= 0.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"60")),(0,n.kt)("h2",{id:"query-cache-share-between-users"},"query_cache_share_between_users"),(0,n.kt)("p",null,"If turned on, the result of ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries cached in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/query-cache"},"query cache")," can be read by other users.\nIt is not recommended to enable this setting due to security reasons."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - Disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - Enabled")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"settings-insert_quorum"},"insert_quorum"),(0,n.kt)("p",null,"Enables the quorum writes."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If ",(0,n.kt)("inlineCode",{parentName:"li"},"insert_quorum < 2"),", the quorum writes are disabled."),(0,n.kt)("li",{parentName:"ul"},"If ",(0,n.kt)("inlineCode",{parentName:"li"},"insert_quorum >= 2"),", the quorum writes are enabled."),(0,n.kt)("li",{parentName:"ul"},"If ",(0,n.kt)("inlineCode",{parentName:"li"},"insert_quorum = 'auto'"),", use majority number (",(0,n.kt)("inlineCode",{parentName:"li"},"number_of_replicas / 2 + 1"),") as quorum number.")),(0,n.kt)("p",null,"Default value: 0 - disabled."),(0,n.kt)("p",null,"Quorum writes"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," succeeds only when ClickHouse manages to correctly write data to the ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum")," of replicas during the ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum_timeout"),". If for any reason the number of replicas with successful writes does not reach the ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum"),", the write is considered failed and ClickHouse will delete the inserted block from all the replicas where data has already been written."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum_parallel")," is disabled, all replicas in the quorum are consistent, i.e. they contain data from all previous ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," queries (the ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," sequence is linearized). When reading data written using ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum_parallel")," is disabled, you can turn on sequential consistency for ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries using ",(0,n.kt)("a",{parentName:"p",href:"#settings-select_sequential_consistency"},"select_sequential_consistency"),"."),(0,n.kt)("p",null,"ClickHouse generates an exception:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If the number of available replicas at the time of the query is less than the ",(0,n.kt)("inlineCode",{parentName:"li"},"insert_quorum"),"."),(0,n.kt)("li",{parentName:"ul"},"When ",(0,n.kt)("inlineCode",{parentName:"li"},"insert_quorum_parallel")," is disabled and an attempt to write data is made when the previous block has not yet been inserted in ",(0,n.kt)("inlineCode",{parentName:"li"},"insert_quorum")," of replicas. This situation may occur if the user tries to perform another ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query to the same table before the previous one with ",(0,n.kt)("inlineCode",{parentName:"li"},"insert_quorum")," is completed.")),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum_timeout"},"insert_quorum_timeout")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum_parallel"},"insert_quorum_parallel")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-select_sequential_consistency"},"select_sequential_consistency"))),(0,n.kt)("h2",{id:"settings-insert_quorum_timeout"},"insert_quorum_timeout"),(0,n.kt)("p",null,"Write to a quorum timeout in milliseconds. If the timeout has passed and no write has taken place yet, ClickHouse will generate an exception and the client must repeat the query to write the same block to the same or any other replica."),(0,n.kt)("p",null,"Default value: 600 000 milliseconds (ten minutes)."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum"},"insert_quorum")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum_parallel"},"insert_quorum_parallel")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-select_sequential_consistency"},"select_sequential_consistency"))),(0,n.kt)("h2",{id:"settings-insert_quorum_parallel"},"insert_quorum_parallel"),(0,n.kt)("p",null,"Enables or disables parallelism for quorum ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," queries. If enabled, additional ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," queries can be sent while previous queries have not yet finished. If disabled, additional writes to the same table will be rejected."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum"},"insert_quorum")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum_timeout"},"insert_quorum_timeout")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-select_sequential_consistency"},"select_sequential_consistency"))),(0,n.kt)("h2",{id:"settings-select_sequential_consistency"},"select_sequential_consistency"),(0,n.kt)("p",null,"Enables or disables sequential consistency for ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries. Requires ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum_parallel")," to be disabled (enabled by default)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,"Usage"),(0,n.kt)("p",null,"When sequential consistency is enabled, ClickHouse allows the client to execute the ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," query only for those replicas that contain data from all previous ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," queries executed with ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum"),". If the client refers to a partial replica, ClickHouse will generate an exception. The SELECT query will not include data that has not yet been written to the quorum of replicas."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_quorum_parallel")," is enabled (the default), then ",(0,n.kt)("inlineCode",{parentName:"p"},"select_sequential_consistency")," does not work. This is because parallel ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," queries can be written to different sets of quorum replicas so there is no guarantee a single replica will have received all writes."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum"},"insert_quorum")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum_timeout"},"insert_quorum_timeout")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-insert_quorum_parallel"},"insert_quorum_parallel"))),(0,n.kt)("h2",{id:"settings-insert-deduplicate"},"insert_deduplicate"),(0,n.kt)("p",null,"Enables or disables block deduplication of ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," (for Replicated","*"," tables)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("p",null,"By default, blocks inserted into replicated tables by the ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," statement are deduplicated (see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"Data Replication"),").\nFor the replicated tables by default the only 100 of the most recent blocks for each partition are deduplicated (see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#replicated-deduplication-window"},"replicated_deduplication_window"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#replicated-deduplication-window-seconds"},"replicated_deduplication_window_seconds"),").\nFor not replicated tables see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#non-replicated-deduplication-window"},"non_replicated_deduplication_window"),"."),(0,n.kt)("h2",{id:"asynchronous-insert-settings"},"Asynchronous Insert settings"),(0,n.kt)("h3",{id:"async-insert"},"async_insert"),(0,n.kt)("p",null,"Enables or disables asynchronous inserts. This makes sense only for insertion over HTTP protocol. Note that deduplication isn't working for such inserts."),(0,n.kt)("p",null,"If enabled, the data is combined into batches before the insertion into tables, so it is possible to do small and frequent insertions into ClickHouse (up to 15000 queries per second) without buffer tables."),(0,n.kt)("p",null,"The data is inserted either after the ",(0,n.kt)("a",{parentName:"p",href:"#async-insert-max-data-size"},"async_insert_max_data_size")," is exceeded or after ",(0,n.kt)("a",{parentName:"p",href:"#async-insert-busy-timeout-ms"},"async_insert_busy_timeout_ms")," milliseconds since the first ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query. If the ",(0,n.kt)("a",{parentName:"p",href:"#async-insert-stale-timeout-ms"},"async_insert_stale_timeout_ms")," is set to a non-zero value, the data is inserted after ",(0,n.kt)("inlineCode",{parentName:"p"},"async_insert_stale_timeout_ms")," milliseconds since the last query."),(0,n.kt)("p",null,"If ",(0,n.kt)("a",{parentName:"p",href:"#wait-for-async-insert"},"wait_for_async_insert")," is enabled, every client will wait for the data to be processed and flushed to the table. Otherwise, the query would be processed almost instantly, even if the data is not inserted."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Insertions are made synchronously, one after another."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Multiple asynchronous insertions enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h3",{id:"async-insert-threads"},"async_insert_threads"),(0,n.kt)("p",null,"The maximum number of threads for background data parsing and insertion."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Asynchronous insertions are disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"16"),"."),(0,n.kt)("h3",{id:"wait-for-async-insert"},"wait_for_async_insert"),(0,n.kt)("p",null,"Enables or disables waiting for processing of asynchronous insertion. If enabled, server will return ",(0,n.kt)("inlineCode",{parentName:"p"},"OK")," only after the data is inserted. Otherwise, it will return ",(0,n.kt)("inlineCode",{parentName:"p"},"OK")," even if the data wasn't inserted."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Server returns ",(0,n.kt)("inlineCode",{parentName:"li"},"OK")," even if the data is not yet inserted."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Server returns ",(0,n.kt)("inlineCode",{parentName:"li"},"OK")," only after the data is inserted.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h3",{id:"wait-for-async-insert-timeout"},"wait_for_async_insert_timeout"),(0,n.kt)("p",null,"The timeout in seconds for waiting for processing of asynchronous insertion."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("a",{parentName:"p",href:"#lock_acquire_timeout"},"lock_acquire_timeout"),"."),(0,n.kt)("h3",{id:"async-insert-max-data-size"},"async_insert_max_data_size"),(0,n.kt)("p",null,"The maximum size of the unparsed data in bytes collected per query before being inserted."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Asynchronous insertions are disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"100000"),"."),(0,n.kt)("h3",{id:"async-insert-max-query-number"},"async_insert_max_query_number"),(0,n.kt)("p",null,"The maximum number of insert queries per block before being inserted. This setting takes effect only if ",(0,n.kt)("a",{parentName:"p",href:"#settings-async-insert-deduplicate"},"async_insert_deduplicate")," is enabled."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Asynchronous insertions are disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"450"),"."),(0,n.kt)("h3",{id:"async-insert-busy-timeout-ms"},"async_insert_busy_timeout_ms"),(0,n.kt)("p",null,"The maximum timeout in milliseconds since the first ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query before inserting collected data."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Timeout disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"200"),"."),(0,n.kt)("h3",{id:"async-insert-stale-timeout-ms"},"async_insert_stale_timeout_ms"),(0,n.kt)("p",null,"The maximum timeout in milliseconds since the last ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query before dumping collected data. If enabled, the settings prolongs the ",(0,n.kt)("a",{parentName:"p",href:"#async-insert-busy-timeout-ms"},"async_insert_busy_timeout_ms")," with every ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query as long as ",(0,n.kt)("a",{parentName:"p",href:"#async-insert-max-data-size"},"async_insert_max_data_size")," is not exceeded."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Timeout disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h3",{id:"settings-async-insert-deduplicate"},"async_insert_deduplicate"),(0,n.kt)("p",null,"Enables or disables insert deduplication of ",(0,n.kt)("inlineCode",{parentName:"p"},"ASYNC INSERT")," (for Replicated","*"," tables)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("p",null,"By default, async inserts are inserted into replicated tables by the ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," statement enabling ",(0,n.kt)("a",{parentName:"p",href:"#async-insert"},"async_isnert")," are deduplicated (see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"Data Replication"),").\nFor the replicated tables, by default, only 10000 of the most recent inserts for each partition are deduplicated (see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#replicated-deduplication-window-async-inserts"},"replicated_deduplication_window_for_async_inserts"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#replicated-deduplication-window-seconds-async-inserts"},"replicated_deduplication_window_seconds_for_async_inserts"),").\nWe recommend enabling the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#use-async-block-ids-cache"},"async_block_ids_cache")," to increase the efficiency of deduplication.\nThis function does not work for non-replicated tables."),(0,n.kt)("h2",{id:"settings-deduplicate-blocks-in-dependent-materialized-views"},"deduplicate_blocks_in_dependent_materialized_views"),(0,n.kt)("p",null,"Enables or disables the deduplication check for materialized views that receive data from Replicated","*"," tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"  0 \u2014 Disabled.\n  1 \u2014 Enabled.\n")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,"Usage"),(0,n.kt)("p",null,"By default, deduplication is not performed for materialized views but is done upstream, in the source table.\nIf an INSERTed block is skipped due to deduplication in the source table, there will be no insertion into attached materialized views. This behaviour exists to enable the insertion of highly aggregated data into materialized views, for cases where inserted blocks are the same after materialized view aggregation but derived from different INSERTs into the source table.\nAt the same time, this behaviour \u201cbreaks\u201d ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," idempotency. If an ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," into the main table was successful and ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," into a materialized view failed (e.g.\xa0because of communication failure with ClickHouse Keeper) a client will get an error and can retry the operation. However, the materialized view won\u2019t receive the second insert because it will be discarded by deduplication in the main (source) table. The setting ",(0,n.kt)("inlineCode",{parentName:"p"},"deduplicate_blocks_in_dependent_materialized_views")," allows for changing this behaviour. On retry, a materialized view will receive the repeat insert and will perform a deduplication check by itself,\nignoring check result for the source table, and will insert rows lost because of the first failure."),(0,n.kt)("h2",{id:"insert_deduplication_token"},"insert_deduplication_token"),(0,n.kt)("p",null,"The setting allows a user to provide own deduplication semantic in MergeTree/ReplicatedMergeTree\nFor example, by providing a unique value for the setting in each INSERT statement,\nuser can avoid the same inserted data being deduplicated."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any string")),(0,n.kt)("p",null,"Default value: empty string (disabled)"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"insert_deduplication_token")," is used for deduplication ",(0,n.kt)("em",{parentName:"p"},"only")," when not empty."),(0,n.kt)("p",null,"For the replicated tables by default the only 100 of the most recent inserts for each partition are deduplicated (see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#replicated-deduplication-window"},"replicated_deduplication_window"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#replicated-deduplication-window-seconds"},"replicated_deduplication_window_seconds"),").\nFor not replicated tables see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/merge-tree-settings/#non-replicated-deduplication-window"},"non_replicated_deduplication_window"),"."),(0,n.kt)("p",null,"Example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test_table\n( A Int64 )\nENGINE = MergeTree\nORDER BY A\nSETTINGS non_replicated_deduplication_window = 100;\n\nINSERT INTO test_table SETTINGS insert_deduplication_token = 'test' VALUES (1);\n\n-- the next insert won't be deduplicated because insert_deduplication_token is different\nINSERT INTO test_table SETTINGS insert_deduplication_token = 'test1' VALUES (1);\n\n-- the next insert will be deduplicated because insert_deduplication_token\n-- is the same as one of the previous\nINSERT INTO test_table SETTINGS insert_deduplication_token = 'test' VALUES (2);\n\nSELECT * FROM test_table\n\n\u250c\u2500A\u2500\u2510\n\u2502 1 \u2502\n\u2514\u2500\u2500\u2500\u2518\n\u250c\u2500A\u2500\u2510\n\u2502 1 \u2502\n\u2514\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"insert_keeper_max_retries"},"insert_keeper_max_retries"),(0,n.kt)("p",null,"The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Retries are disabled")),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("p",null,"Keeper request retries are done after some timeout. The timeout is controlled by the following settings: ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_keeper_retry_initial_backoff_ms"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_keeper_retry_max_backoff_ms"),".\nThe first retry is done after ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_keeper_retry_initial_backoff_ms")," timeout. The consequent timeouts will be calculated as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"timeout = min(insert_keeper_retry_max_backoff_ms, latest_timeout * 2)\n")),(0,n.kt)("p",null,"For example, if ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_keeper_retry_initial_backoff_ms=100"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_keeper_retry_max_backoff_ms=10000")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_keeper_max_retries=8")," then timeouts will be ",(0,n.kt)("inlineCode",{parentName:"p"},"100, 200, 400, 800, 1600, 3200, 6400, 10000"),"."),(0,n.kt)("p",null,"Apart from fault tolerance, the retries aim to provide a better user experience - they allow to avoid returning an error during INSERT execution if Keeper is restarted, for example, due to an upgrade."),(0,n.kt)("h2",{id:"insert_keeper_retry_initial_backoff_ms"},"insert_keeper_retry_initial_backoff_ms"),(0,n.kt)("p",null,"Initial timeout(in milliseconds) to retry a failed Keeper request during INSERT query execution"),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 No timeout")),(0,n.kt)("p",null,"Default value: 100"),(0,n.kt)("h2",{id:"insert_keeper_retry_max_backoff_ms"},"insert_keeper_retry_max_backoff_ms"),(0,n.kt)("p",null,"Maximum timeout (in milliseconds) to retry a failed Keeper request during INSERT query execution"),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Maximum timeout is not limited")),(0,n.kt)("p",null,"Default value: 10000"),(0,n.kt)("h2",{id:"settings-max-network-bytes"},"max_network_bytes"),(0,n.kt)("p",null,"Limits the data volume (in bytes) that is received or transmitted over the network when executing a query. This setting applies to every individual query."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Data volume control is disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"settings-max-network-bandwidth"},"max_network_bandwidth"),(0,n.kt)("p",null,"Limits the speed of the data exchange over the network in bytes per second. This setting applies to every query."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Bandwidth control is disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"settings-max-network-bandwidth-for-user"},"max_network_bandwidth_for_user"),(0,n.kt)("p",null,"Limits the speed of the data exchange over the network in bytes per second. This setting applies to all concurrently running queries performed by a single user."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Control of the data speed is disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"settings-max-network-bandwidth-for-all-users"},"max_network_bandwidth_for_all_users"),(0,n.kt)("p",null,"Limits the speed that data is exchanged at over the network in bytes per second. This setting applies to all concurrently running queries on the server."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Control of the data speed is disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"settings-count_distinct_implementation"},"count_distinct_implementation"),(0,n.kt)("p",null,"Specifies which of the ",(0,n.kt)("inlineCode",{parentName:"p"},"uniq*")," functions should be used to perform the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/count/#agg_function-count"},"COUNT(DISTINCT \u2026)")," construction."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/uniq/#agg_function-uniq"},"uniq")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/uniqcombined/#agg_function-uniqcombined"},"uniqCombined")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/uniqcombined64/#agg_function-uniqcombined64"},"uniqCombined64")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/uniqhll12/#agg_function-uniqhll12"},"uniqHLL12")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/uniqexact/#agg_function-uniqexact"},"uniqExact"))),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"uniqExact"),"."),(0,n.kt)("h2",{id:"settings-skip_unavailable_shards"},"skip_unavailable_shards"),(0,n.kt)("p",null,"Enables or disables silently skipping of unavailable shards."),(0,n.kt)("p",null,"Shard is considered unavailable if all its replicas are unavailable. A replica is unavailable in the following cases:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"ClickHouse can\u2019t connect to replica for any reason."),(0,n.kt)("p",{parentName:"li"},"When connecting to a replica, ClickHouse performs several attempts. If all these attempts fail, the replica is considered unavailable.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Replica can\u2019t be resolved through DNS."),(0,n.kt)("p",{parentName:"li"},"If replica\u2019s hostname can\u2019t be resolved through DNS, it can indicate the following situations:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Replica\u2019s host has no DNS record. It can occur in systems with dynamic DNS, for example, ",(0,n.kt)("a",{parentName:"p",href:"https://kubernetes.io"},"Kubernetes"),", where nodes can be unresolvable during downtime, and this is not an error.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Configuration error. ClickHouse configuration file contains a wrong hostname."))))),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"1 \u2014 skipping enabled."),(0,n.kt)("p",{parentName:"li"},"If a shard is unavailable, ClickHouse returns a result based on partial data and does not report node availability issues.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"0 \u2014 skipping disabled."),(0,n.kt)("p",{parentName:"li"},"If a shard is unavailable, ClickHouse throws an exception."))),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"distributed-group-by-no-merge"},"distributed_group_by_no_merge"),(0,n.kt)("p",null,"Do not merge aggregation states from different servers for distributed query processing, you can use this in case it is for certain that there are different keys on different shards"),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"0")," \u2014 Disabled (final query processing is done on the initiator node)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"1")," - Do not merge aggregation states from different servers for distributed query processing (query completelly processed on the shard, initiator only proxy the data), can be used in case it is for certain that there are different keys on different shards."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"2")," - Same as ",(0,n.kt)("inlineCode",{parentName:"li"},"1")," but applies ",(0,n.kt)("inlineCode",{parentName:"li"},"ORDER BY")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"LIMIT")," (it is not possible when the query processed completelly on the remote node, like for ",(0,n.kt)("inlineCode",{parentName:"li"},"distributed_group_by_no_merge=1"),") on the initiator (can be used for queries with ",(0,n.kt)("inlineCode",{parentName:"li"},"ORDER BY")," and/or ",(0,n.kt)("inlineCode",{parentName:"li"},"LIMIT"),").")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM remote('127.0.0.{2,3}', system.one)\nGROUP BY dummy\nLIMIT 1\nSETTINGS distributed_group_by_no_merge = 1\nFORMAT PrettyCompactMonoBlock\n\n\u250c\u2500dummy\u2500\u2510\n\u2502     0 \u2502\n\u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM remote('127.0.0.{2,3}', system.one)\nGROUP BY dummy\nLIMIT 1\nSETTINGS distributed_group_by_no_merge = 2\nFORMAT PrettyCompactMonoBlock\n\n\u250c\u2500dummy\u2500\u2510\n\u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"distributed-push-down-limit"},"distributed_push_down_limit"),(0,n.kt)("p",null,"Enables or disables ",(0,n.kt)("a",{parentName:"p",href:"#limit"},"LIMIT")," applying on each shard separatelly."),(0,n.kt)("p",null,"This will allow to avoid:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Sending extra rows over network;"),(0,n.kt)("li",{parentName:"ul"},"Processing rows behind the limit on the initiator.")),(0,n.kt)("p",null,"Starting from 21.9 version you cannot get inaccurate results anymore, since ",(0,n.kt)("inlineCode",{parentName:"p"},"distributed_push_down_limit")," changes query execution only if at least one of the conditions met:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#distributed-group-by-no-merge"},"distributed_group_by_no_merge")," > 0."),(0,n.kt)("li",{parentName:"ul"},"Query ",(0,n.kt)("strong",{parentName:"li"},"does not have")," ",(0,n.kt)("inlineCode",{parentName:"li"},"GROUP BY"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"DISTINCT"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"LIMIT BY"),", but it has ",(0,n.kt)("inlineCode",{parentName:"li"},"ORDER BY"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"LIMIT"),"."),(0,n.kt)("li",{parentName:"ul"},"Query ",(0,n.kt)("strong",{parentName:"li"},"has")," ",(0,n.kt)("inlineCode",{parentName:"li"},"GROUP BY"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"DISTINCT"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"LIMIT BY")," with ",(0,n.kt)("inlineCode",{parentName:"li"},"ORDER BY"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"LIMIT")," and:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#optimize-skip-unused-shards"},"optimize_skip_unused_shards")," is enabled."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#optimize-distributed-group-by-sharding-key"},"optimize_distributed_group_by_sharding_key")," is enabled.")))),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#distributed-group-by-no-merge"},"distributed_group_by_no_merge")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#optimize-skip-unused-shards"},"optimize_skip_unused_shards")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#optimize-distributed-group-by-sharding-key"},"optimize_distributed_group_by_sharding_key"))),(0,n.kt)("h2",{id:"optimize-skip-unused-shards-limit"},"optimize_skip_unused_shards_limit"),(0,n.kt)("p",null,"Limit for number of sharding key values, turns off ",(0,n.kt)("inlineCode",{parentName:"p"},"optimize_skip_unused_shards")," if the limit is reached."),(0,n.kt)("p",null,"Too many values may require significant amount for processing, while the benefit is doubtful, since if you have huge number of values in ",(0,n.kt)("inlineCode",{parentName:"p"},"IN (...)"),", then most likely the query will be sent to all shards anyway."),(0,n.kt)("p",null,"Default value: 1000"),(0,n.kt)("h2",{id:"optimize-skip-unused-shards"},"optimize_skip_unused_shards"),(0,n.kt)("p",null,"Enables or disables skipping of unused shards for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/"},"SELECT")," queries that have sharding key condition in ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE/PREWHERE")," (assuming that the data is distributed by sharding key, otherwise a query yields incorrect result)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("h2",{id:"optimize-skip-unused-shards-rewrite-in"},"optimize_skip_unused_shards_rewrite_in"),(0,n.kt)("p",null,"Rewrite IN in query for remote shards to exclude values that does not belong to the shard (requires optimize_skip_unused_shards)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 1 (since it requires ",(0,n.kt)("inlineCode",{parentName:"p"},"optimize_skip_unused_shards")," anyway, which ",(0,n.kt)("inlineCode",{parentName:"p"},"0")," by default)"),(0,n.kt)("h2",{id:"allow-nondeterministic-optimize-skip-unused-shards"},"allow_nondeterministic_optimize_skip_unused_shards"),(0,n.kt)("p",null,"Allow nondeterministic (like ",(0,n.kt)("inlineCode",{parentName:"p"},"rand")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"dictGet"),", since later has some caveats with updates) functions in sharding key."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disallowed."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Allowed.")),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("h2",{id:"optimize-skip-unused-shards-nesting"},"optimize_skip_unused_shards_nesting"),(0,n.kt)("p",null,"Controls ",(0,n.kt)("a",{parentName:"p",href:"#optimize-skip-unused-shards"},(0,n.kt)("inlineCode",{parentName:"a"},"optimize_skip_unused_shards"))," (hence still requires ",(0,n.kt)("a",{parentName:"p",href:"#optimize-skip-unused-shards"},(0,n.kt)("inlineCode",{parentName:"a"},"optimize_skip_unused_shards")),") depends on the nesting level of the distributed query (case when you have ",(0,n.kt)("inlineCode",{parentName:"p"},"Distributed")," table that look into another ",(0,n.kt)("inlineCode",{parentName:"p"},"Distributed")," table)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled, ",(0,n.kt)("inlineCode",{parentName:"li"},"optimize_skip_unused_shards")," works always."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enables ",(0,n.kt)("inlineCode",{parentName:"li"},"optimize_skip_unused_shards")," only for the first level."),(0,n.kt)("li",{parentName:"ul"},"2 \u2014 Enables ",(0,n.kt)("inlineCode",{parentName:"li"},"optimize_skip_unused_shards")," up to the second level.")),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("h2",{id:"force-optimize-skip-unused-shards"},"force_optimize_skip_unused_shards"),(0,n.kt)("p",null,"Enables or disables query execution if ",(0,n.kt)("a",{parentName:"p",href:"#optimize-skip-unused-shards"},"optimize_skip_unused_shards")," is enabled and skipping of unused shards is not possible. If the skipping is not possible and the setting is enabled, an exception will be thrown."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled. ClickHouse does not throw an exception."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled. Query execution is disabled only if the table has a sharding key."),(0,n.kt)("li",{parentName:"ul"},"2 \u2014 Enabled. Query execution is disabled regardless of whether a sharding key is defined for the table.")),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("h2",{id:"settings-force_optimize_skip_unused_shards_nesting"},"force_optimize_skip_unused_shards_nesting"),(0,n.kt)("p",null,"Controls ",(0,n.kt)("a",{parentName:"p",href:"#force-optimize-skip-unused-shards"},(0,n.kt)("inlineCode",{parentName:"a"},"force_optimize_skip_unused_shards"))," (hence still requires ",(0,n.kt)("a",{parentName:"p",href:"#force-optimize-skip-unused-shards"},(0,n.kt)("inlineCode",{parentName:"a"},"force_optimize_skip_unused_shards")),") depends on the nesting level of the distributed query (case when you have ",(0,n.kt)("inlineCode",{parentName:"p"},"Distributed")," table that look into another ",(0,n.kt)("inlineCode",{parentName:"p"},"Distributed")," table)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - Disabled, ",(0,n.kt)("inlineCode",{parentName:"li"},"force_optimize_skip_unused_shards")," works always."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enables ",(0,n.kt)("inlineCode",{parentName:"li"},"force_optimize_skip_unused_shards")," only for the first level."),(0,n.kt)("li",{parentName:"ul"},"2 \u2014 Enables ",(0,n.kt)("inlineCode",{parentName:"li"},"force_optimize_skip_unused_shards")," up to the second level.")),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("h2",{id:"optimize-distributed-group-by-sharding-key"},"optimize_distributed_group_by_sharding_key"),(0,n.kt)("p",null,"Optimize ",(0,n.kt)("inlineCode",{parentName:"p"},"GROUP BY sharding_key")," queries, by avoiding costly aggregation on the initiator server (which will reduce memory usage for the query on the initiator server)."),(0,n.kt)("p",null,"The following types of queries are supported (and all combinations of them):"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT DISTINCT [..., ]sharding_key[, ...] FROM dist")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... FROM dist GROUP BY sharding_key[, ...]")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... FROM dist GROUP BY sharding_key[, ...] ORDER BY x")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... FROM dist GROUP BY sharding_key[, ...] LIMIT 1")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... FROM dist GROUP BY sharding_key[, ...] LIMIT 1 BY x"))),(0,n.kt)("p",null,"The following types of queries are not supported (support for some of them may be added later):"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... GROUP BY sharding_key[, ...] WITH TOTALS")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... GROUP BY sharding_key[, ...] WITH ROLLUP")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... GROUP BY sharding_key[, ...] WITH CUBE")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"SELECT ... GROUP BY sharding_key[, ...] SETTINGS extremes=1"))),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 0"),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#distributed-group-by-no-merge"},"distributed_group_by_no_merge")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#distributed-push-down-limit"},"distributed_push_down_limit")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#optimize-skip-unused-shards"},"optimize_skip_unused_shards"))),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Right now it requires ",(0,n.kt)("inlineCode",{parentName:"p"},"optimize_skip_unused_shards")," (the reason behind this is that one day it may be enabled by default, and it will work correctly only if data was inserted via Distributed table, i.e. data is distributed according to sharding_key).")),(0,n.kt)("h2",{id:"setting-optimize_throw_if_noop"},"optimize_throw_if_noop"),(0,n.kt)("p",null,"Enables or disables throwing an exception if an ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/optimize"},"OPTIMIZE")," query didn\u2019t perform a merge."),(0,n.kt)("p",null,"By default, ",(0,n.kt)("inlineCode",{parentName:"p"},"OPTIMIZE")," returns successfully even if it didn\u2019t do anything. This setting lets you differentiate these situations and get the reason in an exception message."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Throwing an exception is enabled."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Throwing an exception is disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"optimize-skip-merged-partitions"},"optimize_skip_merged_partitions"),(0,n.kt)("p",null,"Enables or disables optimization for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/optimize"},"OPTIMIZE TABLE ... FINAL")," query if there is only one part with level > 0 and it doesn't have expired TTL."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"OPTIMIZE TABLE ... FINAL SETTINGS optimize_skip_merged_partitions=1"))),(0,n.kt)("p",null,"By default, ",(0,n.kt)("inlineCode",{parentName:"p"},"OPTIMIZE TABLE ... FINAL")," query rewrites the one part even if there is only a single part."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 - Enable optimization."),(0,n.kt)("li",{parentName:"ul"},"0 - Disable optimization.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"optimize-functions-to-subcolumns"},"optimize_functions_to_subcolumns"),(0,n.kt)("p",null,"Enables or disables optimization by transforming some functions to reading subcolumns. This reduces the amount of data to read."),(0,n.kt)("p",null,"These functions can be transformed:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/array-functions/#array_functions-length"},"length")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/array/#array-size"},"size0")," subcolumn."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/array-functions/#function-empty"},"empty")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/array/#array-size"},"size0")," subcolumn."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/array-functions/#function-notempty"},"notEmpty")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/array/#array-size"},"size0")," subcolumn."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/operators/#operator-is-null"},"isNull")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#finding-null"},"null")," subcolumn."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/operators/#is-not-null"},"isNotNull")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#finding-null"},"null")," subcolumn."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/count"},"count")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#finding-null"},"null")," subcolumn."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-map-functions/#mapkeys"},"mapKeys")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/map/#map-subcolumns"},"keys")," subcolumn."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/tuple-map-functions/#mapvalues"},"mapValues")," to read the ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/map/#map-subcolumns"},"values")," subcolumn.")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Optimization disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Optimization enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"optimize-trivial-count-query"},"optimize_trivial_count_query"),(0,n.kt)("p",null,"Enables or disables the optimization to trivial query ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT count() FROM table")," using metadata from MergeTree. If you need to use row-level security, disable this setting."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Optimization disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Optimization enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#optimize-functions-to-subcolumns"},"optimize_functions_to_subcolumns"))),(0,n.kt)("h2",{id:"settings-distributed_replica_error_half_life"},"distributed_replica_error_half_life"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Type: seconds"),(0,n.kt)("li",{parentName:"ul"},"Default value: 60 seconds")),(0,n.kt)("p",null,"Controls how fast errors in distributed tables are zeroed. If a replica is unavailable for some time, accumulates 5 errors, and distributed_replica_error_half_life is set to 1 second, then the replica is considered normal 3 seconds after the last error."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-round_robin"},"load_balancing")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Table engine Distributed")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-distributed_replica_error_cap"},"distributed_replica_error_cap")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-distributed_replica_max_ignored_errors"},"distributed_replica_max_ignored_errors"))),(0,n.kt)("h2",{id:"settings-distributed_replica_error_cap"},"distributed_replica_error_cap"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Type: unsigned int"),(0,n.kt)("li",{parentName:"ul"},"Default value: 1000")),(0,n.kt)("p",null,"The error count of each replica is capped at this value, preventing a single replica from accumulating too many errors."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-round_robin"},"load_balancing")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Table engine Distributed")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-distributed_replica_error_half_life"},"distributed_replica_error_half_life")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-distributed_replica_max_ignored_errors"},"distributed_replica_max_ignored_errors"))),(0,n.kt)("h2",{id:"settings-distributed_replica_max_ignored_errors"},"distributed_replica_max_ignored_errors"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Type: unsigned int"),(0,n.kt)("li",{parentName:"ul"},"Default value: 0")),(0,n.kt)("p",null,"The number of errors that will be ignored while choosing replicas (according to ",(0,n.kt)("inlineCode",{parentName:"p"},"load_balancing")," algorithm)."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load_balancing-round_robin"},"load_balancing")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Table engine Distributed")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-distributed_replica_error_cap"},"distributed_replica_error_cap")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#settings-distributed_replica_error_half_life"},"distributed_replica_error_half_life"))),(0,n.kt)("h2",{id:"distributed_directory_monitor_sleep_time_ms"},"distributed_directory_monitor_sleep_time_ms"),(0,n.kt)("p",null,"Base interval for the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Distributed")," table engine to send data. The actual interval grows exponentially in the event of errors."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A positive integer number of milliseconds.")),(0,n.kt)("p",null,"Default value: 100 milliseconds."),(0,n.kt)("h2",{id:"distributed_directory_monitor_max_sleep_time_ms"},"distributed_directory_monitor_max_sleep_time_ms"),(0,n.kt)("p",null,"Maximum interval for the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Distributed")," table engine to send data. Limits exponential growth of the interval set in the ",(0,n.kt)("a",{parentName:"p",href:"#distributed_directory_monitor_sleep_time_ms"},"distributed_directory_monitor_sleep_time_ms")," setting."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A positive integer number of milliseconds.")),(0,n.kt)("p",null,"Default value: 30000 milliseconds (30 seconds)."),(0,n.kt)("h2",{id:"distributed_directory_monitor_batch_inserts"},"distributed_directory_monitor_batch_inserts"),(0,n.kt)("p",null,"Enables/disables inserted data sending in batches."),(0,n.kt)("p",null,"When batch sending is enabled, the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Distributed")," table engine tries to send multiple files of inserted data in one operation instead of sending them separately. Batch sending improves cluster performance by better-utilizing server and network resources."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"distributed_directory_monitor_split_batch_on_failure"},"distributed_directory_monitor_split_batch_on_failure"),(0,n.kt)("p",null,"Enables/disables splitting batches on failures."),(0,n.kt)("p",null,"Sometimes sending particular batch to the remote shard may fail, because of some complex pipeline after (i.e. ",(0,n.kt)("inlineCode",{parentName:"p"},"MATERIALIZED VIEW")," with ",(0,n.kt)("inlineCode",{parentName:"p"},"GROUP BY"),") due to ",(0,n.kt)("inlineCode",{parentName:"p"},"Memory limit exceeded")," or similar errors. In this case, retrying will not help (and this will stuck distributed sends for the table) but sending files from that batch one by one may succeed INSERT."),(0,n.kt)("p",null,"So installing this setting to ",(0,n.kt)("inlineCode",{parentName:"p"},"1")," will disable batching for such batches (i.e. temporary disables ",(0,n.kt)("inlineCode",{parentName:"p"},"distributed_directory_monitor_batch_inserts")," for failed batches)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"This setting also affects broken batches (that may appears because of abnormal server (machine) termination and no ",(0,n.kt)("inlineCode",{parentName:"p"},"fsync_after_insert"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"fsync_directories")," for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"Distributed")," table engine).")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"You should not rely on automatic batch splitting, since this may hurt performance.")),(0,n.kt)("h2",{id:"setting-os-thread-priority"},"os_thread_priority"),(0,n.kt)("p",null,"Sets the priority (",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Nice_(Unix)"},"nice"),") for threads that execute queries. The OS scheduler considers this priority when choosing the next thread to run on each available CPU core."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"To use this setting, you need to set the ",(0,n.kt)("inlineCode",{parentName:"p"},"CAP_SYS_NICE")," capability. The ",(0,n.kt)("inlineCode",{parentName:"p"},"clickhouse-server")," package sets it up during installation. Some virtual environments do not allow you to set the ",(0,n.kt)("inlineCode",{parentName:"p"},"CAP_SYS_NICE")," capability. In this case, ",(0,n.kt)("inlineCode",{parentName:"p"},"clickhouse-server")," shows a message about it at the start.")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"You can set values in the range ",(0,n.kt)("inlineCode",{parentName:"li"},"[-20, 19]"),".")),(0,n.kt)("p",null,"Lower values mean higher priority. Threads with low ",(0,n.kt)("inlineCode",{parentName:"p"},"nice")," priority values are executed more frequently than threads with high values. High values are preferable for long-running non-interactive queries because it allows them to quickly give up resources in favour of short interactive queries when they arrive."),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"query_profiler_real_time_period_ns"},"query_profiler_real_time_period_ns"),(0,n.kt)("p",null,"Sets the period for a real clock timer of the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/optimizing-performance/sampling-query-profiler"},"query profiler"),". Real clock timer counts wall-clock time."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Positive integer number, in nanoseconds."),(0,n.kt)("p",{parentName:"li"},"Recommended values:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"    - 10000000 (100 times a second) nanoseconds and less for single queries.\n    - 1000000000 (once a second) for cluster-wide profiling.\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"0 for turning off the timer."))),(0,n.kt)("p",null,"Type: ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,n.kt)("p",null,"Default value: 1000000000 nanoseconds (once a second)."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"System table ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/trace_log/#system_tables-trace_log"},"trace_log"))),(0,n.kt)("h2",{id:"query_profiler_cpu_time_period_ns"},"query_profiler_cpu_time_period_ns"),(0,n.kt)("p",null,"Sets the period for a CPU clock timer of the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/optimizing-performance/sampling-query-profiler"},"query profiler"),". This timer counts only CPU time."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"A positive integer number of nanoseconds."),(0,n.kt)("p",{parentName:"li"},"Recommended values:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"    - 10000000 (100 times a second) nanoseconds and more for single queries.\n    - 1000000000 (once a second) for cluster-wide profiling.\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"0 for turning off the timer."))),(0,n.kt)("p",null,"Type: ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,n.kt)("p",null,"Default value: 1000000000 nanoseconds."),(0,n.kt)("p",null,"See also:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"System table ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/trace_log/#system_tables-trace_log"},"trace_log"))),(0,n.kt)("h2",{id:"memory_profiler_step"},"memory_profiler_step"),(0,n.kt)("p",null,"Sets the step of memory profiler. Whenever query memory usage becomes larger than every next step in number of bytes the memory profiler will collect the allocating stacktrace and will write it into ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/trace_log#system_tables-trace_log"},"trace_log"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"A positive integer number of bytes.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"0 for turning off the memory profiler."))),(0,n.kt)("p",null,"Default value: 4,194,304 bytes (4 MiB)."),(0,n.kt)("h2",{id:"memory_profiler_sample_probability"},"memory_profiler_sample_probability"),(0,n.kt)("p",null,"Sets the probability of collecting stacktraces at random allocations and deallocations and writing them into ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/trace_log#system_tables-trace_log"},"trace_log"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"A positive floating-point number in the range ","[0..1]",".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"0.0 for turning off the memory sampling."))),(0,n.kt)("p",null,"Default value: 0.0."),(0,n.kt)("h2",{id:"trace_profile_events"},"trace_profile_events"),(0,n.kt)("p",null,"Enables or disables collecting stacktraces on each update of profile events along with the name of profile event and the value of increment and sending them into ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/trace_log#system_tables-trace_log"},"trace_log"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Tracing of profile events enabled."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Tracing of profile events disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"settings-allow_introspection_functions"},"allow_introspection_functions"),(0,n.kt)("p",null,"Enables or disables ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/introspection"},"introspections functions")," for query profiling."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Introspection functions enabled."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Introspection functions disabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/operations/optimizing-performance/sampling-query-profiler"},"Sampling Query Profiler")),(0,n.kt)("li",{parentName:"ul"},"System table ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/trace_log/#system_tables-trace_log"},"trace_log"))),(0,n.kt)("h2",{id:"input-format-parallel-parsing"},"input_format_parallel_parsing"),(0,n.kt)("p",null,"Enables or disables order-preserving parallel parsing of data formats. Supported only for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#tabseparated"},"TSV"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#tskv"},"TKSV"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#csv"},"CSV")," and ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#jsoneachrow"},"JSONEachRow")," formats."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"output-format-parallel-formatting"},"output_format_parallel_formatting"),(0,n.kt)("p",null,"Enables or disables parallel formatting of data formats. Supported only for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#tabseparated"},"TSV"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#tskv"},"TKSV"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#csv"},"CSV")," and ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#jsoneachrow"},"JSONEachRow")," formats."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"min-chunk-bytes-for-parallel-parsing"},"min_chunk_bytes_for_parallel_parsing"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Type: unsigned int"),(0,n.kt)("li",{parentName:"ul"},"Default value: 1 MiB")),(0,n.kt)("p",null,"The minimum chunk size in bytes, which each thread will parse in parallel."),(0,n.kt)("h2",{id:"merge_selecting_sleep_ms"},"merge_selecting_sleep_ms"),(0,n.kt)("p",null,"Sleep time for merge selecting when no part is selected. A lower setting triggers selecting tasks in ",(0,n.kt)("inlineCode",{parentName:"p"},"background_schedule_pool")," frequently, which results in a large number of requests to ClickHouse Keeper in large-scale clusters."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"5000"),"."),(0,n.kt)("h2",{id:"parallel_distributed_insert_select"},"parallel_distributed_insert_select"),(0,n.kt)("p",null,"Enables parallel distributed ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT ... SELECT")," query."),(0,n.kt)("p",null,"If we execute ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT INTO distributed_table_a SELECT ... FROM distributed_table_b")," queries and both tables use the same cluster, and both tables are either ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"replicated")," or non-replicated, then this query is processed locally on every shard."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT")," will be executed on each shard from the underlying table of the distributed engine."),(0,n.kt)("li",{parentName:"ul"},"2 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," will be executed on each shard from/to the underlying table of the distributed engine.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"insert_distributed_sync"},"insert_distributed_sync"),(0,n.kt)("p",null,"Enables or disables synchronous data insertion into a ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed/#distributed"},"Distributed")," table."),(0,n.kt)("p",null,"By default, when inserting data into a ",(0,n.kt)("inlineCode",{parentName:"p"},"Distributed")," table, the ClickHouse server sends data to cluster nodes in asynchronous mode. When ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_distributed_sync=1"),", the data is processed synchronously, and the ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," operation succeeds only after all the data is saved on all shards (at least one replica for each shard if ",(0,n.kt)("inlineCode",{parentName:"p"},"internal_replication")," is true)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Data is inserted in asynchronous mode."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Data is inserted in synchronous mode.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed/#distributed"},"Distributed Table Engine")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/system/#query-language-system-distributed"},"Managing Distributed Tables"))),(0,n.kt)("h2",{id:"insert_shard_id"},"insert_shard_id"),(0,n.kt)("p",null,"If not ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),", specifies the shard of ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed/#distributed"},"Distributed")," table into which the data will be inserted synchronously."),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"insert_shard_id")," value is incorrect, the server will throw an exception."),(0,n.kt)("p",null,"To get the number of shards on ",(0,n.kt)("inlineCode",{parentName:"p"},"requested_cluster"),", you can check server config or use this query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniq(shard_num) FROM system.clusters WHERE cluster = 'requested_cluster';\n")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"Any number from ",(0,n.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,n.kt)("inlineCode",{parentName:"li"},"shards_num")," of corresponding ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed/#distributed"},"Distributed")," table.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE x AS system.numbers ENGINE = MergeTree ORDER BY number;\nCREATE TABLE x_dist AS x ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), x);\nINSERT INTO x_dist SELECT * FROM numbers(5) SETTINGS insert_shard_id = 1;\nSELECT * FROM x_dist ORDER BY number ASC;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500number\u2500\u2510\n\u2502      0 \u2502\n\u2502      0 \u2502\n\u2502      1 \u2502\n\u2502      1 \u2502\n\u2502      2 \u2502\n\u2502      2 \u2502\n\u2502      3 \u2502\n\u2502      3 \u2502\n\u2502      4 \u2502\n\u2502      4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"use_compact_format_in_distributed_parts_names"},"use_compact_format_in_distributed_parts_names"),(0,n.kt)("p",null,"Uses compact format for storing blocks for async (",(0,n.kt)("inlineCode",{parentName:"p"},"insert_distributed_sync"),") INSERT into tables with ",(0,n.kt)("inlineCode",{parentName:"p"},"Distributed")," engine."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Uses ",(0,n.kt)("inlineCode",{parentName:"li"},"user[:password]@host:port#default_database")," directory format."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Uses ",(0,n.kt)("inlineCode",{parentName:"li"},"[shard{shard_index}[_replica{replica_index}]]")," directory format.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"with ",(0,n.kt)("inlineCode",{parentName:"li"},"use_compact_format_in_distributed_parts_names=0")," changes from cluster definition will not be applied for async INSERT."),(0,n.kt)("li",{parentName:"ul"},"with ",(0,n.kt)("inlineCode",{parentName:"li"},"use_compact_format_in_distributed_parts_names=1")," changing the order of the nodes in the cluster definition, will change the ",(0,n.kt)("inlineCode",{parentName:"li"},"shard_index"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"replica_index")," so be aware."))),(0,n.kt)("h2",{id:"background_buffer_flush_schedule_pool_size"},"background_buffer_flush_schedule_pool_size"),(0,n.kt)("p",null,"Sets the number of threads performing background flush in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/buffer"},"Buffer"),"-engine tables. This setting is applied at the ClickHouse server start and can\u2019t be changed in a user session."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 16."),(0,n.kt)("h2",{id:"background_move_pool_size"},"background_move_pool_size"),(0,n.kt)("p",null,"Sets the number of threads performing background moves of data parts for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree/#table_engine-mergetree-multiple-volumes"},"MergeTree"),"-engine tables. This setting is applied at the ClickHouse server start and can\u2019t be changed in a user session."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 8."),(0,n.kt)("h2",{id:"background_schedule_pool_size"},"background_schedule_pool_size"),(0,n.kt)("p",null,"Sets the number of threads performing background tasks for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"replicated")," tables, ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/integrations/kafka"},"Kafka")," streaming, ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/server-configuration-parameters/settings/#server-settings-dns-cache-update-period"},"DNS cache updates"),". This setting is applied at ClickHouse server start and can\u2019t be changed in a user session."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 128."),(0,n.kt)("h2",{id:"background_fetches_pool_size"},"background_fetches_pool_size"),(0,n.kt)("p",null,"Sets the number of threads performing background fetches for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"replicated")," tables. This setting is applied at the ClickHouse server start and can\u2019t be changed in a user session. For production usage with frequent small insertions or slow ZooKeeper cluster it is recommended to use default value."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 8."),(0,n.kt)("h2",{id:"always_fetch_merged_part"},"always_fetch_merged_part"),(0,n.kt)("p",null,"Prohibits data parts merging in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"Replicated","*","MergeTree"),"-engine tables."),(0,n.kt)("p",null,"When merging is prohibited, the replica never merges parts and always downloads merged parts from other replicas. If there is no required data yet, the replica waits for it. CPU and disk load on the replica server decreases, but the network load on the cluster increases. This setting can be useful on servers with relatively weak CPUs or slow disks, such as servers for backups storage."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"Replicated*MergeTree"),"-engine tables merge data parts at the replica."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"Replicated*MergeTree"),"-engine tables do not merge data parts at the replica. The tables download merged data parts from other replicas.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/replication"},"Data Replication"))),(0,n.kt)("h2",{id:"background_distributed_schedule_pool_size"},"background_distributed_schedule_pool_size"),(0,n.kt)("p",null,"Sets the number of threads performing background tasks for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/distributed"},"distributed")," sends. This setting is applied at the ClickHouse server start and can\u2019t be changed in a user session."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 16."),(0,n.kt)("h2",{id:"background_message_broker_schedule_pool_size"},"background_message_broker_schedule_pool_size"),(0,n.kt)("p",null,"Sets the number of threads performing background tasks for message streaming. This setting is applied at the ClickHouse server start and can\u2019t be changed in a user session."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 16."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/integrations/kafka/#kafka"},"Kafka")," engine."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/integrations/rabbitmq/#rabbitmq-engine"},"RabbitMQ")," engine.")),(0,n.kt)("h2",{id:"validate_polygons"},"validate_polygons"),(0,n.kt)("p",null,"Enables or disables throwing an exception in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/geo/#pointinpolygon"},"pointInPolygon")," function, if the polygon is self-intersecting or self-tangent."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Throwing an exception is disabled. ",(0,n.kt)("inlineCode",{parentName:"li"},"pointInPolygon")," accepts invalid polygons and returns possibly incorrect results for them."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Throwing an exception is enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("h2",{id:"transform_null_in"},"transform_null_in"),(0,n.kt)("p",null,"Enables equality of ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax/#null-literal"},"NULL")," values for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/operators/in"},"IN")," operator."),(0,n.kt)("p",null,"By default, ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL")," values can\u2019t be compared because ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL")," means undefined value. Thus, comparison ",(0,n.kt)("inlineCode",{parentName:"p"},"expr = NULL")," must always return ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),". With this setting ",(0,n.kt)("inlineCode",{parentName:"p"},"NULL = NULL")," returns ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," for ",(0,n.kt)("inlineCode",{parentName:"p"},"IN")," operator."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Comparison of ",(0,n.kt)("inlineCode",{parentName:"li"},"NULL")," values in ",(0,n.kt)("inlineCode",{parentName:"li"},"IN")," operator returns ",(0,n.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Comparison of ",(0,n.kt)("inlineCode",{parentName:"li"},"NULL")," values in ",(0,n.kt)("inlineCode",{parentName:"li"},"IN")," operator returns ",(0,n.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Consider the ",(0,n.kt)("inlineCode",{parentName:"p"},"null_in")," table:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500idx\u2500\u252c\u2500\u2500\u2500\u2500\u2500i\u2500\u2510\n\u2502    1 \u2502     1 \u2502\n\u2502    2 \u2502  NULL \u2502\n\u2502    3 \u2502     3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT idx, i FROM null_in WHERE i IN (1, NULL) SETTINGS transform_null_in = 0;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500idx\u2500\u252c\u2500\u2500\u2500\u2500i\u2500\u2510\n\u2502    1 \u2502    1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT idx, i FROM null_in WHERE i IN (1, NULL) SETTINGS transform_null_in = 1;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500idx\u2500\u252c\u2500\u2500\u2500\u2500\u2500i\u2500\u2510\n\u2502    1 \u2502     1 \u2502\n\u2502    2 \u2502  NULL \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/operators/in/#in-null-processing"},"NULL Processing in IN Operators"))),(0,n.kt)("h2",{id:"low_cardinality_max_dictionary_size"},"low_cardinality_max_dictionary_size"),(0,n.kt)("p",null,"Sets a maximum size in rows of a shared global dictionary for the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/lowcardinality"},"LowCardinality")," data type that can be written to a storage file system. This setting prevents issues with RAM in case of unlimited dictionary growth. All the data that can\u2019t be encoded due to maximum dictionary size limitation ClickHouse writes in an ordinary method."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer.")),(0,n.kt)("p",null,"Default value: 8192."),(0,n.kt)("h2",{id:"low_cardinality_use_single_dictionary_for_part"},"low_cardinality_use_single_dictionary_for_part"),(0,n.kt)("p",null,"Turns on or turns off using of single dictionary for the data part."),(0,n.kt)("p",null,"By default, the ClickHouse server monitors the size of dictionaries and if a dictionary overflows then the server starts to write the next one. To prohibit creating several dictionaries set ",(0,n.kt)("inlineCode",{parentName:"p"},"low_cardinality_use_single_dictionary_for_part = 1"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Creating several dictionaries for the data part is prohibited."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Creating several dictionaries for the data part is not prohibited.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"low_cardinality_allow_in_native_format"},"low_cardinality_allow_in_native_format"),(0,n.kt)("p",null,"Allows or restricts using the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/lowcardinality"},"LowCardinality")," data type with the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/interfaces/formats/#native"},"Native")," format."),(0,n.kt)("p",null,"If usage of ",(0,n.kt)("inlineCode",{parentName:"p"},"LowCardinality")," is restricted, ClickHouse server converts ",(0,n.kt)("inlineCode",{parentName:"p"},"LowCardinality"),"-columns to ordinary ones for ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries, and convert ordinary columns to ",(0,n.kt)("inlineCode",{parentName:"p"},"LowCardinality"),"-columns for ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," queries."),(0,n.kt)("p",null,"This setting is required mainly for third-party clients which do not support ",(0,n.kt)("inlineCode",{parentName:"p"},"LowCardinality")," data type."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Usage of ",(0,n.kt)("inlineCode",{parentName:"li"},"LowCardinality")," is not restricted."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Usage of ",(0,n.kt)("inlineCode",{parentName:"li"},"LowCardinality")," is restricted.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("h2",{id:"allow_suspicious_low_cardinality_types"},"allow_suspicious_low_cardinality_types"),(0,n.kt)("p",null,"Allows or restricts using ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/lowcardinality"},"LowCardinality")," with data types with fixed size of 8 bytes or less: numeric data types and ",(0,n.kt)("inlineCode",{parentName:"p"},"FixedString(8_bytes_or_less)"),"."),(0,n.kt)("p",null,"For small fixed values using of ",(0,n.kt)("inlineCode",{parentName:"p"},"LowCardinality")," is usually inefficient, because ClickHouse stores a numeric index for each row. As a result:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Disk space usage can rise."),(0,n.kt)("li",{parentName:"ul"},"RAM consumption can be higher, depending on a dictionary size."),(0,n.kt)("li",{parentName:"ul"},"Some functions can work slower due to extra coding/encoding operations.")),(0,n.kt)("p",null,"Merge times in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree"),"-engine tables can grow due to all the reasons described above."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Usage of ",(0,n.kt)("inlineCode",{parentName:"li"},"LowCardinality")," is not restricted."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Usage of ",(0,n.kt)("inlineCode",{parentName:"li"},"LowCardinality")," is restricted.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"min-insert-block-size-rows-for-materialized-views"},"min_insert_block_size_rows_for_materialized_views"),(0,n.kt)("p",null,"Sets the minimum number of rows in the block which can be inserted into a table by an ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query. Smaller-sized blocks are squashed into bigger ones. This setting is applied only for blocks inserted into ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view"},"materialized view"),". By adjusting this setting, you control blocks squashing while pushing to materialized view and avoid excessive memory usage."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Squashing disabled.")),(0,n.kt)("p",null,"Default value: 1048576."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#min-insert-block-size-rows"},"min_insert_block_size_rows"))),(0,n.kt)("h2",{id:"min-insert-block-size-bytes-for-materialized-views"},"min_insert_block_size_bytes_for_materialized_views"),(0,n.kt)("p",null,"Sets the minimum number of bytes in the block which can be inserted into a table by an ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," query. Smaller-sized blocks are squashed into bigger ones. This setting is applied only for blocks inserted into ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view"},"materialized view"),". By adjusting this setting, you control blocks squashing while pushing to materialized view and avoid excessive memory usage."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Squashing disabled.")),(0,n.kt)("p",null,"Default value: 268435456."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#min-insert-block-size-bytes"},"min_insert_block_size_bytes"))),(0,n.kt)("h2",{id:"optimize_read_in_order"},"optimize_read_in_order"),(0,n.kt)("p",null,"Enables ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/order-by/#optimize_read_in_order"},"ORDER BY")," optimization in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/"},"SELECT")," queries for reading data from ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"ORDER BY")," optimization is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"ORDER BY")," optimization is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/order-by/#optimize_read_in_order"},"ORDER BY Clause"))),(0,n.kt)("h2",{id:"optimize_aggregation_in_order"},"optimize_aggregation_in_order"),(0,n.kt)("p",null,"Enables ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/group-by"},"GROUP BY")," optimization in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/"},"SELECT")," queries for aggregating data in corresponding order in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"GROUP BY")," optimization is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"GROUP BY")," optimization is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/group-by/#aggregation-in-order"},"GROUP BY optimization"))),(0,n.kt)("h2",{id:"mutations_sync"},"mutations_sync"),(0,n.kt)("p",null,"Allows to execute ",(0,n.kt)("inlineCode",{parentName:"p"},"ALTER TABLE ... UPDATE|DELETE")," queries (",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/#mutations"},"mutations"),") synchronously."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - Mutations execute asynchronously."),(0,n.kt)("li",{parentName:"ul"},"1 - The query waits for all mutations to complete on the current server."),(0,n.kt)("li",{parentName:"ul"},"2 - The query waits for all mutations to complete on all replicas (if they exist).")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/#synchronicity-of-alter-queries"},"Synchronicity of ALTER Queries")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/#mutations"},"Mutations"))),(0,n.kt)("h2",{id:"ttl_only_drop_parts"},"ttl_only_drop_parts"),(0,n.kt)("p",null,"Enables or disables complete dropping of data parts where all rows are expired in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," tables."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"ttl_only_drop_parts")," is disabled (by default), the ClickHouse server only deletes expired rows according to their TTL."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"ttl_only_drop_parts")," is enabled, the ClickHouse server drops a whole part when all rows in it are expired."),(0,n.kt)("p",null,"Dropping whole parts instead of partial cleaning TTL-d rows allows having shorter ",(0,n.kt)("inlineCode",{parentName:"p"},"merge_with_ttl_timeout")," times and lower impact on system performance."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The complete dropping of data parts is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 The complete dropping of data parts is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree/#mergetree-query-clauses"},"CREATE TABLE query clauses and settings")," (",(0,n.kt)("inlineCode",{parentName:"li"},"merge_with_ttl_timeout")," setting)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree/#mergetree-table-ttl"},"Table TTL"))),(0,n.kt)("h2",{id:"lock_acquire_timeout"},"lock_acquire_timeout"),(0,n.kt)("p",null,"Defines how many seconds a locking request waits before failing."),(0,n.kt)("p",null,'Locking timeout is used to protect from deadlocks while executing read/write operations with tables. When the timeout expires and the locking request fails, the ClickHouse server throws an exception "Locking attempt timed out! Possible deadlock avoided. Client should retry." with error code ',(0,n.kt)("inlineCode",{parentName:"p"},"DEADLOCK_AVOIDED"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer (in seconds)."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 No locking timeout.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"120")," seconds."),(0,n.kt)("h2",{id:"cast_keep_nullable"},"cast_keep_nullable"),(0,n.kt)("p",null,"Enables or disables keeping of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Nullable")," data type in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/type-conversion-functions/#type_conversion_function-cast"},"CAST")," operations."),(0,n.kt)("p",null,"When the setting is enabled and the argument of ",(0,n.kt)("inlineCode",{parentName:"p"},"CAST")," function is ",(0,n.kt)("inlineCode",{parentName:"p"},"Nullable"),", the result is also transformed to ",(0,n.kt)("inlineCode",{parentName:"p"},"Nullable")," type. When the setting is disabled, the result always has the destination type exactly."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The ",(0,n.kt)("inlineCode",{parentName:"li"},"CAST")," result has exactly the destination type specified."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 If the argument type is ",(0,n.kt)("inlineCode",{parentName:"li"},"Nullable"),", the ",(0,n.kt)("inlineCode",{parentName:"li"},"CAST")," result is transformed to ",(0,n.kt)("inlineCode",{parentName:"li"},"Nullable(DestinationDataType)"),".")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Examples")),(0,n.kt)("p",null,"The following query results in the destination data type exactly:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET cast_keep_nullable = 0;\nSELECT CAST(toNullable(toInt32(0)) AS Int32) as x, toTypeName(x);\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500x\u2500\u252c\u2500toTypeName(CAST(toNullable(toInt32(0)), 'Int32'))\u2500\u2510\n\u2502 0 \u2502 Int32                                             \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"The following query results in the ",(0,n.kt)("inlineCode",{parentName:"p"},"Nullable")," modification on the destination data type:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET cast_keep_nullable = 1;\nSELECT CAST(toNullable(toInt32(0)) AS Int32) as x, toTypeName(x);\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500x\u2500\u252c\u2500toTypeName(CAST(toNullable(toInt32(0)), 'Int32'))\u2500\u2510\n\u2502 0 \u2502 Nullable(Int32)                                   \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/type-conversion-functions/#type_conversion_function-cast"},"CAST")," function")),(0,n.kt)("h2",{id:"system_events_show_zero_values"},"system_events_show_zero_values"),(0,n.kt)("p",null,"Allows to select zero-valued events from ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/events"},(0,n.kt)("inlineCode",{parentName:"a"},"system.events")),"."),(0,n.kt)("p",null,"Some monitoring systems require passing all the metrics values to them for each checkpoint, even if the metric value is zero."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Examples")),(0,n.kt)("p",null,"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM system.events WHERE event='QueryMemoryLimitExceeded';\n")),(0,n.kt)("p",null,"Result"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"Ok.\n")),(0,n.kt)("p",null,"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET system_events_show_zero_values = 1;\nSELECT * FROM system.events WHERE event='QueryMemoryLimitExceeded';\n")),(0,n.kt)("p",null,"Result"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500event\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500value\u2500\u252c\u2500description\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 QueryMemoryLimitExceeded \u2502     0 \u2502 Number of times when memory limit exceeded for query. \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"allow-nullable-key"},"allow_nullable_key"),(0,n.kt)("p",null,"Allows using of the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#data_type-nullable"},"Nullable"),"-typed values in a sorting and a primary key for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree/#table_engines-mergetree"},"MergeTree")," tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"Nullable"),"-type expressions are allowed in keys."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"Nullable"),"-type expressions are not allowed in keys.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Nullable primary key usually indicates bad design. It is forbidden in almost all main stream DBMS. The feature is mainly for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/aggregatingmergetree"},"AggregatingMergeTree")," and is not heavily tested. Use with care.")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Do not enable this feature in version ",(0,n.kt)("inlineCode",{parentName:"p"},"<= 21.8"),". It's not properly implemented and may lead to server crash.")),(0,n.kt)("h2",{id:"aggregate_functions_null_for_empty"},"aggregate_functions_null_for_empty"),(0,n.kt)("p",null,"Enables or disables rewriting all aggregate functions in a query, adding ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/combinators/#agg-functions-combinator-ornull"},"-OrNull")," suffix to them. Enable it for SQL standard compatibility.\nIt is implemented via query rewrite (similar to ",(0,n.kt)("a",{parentName:"p",href:"#settings-count_distinct_implementation"},"count_distinct_implementation")," setting) to get consistent results for distributed queries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Consider the following query with aggregate functions:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SUM(-1), MAX(0) FROM system.one WHERE 0;\n")),(0,n.kt)("p",null,"With ",(0,n.kt)("inlineCode",{parentName:"p"},"aggregate_functions_null_for_empty = 0")," it would produce:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500SUM(-1)\u2500\u252c\u2500MAX(0)\u2500\u2510\n\u2502       0 \u2502      0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"With ",(0,n.kt)("inlineCode",{parentName:"p"},"aggregate_functions_null_for_empty = 1")," the result would be:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500SUMOrNull(-1)\u2500\u252c\u2500MAXOrNull(0)\u2500\u2510\n\u2502          NULL \u2502         NULL \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"union-default-mode"},"union_default_mode"),(0,n.kt)("p",null,"Sets a mode for combining ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," query results. The setting is only used when shared with ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/union"},"UNION")," without explicitly specifying the ",(0,n.kt)("inlineCode",{parentName:"p"},"UNION ALL")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"UNION DISTINCT"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"'DISTINCT'")," \u2014 ClickHouse outputs rows as a result of combining queries removing duplicate rows."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"'ALL'")," \u2014 ClickHouse outputs all rows as a result of combining queries including duplicate rows."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"''")," \u2014 ClickHouse generates an exception when used with ",(0,n.kt)("inlineCode",{parentName:"li"},"UNION"),".")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,n.kt)("p",null,"See examples in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/union"},"UNION"),"."),(0,n.kt)("h2",{id:"default_table_engine"},"default_table_engine"),(0,n.kt)("p",null,"Default table engine to use when ",(0,n.kt)("inlineCode",{parentName:"p"},"ENGINE")," is not set in a ",(0,n.kt)("inlineCode",{parentName:"p"},"CREATE")," statement."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a string representing any valid table engine name")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"None")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET default_table_engine = 'Log';\n\nSELECT name, value, changed FROM system.settings WHERE name = 'default_table_engine';\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500value\u2500\u252c\u2500changed\u2500\u2510\n\u2502 default_table_engine \u2502 Log   \u2502       1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"In this example, any new table that does not specify an ",(0,n.kt)("inlineCode",{parentName:"p"},"Engine")," will use the ",(0,n.kt)("inlineCode",{parentName:"p"},"Log")," table engine:"),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE my_table (\n    x UInt32,\n    y UInt32\n);\n\nSHOW CREATE TABLE my_table;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 CREATE TABLE default.my_table\n(\n    `x` UInt32,\n    `y` UInt32\n)\nENGINE = Log\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"data_type_default_nullable"},"data_type_default_nullable"),(0,n.kt)("p",null,"Allows data types without explicit modifiers ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/table/#null-modifiers"},"NULL or NOT NULL")," in column definition will be ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#data_type-nullable"},"Nullable"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 The data types in column definitions are set to ",(0,n.kt)("inlineCode",{parentName:"li"},"Nullable")," by default."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The data types in column definitions are set to not ",(0,n.kt)("inlineCode",{parentName:"li"},"Nullable")," by default.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"execute-merges-on-single-replica-time-threshold"},"execute_merges_on_single_replica_time_threshold"),(0,n.kt)("p",null,"Enables special logic to perform merges on replicas."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer (in seconds)."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Special merges logic is not used. Merges happen in the usual way on all the replicas.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Usage")),(0,n.kt)("p",null,"Selects one replica to perform the merge on. Sets the time threshold from the start of the merge. Other replicas wait for the merge to finish, then download the result. If the time threshold passes and the selected replica does not perform the merge, then the merge is performed on other replicas as usual."),(0,n.kt)("p",null,"High values for that threshold may lead to replication delays."),(0,n.kt)("p",null,"It can be useful when merges are CPU bounded not IO bounded (performing heavy data compression, calculating aggregate functions or default expressions that require a large amount of calculations, or just very high number of tiny merges)."),(0,n.kt)("h2",{id:"max-final-threads"},"max_final_threads"),(0,n.kt)("p",null,"Sets the maximum number of parallel threads for the ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," query data read phase with the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/from/#select-from-final"},"FINAL")," modifier."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 or 1 \u2014 Disabled. ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT")," queries are executed in a single thread.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"16"),"."),(0,n.kt)("h2",{id:"opentelemetry-start-trace-probability"},"opentelemetry_start_trace_probability"),(0,n.kt)("p",null,"Sets the probability that the ClickHouse can start a trace for executed queries (if no parent ",(0,n.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/trace-context/"},"trace context")," is supplied)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The trace for all executed queries is disabled (if no parent trace context is supplied)."),(0,n.kt)("li",{parentName:"ul"},"Positive floating-point number in the range ","[0..1]",". For example, if the setting value is ",(0,n.kt)("inlineCode",{parentName:"li"},"0,5"),", ClickHouse can start a trace on average for half of the queries."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 The trace for all executed queries is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"optimize-on-insert"},"optimize_on_insert"),(0,n.kt)("p",null,"Enables or disables data transformation before the insertion, as if merge was done on this block (according to table engine)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"The difference between enabled and disabled:"),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET optimize_on_insert = 1;\n\nCREATE TABLE test1 (`FirstTable` UInt32) ENGINE = ReplacingMergeTree ORDER BY FirstTable;\n\nINSERT INTO test1 SELECT number % 2 FROM numbers(5);\n\nSELECT * FROM test1;\n\nSET optimize_on_insert = 0;\n\nCREATE TABLE test2 (`SecondTable` UInt32) ENGINE = ReplacingMergeTree ORDER BY SecondTable;\n\nINSERT INTO test2 SELECT number % 2 FROM numbers(5);\n\nSELECT * FROM test2;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500FirstTable\u2500\u2510\n\u2502          0 \u2502\n\u2502          1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500SecondTable\u2500\u2510\n\u2502           0 \u2502\n\u2502           0 \u2502\n\u2502           0 \u2502\n\u2502           1 \u2502\n\u2502           1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Note that this setting influences ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view/#materialized"},"Materialized view")," and ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/database-engines/materialized-mysql"},"MaterializedMySQL")," behaviour."),(0,n.kt)("h2",{id:"engine-file-empty_if-not-exists"},"engine_file_empty_if_not_exists"),(0,n.kt)("p",null,"Allows to select data from a file engine table without file."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT")," throws exception."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT")," returns empty result.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"engine-file-truncate-on-insert"},"engine_file_truncate_on_insert"),(0,n.kt)("p",null,"Enables or disables truncate before insert in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/special/file"},"File")," engine tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query appends new data to the end of the file."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query replaces existing content of the file with the new data.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"s3_truncate_on_insert"},"s3_truncate_on_insert"),(0,n.kt)("p",null,"Enables or disables truncate before inserts in s3 engine tables. If disabled, an exception will be thrown on insert attempts if an S3 object already exists. "),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query appends new data to the end of the file."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query replaces existing content of the file with the new data.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"hdfs_truncate_on_insert"},"hdfs_truncate_on_insert"),(0,n.kt)("p",null,"Enables or disables truncation before an insert in hdfs engine tables. If disabled, an exception will be thrown on an attempt to insert if a file in HDFS already exists. "),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query appends new data to the end of the file."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query replaces existing content of the file with the new data.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"engine_file_allow_create_multiple_files"},"engine_file_allow_create_multiple_files"),(0,n.kt)("p",null,"Enables or disables creating a new file on each insert in file engine tables if the format has the suffix (",(0,n.kt)("inlineCode",{parentName:"p"},"JSON"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"ORC"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Parquet"),", etc.). If enabled, on each insert a new file will be created with a name following this pattern:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"data.Parquet")," -> ",(0,n.kt)("inlineCode",{parentName:"p"},"data.1.Parquet")," -> ",(0,n.kt)("inlineCode",{parentName:"p"},"data.2.Parquet"),", etc. "),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query appends new data to the end of the file."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query replaces existing content of the file with the new data.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"s3_create_new_file_on_insert"},"s3_create_new_file_on_insert"),(0,n.kt)("p",null,"Enables or disables creating a new file on each insert in s3 engine tables. If enabled, on each insert a new S3 object will be created with the key, similar to this pattern:"),(0,n.kt)("p",null,"initial: ",(0,n.kt)("inlineCode",{parentName:"p"},"data.Parquet.gz")," -> ",(0,n.kt)("inlineCode",{parentName:"p"},"data.1.Parquet.gz")," -> ",(0,n.kt)("inlineCode",{parentName:"p"},"data.2.Parquet.gz"),", etc. "),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query appends new data to the end of the file."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query replaces existing content of the file with the new data.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"hdfs_create_new_file_on_insert"},"hdfs_create_new_file_on_insert"),(0,n.kt)("p",null,"Enables or disables creating a new file on each insert in HDFS engine tables. If enabled, on each insert a new HDFS file will be created with the name, similar to this pattern:"),(0,n.kt)("p",null,"initial: ",(0,n.kt)("inlineCode",{parentName:"p"},"data.Parquet.gz")," -> ",(0,n.kt)("inlineCode",{parentName:"p"},"data.1.Parquet.gz")," -> ",(0,n.kt)("inlineCode",{parentName:"p"},"data.2.Parquet.gz"),", etc. "),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query appends new data to the end of the file."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,n.kt)("inlineCode",{parentName:"li"},"INSERT")," query replaces existing content of the file with the new data.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"allow-experimental-geo-types"},"allow_experimental_geo_types"),(0,n.kt)("p",null,"Allows working with experimental ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/geo"},"geo data types"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Working with geo data types is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Working with geo data types is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"database_atomic_wait_for_drop_and_detach_synchronously"},"database_atomic_wait_for_drop_and_detach_synchronously"),(0,n.kt)("p",null,"Adds a modifier ",(0,n.kt)("inlineCode",{parentName:"p"},"SYNC")," to all ",(0,n.kt)("inlineCode",{parentName:"p"},"DROP")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"DETACH")," queries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Queries will be executed with delay."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Queries will be executed without delay.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"show_table_uuid_in_table_create_query_if_not_nil"},"show_table_uuid_in_table_create_query_if_not_nil"),(0,n.kt)("p",null,"Sets the ",(0,n.kt)("inlineCode",{parentName:"p"},"SHOW TABLE")," query display."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The query will be displayed without table UUID."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 The query will be displayed with table UUID.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"allow-experimental-live-view"},"allow_experimental_live_view"),(0,n.kt)("p",null,"Allows creation of experimental ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view/#live-view"},"live views"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Working with live views is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Working with live views is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"live-view-heartbeat-interval"},"live_view_heartbeat_interval"),(0,n.kt)("p",null,"Sets the heartbeat interval in seconds to indicate ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view/#live-view"},"live view")," is alive ."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"15"),"."),(0,n.kt)("h2",{id:"max-live-view-insert-blocks-before-refresh"},"max_live_view_insert_blocks_before_refresh"),(0,n.kt)("p",null,"Sets the maximum number of inserted blocks after which mergeable blocks are dropped and query for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view/#live-view"},"live view")," is re-executed."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"64"),"."),(0,n.kt)("h2",{id:"periodic-live-view-refresh"},"periodic_live_view_refresh"),(0,n.kt)("p",null,"Sets the interval in seconds after which periodically refreshed ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/create/view/#live-view"},"live view")," is forced to refresh."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"60"),"."),(0,n.kt)("h2",{id:"http_connection_timeout"},"http_connection_timeout"),(0,n.kt)("p",null,"HTTP connection timeout (in seconds)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 - Disabled (infinite timeout).")),(0,n.kt)("p",null,"Default value: 1."),(0,n.kt)("h2",{id:"http_send_timeout"},"http_send_timeout"),(0,n.kt)("p",null,"HTTP send timeout (in seconds)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 - Disabled (infinite timeout).")),(0,n.kt)("p",null,"Default value: 180."),(0,n.kt)("h2",{id:"http_receive_timeout"},"http_receive_timeout"),(0,n.kt)("p",null,"HTTP receive timeout (in seconds)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 - Disabled (infinite timeout).")),(0,n.kt)("p",null,"Default value: 180."),(0,n.kt)("h2",{id:"check_query_single_value_result"},"check_query_single_value_result"),(0,n.kt)("p",null,"Defines the level of detail for the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/check-table/#checking-mergetree-tables"},"CHECK TABLE")," query result for ",(0,n.kt)("inlineCode",{parentName:"p"},"MergeTree")," family engines ."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 the query shows a check status for every individual data part of a table."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 the query shows the general table check status.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"prefer-column-name-to-alias"},"prefer_column_name_to_alias"),(0,n.kt)("p",null,"Enables or disables using the original column names instead of aliases in query expressions and clauses. It especially matters when alias is the same as the column name, see ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/syntax/#notes-on-usage"},"Expression Aliases"),". Enable this setting to make aliases syntax rules in ClickHouse more compatible with most other database engines."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The column name is substituted with the alias."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 The column name is not substituted with the alias.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"The difference between enabled and disabled:"),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET prefer_column_name_to_alias = 0;\nSELECT avg(number) AS number, max(number) FROM numbers(10);\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"Received exception from server (version 21.5.1):\nCode: 184. DB::Exception: Received from localhost:9000. DB::Exception: Aggregate function avg(number) is found inside another aggregate function in query: While processing avg(number) AS number.\n")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET prefer_column_name_to_alias = 1;\nSELECT avg(number) AS number, max(number) FROM numbers(10);\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500number\u2500\u252c\u2500max(number)\u2500\u2510\n\u2502    4.5 \u2502           9 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"limit"},"limit"),(0,n.kt)("p",null,"Sets the maximum number of rows to get from the query result. It adjusts the value set by the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/limit/#limit-clause"},"LIMIT")," clause, so that the limit, specified in the query, cannot exceed the limit, set by this setting."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The number of rows is not limited."),(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"offset"},"offset"),(0,n.kt)("p",null,"Sets the number of rows to skip before starting to return rows from the query. It adjusts the offset set by the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/offset/#offset-fetch"},"OFFSET")," clause, so that these two values are summarized."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 No rows are skipped ."),(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Input table:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test (i UInt64) ENGINE = MergeTree() ORDER BY i;\nINSERT INTO test SELECT number FROM numbers(500);\n")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET limit = 5;\nSET offset = 7;\nSELECT * FROM test LIMIT 10 OFFSET 100;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500i\u2500\u2510\n\u2502 107 \u2502\n\u2502 108 \u2502\n\u2502 109 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"optimize_syntax_fuse_functions"},"optimize_syntax_fuse_functions"),(0,n.kt)("p",null,"Enables to fuse aggregate functions with identical argument. It rewrites query contains at least two aggregate functions from ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/sum/#agg_function-sum"},"sum"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/count/#agg_function-count"},"count")," or ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/avg/#agg_function-avg"},"avg")," with identical argument to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/aggregate-functions/reference/sumcount/#agg_function-sumCount"},"sumCount"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Functions with identical argument are not fused."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Functions with identical argument are fused.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE fuse_tbl(a Int8, b Int8) Engine = Log;\nSET optimize_syntax_fuse_functions = 1;\nEXPLAIN SYNTAX SELECT sum(a), sum(b), count(b), avg(b) from fuse_tbl FORMAT TSV;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"SELECT\n    sum(a),\n    sumCount(b).1,\n    sumCount(b).2,\n    (sumCount(b).1) / (sumCount(b).2)\nFROM fuse_tbl\n")),(0,n.kt)("h2",{id:"optimize_rewrite_aggregate_function_with_if"},"optimize_rewrite_aggregate_function_with_if"),(0,n.kt)("p",null,"Rewrite aggregate functions with if expression as argument when logically equivalent.\nFor example, ",(0,n.kt)("inlineCode",{parentName:"p"},"avg(if(cond, col, null))")," can be rewritten to ",(0,n.kt)("inlineCode",{parentName:"p"},"avgOrNullIf(cond, col)"),". It may improve performance."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Supported only with experimental analyzer (",(0,n.kt)("inlineCode",{parentName:"p"},"allow_experimental_analyzer = 1"),").")),(0,n.kt)("h2",{id:"allow_experimental_database_replicated"},"allow_experimental_database_replicated"),(0,n.kt)("p",null,"Enables to create databases with ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/database-engines/replicated"},"Replicated")," engine."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"database_replicated_initial_query_timeout_sec"},"database_replicated_initial_query_timeout_sec"),(0,n.kt)("p",null,"Sets how long initial DDL query should wait for Replicated database to precess previous DDL queue entries in seconds."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Unlimited.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"300"),"."),(0,n.kt)("h2",{id:"distributed_ddl_task_timeout"},"distributed_ddl_task_timeout"),(0,n.kt)("p",null,"Sets timeout for DDL query responses from all hosts in cluster. If a DDL request has not been performed on all hosts, a response will contain a timeout error and a request will be executed in an async mode. Negative value means infinite."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Async mode."),(0,n.kt)("li",{parentName:"ul"},"Negative integer \u2014 infinite timeout.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"180"),"."),(0,n.kt)("h2",{id:"distributed_ddl_output_mode"},"distributed_ddl_output_mode"),(0,n.kt)("p",null,"Sets format of distributed DDL query result."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"throw")," \u2014 Returns result set with query execution status for all hosts where query is finished. If query has failed on some hosts, then it will rethrow the first exception. If query is not finished yet on some hosts and ",(0,n.kt)("a",{parentName:"li",href:"#distributed_ddl_task_timeout"},"distributed_ddl_task_timeout")," exceeded, then it throws ",(0,n.kt)("inlineCode",{parentName:"li"},"TIMEOUT_EXCEEDED")," exception."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"none")," \u2014 Is similar to throw, but distributed DDL query returns no result set."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"null_status_on_timeout")," \u2014 Returns ",(0,n.kt)("inlineCode",{parentName:"li"},"NULL")," as execution status in some rows of result set instead of throwing ",(0,n.kt)("inlineCode",{parentName:"li"},"TIMEOUT_EXCEEDED")," if query is not finished on the corresponding hosts."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"never_throw")," \u2014 Do not throw ",(0,n.kt)("inlineCode",{parentName:"li"},"TIMEOUT_EXCEEDED")," and do not rethrow exceptions if query has failed on some hosts.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"throw"),"."),(0,n.kt)("h2",{id:"flatten-nested"},"flatten_nested"),(0,n.kt)("p",null,"Sets the data format of a ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nested-data-structures/nested"},"nested")," columns."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Nested column is flattened to separate arrays."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Nested column stays a single array of tuples.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Usage")),(0,n.kt)("p",null,"If the setting is set to ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),", it is possible to use an arbitrary level of nesting."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Examples")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET flatten_nested = 1;\nCREATE TABLE t_nest (`n` Nested(a UInt32, b UInt32)) ENGINE = MergeTree ORDER BY tuple();\n\nSHOW CREATE TABLE t_nest;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 CREATE TABLE default.t_nest\n(\n    `n.a` Array(UInt32),\n    `n.b` Array(UInt32)\n)\nENGINE = MergeTree\nORDER BY tuple()\nSETTINGS index_granularity = 8192 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET flatten_nested = 0;\n\nCREATE TABLE t_nest (`n` Nested(a UInt32, b UInt32)) ENGINE = MergeTree ORDER BY tuple();\n\nSHOW CREATE TABLE t_nest;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 CREATE TABLE default.t_nest\n(\n    `n` Nested(a UInt32, b UInt32)\n)\nENGINE = MergeTree\nORDER BY tuple()\nSETTINGS index_granularity = 8192 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"external-table-functions-use-nulls"},"external_table_functions_use_nulls"),(0,n.kt)("p",null,"Defines how ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/mysql"},"mysql"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/postgresql"},"postgresql")," and ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/table-functions/odbc"},"odbc"),"] table functions use Nullable columns."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 The table function explicitly uses Nullable columns."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 The table function implicitly uses Nullable columns.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Usage")),(0,n.kt)("p",null,"If the setting is set to ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),", the table function does not make Nullable columns and inserts default values instead of NULL. This is also applicable for NULL values inside arrays."),(0,n.kt)("h2",{id:"allow-experimental-projection-optimization"},"allow_experimental_projection_optimization"),(0,n.kt)("p",null,"Enables or disables ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree/#projections"},"projection")," optimization when processing ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Projection optimization disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Projection optimization enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"force-optimize-projection"},"force_optimize_projection"),(0,n.kt)("p",null,"Enables or disables the obligatory use of ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/mergetree/#projections"},"projections")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT")," queries, when projection optimization is enabled (see ",(0,n.kt)("a",{parentName:"p",href:"#allow-experimental-projection-optimization"},"allow_experimental_projection_optimization")," setting)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Projection optimization is not obligatory."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Projection optimization is obligatory.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"alter-sync"},"alter_sync"),(0,n.kt)("p",null,"Allows to set up waiting for actions to be executed on replicas by ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/"},"ALTER"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/optimize"},"OPTIMIZE")," or ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/truncate"},"TRUNCATE")," queries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Do not wait."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Wait for own execution."),(0,n.kt)("li",{parentName:"ul"},"2 \u2014 Wait for everyone.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"replication-wait-for-inactive-replica-timeout"},"replication_wait_for_inactive_replica_timeout"),(0,n.kt)("p",null,"Specifies how long (in seconds) to wait for inactive replicas to execute ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/"},"ALTER"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/optimize"},"OPTIMIZE")," or ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/truncate"},"TRUNCATE")," queries."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Do not wait."),(0,n.kt)("li",{parentName:"ul"},"Negative integer \u2014 Wait for unlimited time."),(0,n.kt)("li",{parentName:"ul"},"Positive integer \u2014 The number of seconds to wait.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"120")," seconds."),(0,n.kt)("h2",{id:"regexp-max-matches-per-row"},"regexp_max_matches_per_row"),(0,n.kt)("p",null,"Sets the maximum number of matches for a single regular expression per row. Use it to protect against memory overload when using greedy regular expression in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/string-search-functions/#extractallgroups-horizontal"},"extractAllGroupsHorizontal")," function."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1000"),"."),(0,n.kt)("h2",{id:"http-max-single-read-retries"},"http_max_single_read_retries"),(0,n.kt)("p",null,"Sets the maximum number of retries during a single HTTP read."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1024"),"."),(0,n.kt)("h2",{id:"log-queries-probability"},"log_queries_probability"),(0,n.kt)("p",null,"Allows a user to write to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/query_log"},"query_log"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/query_thread_log"},"query_thread_log"),", and ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/query_views_log"},"query_views_log")," system tables only a sample of queries selected randomly with the specified probability. It helps to reduce the load with a large volume of queries in a second."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Queries are not logged in the system tables."),(0,n.kt)("li",{parentName:"ul"},"Positive floating-point number in the range ","[0..1]",". For example, if the setting value is ",(0,n.kt)("inlineCode",{parentName:"li"},"0.5"),", about half of the queries are logged in the system tables."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 All queries are logged in the system tables.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"short-circuit-function-evaluation"},"short_circuit_function_evaluation"),(0,n.kt)("p",null,"Allows calculating the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/conditional-functions/#if"},"if"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/conditional-functions/#multiif"},"multiIf"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/logical-functions/#logical-and-function"},"and"),", and ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/logical-functions/#logical-or-function"},"or")," functions according to a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Short-circuit_evaluation"},"short scheme"),". This helps optimize the execution of complex expressions in these functions and prevent possible exceptions (such as division by zero when it is not expected)."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"enable")," \u2014 Enables short-circuit function evaluation for functions that are suitable for it (can throw an exception or computationally heavy)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"force_enable")," \u2014 Enables short-circuit function evaluation for all functions."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"disable")," \u2014 Disables short-circuit function evaluation.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"enable"),"."),(0,n.kt)("h2",{id:"max-hyperscan-regexp-length"},"max_hyperscan_regexp_length"),(0,n.kt)("p",null,"Defines the maximum length for each regular expression in the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/string-search-functions/#multimatchanyhaystack-pattern1-pattern2-patternn"},"hyperscan multi-match functions"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 - The length is not limited.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT multiMatchAny('abcd', ['ab','bcd','c','d']) SETTINGS max_hyperscan_regexp_length = 3;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500multiMatchAny('abcd', ['ab', 'bcd', 'c', 'd'])\u2500\u2510\n\u2502                                              1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT multiMatchAny('abcd', ['ab','bcd','c','d']) SETTINGS max_hyperscan_regexp_length = 2;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"Exception: Regexp length too large.\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#max-hyperscan-regexp-total-length"},"max_hyperscan_regexp_total_length"))),(0,n.kt)("h2",{id:"max-hyperscan-regexp-total-length"},"max_hyperscan_regexp_total_length"),(0,n.kt)("p",null,"Sets the maximum length total of all regular expressions in each ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/string-search-functions/#multimatchanyhaystack-pattern1-pattern2-patternn"},"hyperscan multi-match function"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 - The length is not limited.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT multiMatchAny('abcd', ['a','b','c','d']) SETTINGS max_hyperscan_regexp_total_length = 5;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500multiMatchAny('abcd', ['a', 'b', 'c', 'd'])\u2500\u2510\n\u2502                                           1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT multiMatchAny('abcd', ['ab','bc','c','d']) SETTINGS max_hyperscan_regexp_total_length = 5;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"Exception: Total regexp lengths too large.\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#max-hyperscan-regexp-length"},"max_hyperscan_regexp_length"))),(0,n.kt)("h2",{id:"enable-positional-arguments"},"enable_positional_arguments"),(0,n.kt)("p",null,"Enables or disables supporting positional arguments for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/group-by"},"GROUP BY"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/limit-by"},"LIMIT BY"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/order-by"},"ORDER BY")," statements."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Positional arguments aren't supported."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Positional arguments are supported: column numbers can use instead of column names.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"Query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE positional_arguments(one Int, two Int, three Int) ENGINE=Memory();\n\nINSERT INTO positional_arguments VALUES (10, 20, 30), (20, 20, 10), (30, 10, 20);\n\nSELECT * FROM positional_arguments ORDER BY 2,3;\n")),(0,n.kt)("p",null,"Result:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500one\u2500\u252c\u2500two\u2500\u252c\u2500three\u2500\u2510\n\u2502  30 \u2502  10 \u2502   20  \u2502\n\u2502  20 \u2502  20 \u2502   10  \u2502\n\u2502  10 \u2502  20 \u2502   30  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"enable-extended-results-for-datetime-functions"},"enable_extended_results_for_datetime_functions"),(0,n.kt)("p",null,"Enables or disables returning results of type:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Date32")," with extended range (compared to type ",(0,n.kt)("inlineCode",{parentName:"li"},"Date"),") for functions ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofyear"},"toStartOfYear"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofisoyear"},"toStartOfISOYear"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofquarter"},"toStartOfQuarter"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofmonth"},"toStartOfMonth"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofweek"},"toStartOfWeek"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tomonday"},"toMonday")," and ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tolastdayofmonth"},"toLastDayOfMonth"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"DateTime64")," with extended range (compared to type ",(0,n.kt)("inlineCode",{parentName:"li"},"DateTime"),") for functions ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofday"},"toStartOfDay"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofhour"},"toStartOfHour"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartofminute"},"toStartOfMinute"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartoffiveminutes"},"toStartOfFiveMinutes"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartoftenminutes"},"toStartOfTenMinutes"),", ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#tostartoffifteenminutes"},"toStartOfFifteenMinutes")," and ",(0,n.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/functions/date-time-functions/#timeslot"},"timeSlot"),".")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Functions return ",(0,n.kt)("inlineCode",{parentName:"li"},"Date")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"DateTime")," for all types of arguments."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Functions return ",(0,n.kt)("inlineCode",{parentName:"li"},"Date32")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"DateTime64")," for ",(0,n.kt)("inlineCode",{parentName:"li"},"Date32")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"DateTime64")," arguments and ",(0,n.kt)("inlineCode",{parentName:"li"},"Date")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"DateTime")," otherwise.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"optimize_move_to_prewhere"},"optimize_move_to_prewhere"),(0,n.kt)("p",null,"Enables or disables automatic ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/prewhere"},"PREWHERE")," optimization in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/"},"SELECT")," queries."),(0,n.kt)("p",null,"Works only for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/"},"*MergeTree")," tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Automatic ",(0,n.kt)("inlineCode",{parentName:"li"},"PREWHERE")," optimization is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Automatic ",(0,n.kt)("inlineCode",{parentName:"li"},"PREWHERE")," optimization is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("h2",{id:"optimize_move_to_prewhere_if_final"},"optimize_move_to_prewhere_if_final"),(0,n.kt)("p",null,"Enables or disables automatic ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/prewhere"},"PREWHERE")," optimization in ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/"},"SELECT")," queries with ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/select/from/#select-from-final"},"FINAL")," modifier."),(0,n.kt)("p",null,"Works only for ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/engines/table-engines/mergetree-family/"},"*MergeTree")," tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Automatic ",(0,n.kt)("inlineCode",{parentName:"li"},"PREWHERE")," optimization in ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT")," queries with ",(0,n.kt)("inlineCode",{parentName:"li"},"FINAL")," modifier is disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Automatic ",(0,n.kt)("inlineCode",{parentName:"li"},"PREWHERE")," optimization in ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT")," queries with ",(0,n.kt)("inlineCode",{parentName:"li"},"FINAL")," modifier is enabled.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#optimize_move_to_prewhere"},"optimize_move_to_prewhere")," setting")),(0,n.kt)("h2",{id:"optimize_using_constraints"},"optimize_using_constraints"),(0,n.kt)("p",null,"Use ",(0,n.kt)("a",{parentName:"p",href:"../../sql-reference/statements/create/table#constraints"},"constraints")," for query optimization. The default is ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"true, false")),(0,n.kt)("h2",{id:"optimize_append_index"},"optimize_append_index"),(0,n.kt)("p",null,"Use ",(0,n.kt)("a",{parentName:"p",href:"../../sql-reference/statements/create/table#constraints"},"constraints")," in order to append index condition. The default is ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"true, false")),(0,n.kt)("h2",{id:"optimize_substitute_columns"},"optimize_substitute_columns"),(0,n.kt)("p",null,"Use ",(0,n.kt)("a",{parentName:"p",href:"../../sql-reference/statements/create/table#constraints"},"constraints")," for column substitution. The default is ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"true, false")),(0,n.kt)("h2",{id:"describe_include_subcolumns"},"describe_include_subcolumns"),(0,n.kt)("p",null,"Enables describing subcolumns for a ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/describe-table"},"DESCRIBE")," query. For example, members of a ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/tuple"},"Tuple")," or subcolumns of a ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/map/#map-subcolumns"},"Map"),", ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/nullable/#finding-null"},"Nullable")," or an ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/data-types/array/#array-size"},"Array")," data type."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Subcolumns are not included in ",(0,n.kt)("inlineCode",{parentName:"li"},"DESCRIBE")," queries."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Subcolumns are included in ",(0,n.kt)("inlineCode",{parentName:"li"},"DESCRIBE")," queries.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("p",null,"See an example for the ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/describe-table"},"DESCRIBE")," statement."),(0,n.kt)("h2",{id:"alter-partition-verbose-result"},"alter_partition_verbose_result"),(0,n.kt)("p",null,"Enables or disables the display of information about the parts to which the manipulation operations with partitions and parts have been successfully applied.\nApplicable to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/partition/#alter_attach-partition"},"ATTACH PARTITION|PART")," and to ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/sql-reference/statements/alter/partition/#alter_freeze-partition"},"FREEZE PARTITION"),"."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 disable verbosity."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 enable verbosity.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test(a Int64, d Date, s String) ENGINE = MergeTree PARTITION BY toYYYYMM(d) ORDER BY a;\nINSERT INTO test VALUES(1, '2021-01-01', '');\nINSERT INTO test VALUES(1, '2021-01-01', '');\nALTER TABLE test DETACH PARTITION ID '202101';\n\nALTER TABLE test ATTACH PARTITION ID '202101' SETTINGS alter_partition_verbose_result = 1;\n\n\u250c\u2500command_type\u2500\u2500\u2500\u2500\u2500\u252c\u2500partition_id\u2500\u252c\u2500part_name\u2500\u2500\u2500\u2500\u252c\u2500old_part_name\u2500\u2510\n\u2502 ATTACH PARTITION \u2502 202101       \u2502 202101_7_7_0 \u2502 202101_5_5_0  \u2502\n\u2502 ATTACH PARTITION \u2502 202101       \u2502 202101_8_8_0 \u2502 202101_6_6_0  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nALTER TABLE test FREEZE SETTINGS alter_partition_verbose_result = 1;\n\n\u250c\u2500command_type\u2500\u252c\u2500partition_id\u2500\u252c\u2500part_name\u2500\u2500\u2500\u2500\u252c\u2500backup_name\u2500\u252c\u2500backup_path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500part_backup_path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 FREEZE ALL   \u2502 202101       \u2502 202101_7_7_0 \u2502 8           \u2502 /var/lib/clickhouse/shadow/8/ \u2502 /var/lib/clickhouse/shadow/8/data/default/test/202101_7_7_0 \u2502\n\u2502 FREEZE ALL   \u2502 202101       \u2502 202101_8_8_0 \u2502 8           \u2502 /var/lib/clickhouse/shadow/8/ \u2502 /var/lib/clickhouse/shadow/8/data/default/test/202101_8_8_0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"min-bytes-to-use-mmap-io"},"min_bytes_to_use_mmap_io"),(0,n.kt)("p",null,"This is an experimental setting. Sets the minimum amount of memory for reading large files without copying data from the kernel to userspace. Recommended threshold is about 64 MB, because ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mmap"},"mmap/munmap")," is slow. It makes sense only for large files and helps only if data reside in the page cache."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Positive integer."),(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Big files read with only copying data from kernel to userspace.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"shutdown_wait_unfinished_queries"},"shutdown_wait_unfinished_queries"),(0,n.kt)("p",null,"Enables or disables waiting unfinished queries when shutdown server."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Enabled. The wait time equal shutdown_wait_unfinished config.")),(0,n.kt)("p",null,"Default value: 0."),(0,n.kt)("h2",{id:"shutdown_wait_unfinished"},"shutdown_wait_unfinished"),(0,n.kt)("p",null,"The waiting time in seconds for currently handled connections when shutdown server."),(0,n.kt)("p",null,"Default Value: 5."),(0,n.kt)("h2",{id:"memory_overcommit_ratio_denominator"},"memory_overcommit_ratio_denominator"),(0,n.kt)("p",null,"It represents soft memory limit in case when hard limit is reached on user level.\nThis value is used to compute overcommit ratio for the query.\nZero means skip the query.\nRead more about ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/memory-overcommit"},"memory overcommit"),"."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1GiB"),"."),(0,n.kt)("h2",{id:"memory_usage_overcommit_max_wait_microseconds"},"memory_usage_overcommit_max_wait_microseconds"),(0,n.kt)("p",null,"Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level.\nIf the timeout is reached and memory is not freed, an exception is thrown.\nRead more about ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/memory-overcommit"},"memory overcommit"),"."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"5000000"),"."),(0,n.kt)("h2",{id:"memory_overcommit_ratio_denominator_for_user"},"memory_overcommit_ratio_denominator_for_user"),(0,n.kt)("p",null,"It represents soft memory limit in case when hard limit is reached on global level.\nThis value is used to compute overcommit ratio for the query.\nZero means skip the query.\nRead more about ",(0,n.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/operations/settings/memory-overcommit"},"memory overcommit"),"."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"1GiB"),"."),(0,n.kt)("h2",{id:"schema-inference-settings"},"Schema Inference settings"),(0,n.kt)("h3",{id:"schema_inference_use_cache_for_file-schema_inference_use_cache_for_file"},"schema_inference_use_cache_for_file {schema_inference_use_cache_for_file}"),(0,n.kt)("p",null,"Enable schemas cache for schema inference in ",(0,n.kt)("inlineCode",{parentName:"p"},"file")," table function."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("h3",{id:"schema_inference_use_cache_for_s3-schema_inference_use_cache_for_s3"},"schema_inference_use_cache_for_s3 {schema_inference_use_cache_for_s3}"),(0,n.kt)("p",null,"Enable schemas cache for schema inference in ",(0,n.kt)("inlineCode",{parentName:"p"},"s3")," table function."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("h3",{id:"schema_inference_use_cache_for_url-schema_inference_use_cache_for_url"},"schema_inference_use_cache_for_url {schema_inference_use_cache_for_url}"),(0,n.kt)("p",null,"Enable schemas cache for schema inference in ",(0,n.kt)("inlineCode",{parentName:"p"},"url")," table function."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("h3",{id:"schema_inference_use_cache_for_hdfs-schema_inference_use_cache_for_hdfs"},"schema_inference_use_cache_for_hdfs {schema_inference_use_cache_for_hdfs}"),(0,n.kt)("p",null,"Enable schemas cache for schema inference in ",(0,n.kt)("inlineCode",{parentName:"p"},"hdfs")," table function."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("h3",{id:"schema_inference_cache_require_modification_time_for_url"},"schema_inference_cache_require_modification_time_for_url"),(0,n.kt)("p",null,"Use schema from cache for URL with last modification time validation (for urls with Last-Modified header). If this setting is enabled and URL doesn't have Last-Modified header, schema from cache won't be used."),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("h3",{id:"use_structure_from_insertion_table_in_table_functions-use_structure_from_insertion_table_in_table_functions"},"use_structure_from_insertion_table_in_table_functions {use_structure_from_insertion_table_in_table_functions}"),(0,n.kt)("p",null,"Use structure from insertion table instead of schema inference from data."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - enabled"),(0,n.kt)("li",{parentName:"ul"},"2 - auto")),(0,n.kt)("p",null,"Default value: 2."),(0,n.kt)("h2",{id:"compatibility"},"compatibility"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"compatibility")," setting causes ClickHouse to use the default settings of a previous version of ClickHouse, where the previous version is provided as the setting."),(0,n.kt)("p",null,"If settings are set to non-default values, then those settings are honored (only settings that have not been modified are affected by the ",(0,n.kt)("inlineCode",{parentName:"p"},"compatibility")," setting)."),(0,n.kt)("p",null,"This setting takes a ClickHouse version number as a string, like ",(0,n.kt)("inlineCode",{parentName:"p"},"22.3"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"22.8"),". An empty value means that this setting is disabled."),(0,n.kt)("p",null,"Disabled by default."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"In ClickHouse Cloud the compatibility setting must be set by ClickHouse Cloud support.  Please ",(0,n.kt)("a",{parentName:"p",href:"https://clickhouse.cloud/support"},"open a case")," to have it set.")),(0,n.kt)("h2",{id:"allow_settings_after_format_in_insert"},"allow_settings_after_format_in_insert"),(0,n.kt)("p",null,"Control whether ",(0,n.kt)("inlineCode",{parentName:"p"},"SETTINGS")," after ",(0,n.kt)("inlineCode",{parentName:"p"},"FORMAT")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," queries is allowed or not. It is not recommended to use this, since this may interpret part of ",(0,n.kt)("inlineCode",{parentName:"p"},"SETTINGS")," as values."),(0,n.kt)("p",null,"Example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO FUNCTION null('foo String') SETTINGS max_threads=1 VALUES ('bar');\n")),(0,n.kt)("p",null,"But the following query will work only with ",(0,n.kt)("inlineCode",{parentName:"p"},"allow_settings_after_format_in_insert"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SET allow_settings_after_format_in_insert=1;\nINSERT INTO FUNCTION null('foo String') VALUES ('bar') SETTINGS max_threads=1;\n")),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 \u2014 Disallow."),(0,n.kt)("li",{parentName:"ul"},"1 \u2014 Allow.")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Use this setting only for backward compatibility if your use cases depend on old syntax.")),(0,n.kt)("h2",{id:"final"},"final"),(0,n.kt)("p",null,"Automatically applies ",(0,n.kt)("a",{parentName:"p",href:"../../sql-reference/statements/select/from/#final-modifier"},"FINAL")," modifier to all tables in a query, to tables where ",(0,n.kt)("a",{parentName:"p",href:"../../sql-reference/statements/select/from/#final-modifier"},"FINAL")," is applicable, including joined tables and tables in sub-queries, and\ndistributed tables."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - enabled")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,"Example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test\n(\n    key Int64,\n    some String\n)\nENGINE = ReplacingMergeTree\nORDER BY key;\n\nINSERT INTO test FORMAT Values (1, 'first');\nINSERT INTO test FORMAT Values (1, 'second');\n\nSELECT * FROM test;\n\u250c\u2500key\u2500\u252c\u2500some\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 second \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500key\u2500\u252c\u2500some\u2500\u2500\u2510\n\u2502   1 \u2502 first \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSELECT * FROM test SETTINGS final = 1;\n\u250c\u2500key\u2500\u252c\u2500some\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 second \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSET final = 1;\nSELECT * FROM test;\n\u250c\u2500key\u2500\u252c\u2500some\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 second \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h2",{id:"asterisk_include_materialized_columns"},"asterisk_include_materialized_columns"),(0,n.kt)("p",null,"Include ",(0,n.kt)("a",{parentName:"p",href:"../../sql-reference/statements/create/table/#materialized"},"MATERIALIZED")," columns for wildcard query (",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT *"),")."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - enabled")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("h2",{id:"asterisk_include_alias_columns"},"asterisk_include_alias_columns"),(0,n.kt)("p",null,"Include ",(0,n.kt)("a",{parentName:"p",href:"../../sql-reference/statements/create/table/#alias"},"ALIAS")," columns for wildcard query (",(0,n.kt)("inlineCode",{parentName:"p"},"SELECT *"),")."),(0,n.kt)("p",null,"Possible values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - disabled"),(0,n.kt)("li",{parentName:"ul"},"1 - enabled")),(0,n.kt)("p",null,"Default value: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."))}d.isMDXComponent=!0}}]);