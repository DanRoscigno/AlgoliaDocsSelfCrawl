"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[35705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},40375:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={slug:"/en/operations/system-tables/zookeeper"},i="zookeeper",l={unversionedId:"en/operations/system-tables/zookeeper",id:"en/operations/system-tables/zookeeper",title:"zookeeper",description:"The table does not exist unless ClickHouse Keeper or ZooKeeper is configured. The system.zookeeper table exposes data from the Keeper cluster defined in the config.",source:"@site/docs/en/operations/system-tables/zookeeper.md",sourceDirName:"en/operations/system-tables",slug:"/en/operations/system-tables/zookeeper",permalink:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/zookeeper",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/system-tables/zookeeper.md",tags:[],version:"current",frontMatter:{slug:"/en/operations/system-tables/zookeeper"},sidebar:"english",previous:{title:"users",permalink:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/users"},next:{title:"zookeeper_log",permalink:"/AlgoliaDocsSelfCrawl/en/operations/system-tables/zookeeper_log"}},s={},p=[],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"zookeeper"},"zookeeper"),(0,r.kt)("p",null,"The table does not exist unless ClickHouse Keeper or ZooKeeper is configured. The ",(0,r.kt)("inlineCode",{parentName:"p"},"system.zookeeper")," table exposes data from the Keeper cluster defined in the config.\nThe query must either have a \u2018path =\u2019   condition or a ",(0,r.kt)("inlineCode",{parentName:"p"},"path IN"),"  condition set with the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause as shown below. This corresponds to the path of the children that you want to get data for."),(0,r.kt)("p",null,"The query ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT * FROM system.zookeeper WHERE path = '/clickhouse'")," outputs data for all children on the ",(0,r.kt)("inlineCode",{parentName:"p"},"/clickhouse")," node.\nTo output data for all root nodes, write path = \u2018/\u2019.\nIf the path specified in \u2018path\u2019 does not exist, an exception will be thrown."),(0,r.kt)("p",null,"The query ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT * FROM system.zookeeper WHERE path IN ('/', '/clickhouse')")," outputs data for all children on the ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/clickhouse")," node.\nIf in the specified \u2018path\u2019 collection has does not exist path, an exception will be thrown.\nIt can be used to do a batch of Keeper path queries."),(0,r.kt)("p",null,"Columns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (String) \u2014 The name of the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," (String) \u2014 The path to the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," (String) \u2014 Node value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataLength")," (Int32) \u2014 Size of the value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"numChildren")," (Int32) \u2014 Number of descendants."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"czxid")," (Int64) \u2014 ID of the transaction that created the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mzxid")," (Int64) \u2014 ID of the transaction that last changed the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pzxid")," (Int64) \u2014 ID of the transaction that last deleted or added descendants."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ctime")," (DateTime) \u2014 Time of node creation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mtime")," (DateTime) \u2014 Time of the last modification of the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," (Int32) \u2014 Node version: the number of times the node was changed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cversion")," (Int32) \u2014 Number of added or removed descendants."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"aversion")," (Int32) \u2014 Number of changes to the ACL."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ephemeralOwner")," (Int64) \u2014 For ephemeral nodes, the ID of the session that owns this node.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM system.zookeeper\nWHERE path = '/clickhouse/tables/01-08/visits/replicas'\nFORMAT Vertical\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nname:           example01-08-1\nvalue:\nczxid:          932998691229\nmzxid:          932998691229\nctime:          2015-03-27 16:49:51\nmtime:          2015-03-27 16:49:51\nversion:        0\ncversion:       47\naversion:       0\nephemeralOwner: 0\ndataLength:     0\nnumChildren:    7\npzxid:          987021031383\npath:           /clickhouse/tables/01-08/visits/replicas\n\nRow 2:\n\u2500\u2500\u2500\u2500\u2500\u2500\nname:           example01-08-2\nvalue:\nczxid:          933002738135\nmzxid:          933002738135\nctime:          2015-03-27 16:57:01\nmtime:          2015-03-27 16:57:01\nversion:        0\ncversion:       37\naversion:       0\nephemeralOwner: 0\ndataLength:     0\nnumChildren:    7\npzxid:          987021252247\npath:           /clickhouse/tables/01-08/visits/replicas\n")))}d.isMDXComponent=!0}}]);