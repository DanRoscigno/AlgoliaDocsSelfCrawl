"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[22815],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},f=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),f=a,d=c["".concat(s,".").concat(f)]||c[f]||m[f]||r;return n?l.createElement(d,i(i({ref:t},u),{},{components:n})):l.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}f.displayName="MDXCreateElement"},19687:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var l=n(87462),a=(n(67294),n(3905));const r={slug:"/en/sql-reference/table-functions/file",sidebar_position:37,sidebar_label:"file"},i="file",o={unversionedId:"en/sql-reference/table-functions/file",id:"en/sql-reference/table-functions/file",title:"file",description:"Creates a table from a file. This table function is similar to url and hdfs ones.",source:"@site/docs/en/sql-reference/table-functions/file.md",sourceDirName:"en/sql-reference/table-functions",slug:"/en/sql-reference/table-functions/file",permalink:"/docs/en/sql-reference/table-functions/file",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/table-functions/file.md",tags:[],version:"current",sidebarPosition:37,frontMatter:{slug:"/en/sql-reference/table-functions/file",sidebar_position:37,sidebar_label:"file"},sidebar:"english",previous:{title:"Table Functions",permalink:"/docs/en/sql-reference/table-functions/"},next:{title:"merge",permalink:"/docs/en/sql-reference/table-functions/merge"}},s={},p=[{value:"Globs in Path",id:"globs-in-path",level:2},{value:"Virtual Columns",id:"virtual-columns",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"file"},"file"),(0,a.kt)("p",null,"Creates a table from a file. This table function is similar to ",(0,a.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/table-functions/url"},"url")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/table-functions/hdfs"},"hdfs")," ones."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"file")," function can be used in ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"INSERT")," queries on data in ",(0,a.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/special/file"},"File")," tables."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Syntax")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"file(path [,format] [,structure] [,compression])\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"path")," \u2014 The relative path to the file from ",(0,a.kt)("a",{parentName:"li",href:"/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-user_files_path"},"user_files_path"),". Path to file support following globs in read-only mode: ",(0,a.kt)("inlineCode",{parentName:"li"},"*"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"?"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"{abc,def}")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"{N..M}")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"N"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"M")," \u2014 numbers, ",(0,a.kt)("inlineCode",{parentName:"li"},"'abc', 'def'")," \u2014 strings."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"format")," \u2014 The ",(0,a.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats#formats"},"format")," of the file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"structure")," \u2014 Structure of the table. Format: ",(0,a.kt)("inlineCode",{parentName:"li"},"'column1_name column1_type, column2_name column2_type, ...'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"compression")," \u2014 The existing compression type when used in a SELECT query, or the desired compression type when used in an INSERT query.  The supported types are gz, br, xz, zst, lz4, and bz2.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returned value")),(0,a.kt)("p",null,"A table with the specified structure for reading or writing data in the specified file."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"user_files_path")," and the contents of the file ",(0,a.kt)("inlineCode",{parentName:"p"},"test.csv"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ grep user_files_path /etc/clickhouse-server/config.xml\n    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>\n\n$ cat /var/lib/clickhouse/user_files/test.csv\n    1,2,3\n    3,2,1\n    78,43,45\n")),(0,a.kt)("p",null,"Getting data from a table in ",(0,a.kt)("inlineCode",{parentName:"p"},"test.csv")," and selecting the first two rows from it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM file('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32') LIMIT 2;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500column1\u2500\u252c\u2500column2\u2500\u252c\u2500column3\u2500\u2510\n\u2502       1 \u2502       2 \u2502       3 \u2502\n\u2502       3 \u2502       2 \u2502       1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,"Getting the first 10 lines of a table that contains 3 columns of ",(0,a.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt32")," type from a CSV file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM file('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32') LIMIT 10;\n")),(0,a.kt)("p",null,"Inserting data from a file into a table:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO FUNCTION file('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32') VALUES (1, 2, 3), (3, 2, 1);\nSELECT * FROM file('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500column1\u2500\u252c\u2500column2\u2500\u252c\u2500column3\u2500\u2510\n\u2502       1 \u2502       2 \u2502       3 \u2502\n\u2502       3 \u2502       2 \u2502       1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("h2",{id:"globs-in-path"},"Globs in Path"),(0,a.kt)("p",null,"Multiple path components can have globs. For being processed file must exist and match to the whole path pattern (not only suffix or prefix)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"*")," \u2014 Substitutes any number of any characters except ",(0,a.kt)("inlineCode",{parentName:"li"},"/")," including empty string."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"?")," \u2014 Substitutes any single character."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{some_string,another_string,yet_another_one}")," \u2014 Substitutes any of strings ",(0,a.kt)("inlineCode",{parentName:"li"},"'some_string', 'another_string', 'yet_another_one'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{N..M}")," \u2014 Substitutes any number in range from N to M including both borders."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"**")," - Fetches all files inside the folder recursively.")),(0,a.kt)("p",null,"Constructions with ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," are similar to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/table-functions/remote"},"remote")," table function."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,"Suppose we have several files with the following relative paths:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"'some_dir/some_file_1'"),(0,a.kt)("li",{parentName:"ul"},"'some_dir/some_file_2'"),(0,a.kt)("li",{parentName:"ul"},"'some_dir/some_file_3'"),(0,a.kt)("li",{parentName:"ul"},"'another_dir/some_file_1'"),(0,a.kt)("li",{parentName:"ul"},"'another_dir/some_file_2'"),(0,a.kt)("li",{parentName:"ul"},"'another_dir/some_file_3'")),(0,a.kt)("p",null,"Query the number of rows in these files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count(*) FROM file('{some,another}_dir/some_file_{1..3}', 'TSV', 'name String, value UInt32');\n")),(0,a.kt)("p",null,"Query the number of rows in all files of these two directories:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count(*) FROM file('{some,another}_dir/*', 'TSV', 'name String, value UInt32');\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"If your listing of files contains number ranges with leading zeros, use the construction with braces for each digit separately or use ",(0,a.kt)("inlineCode",{parentName:"p"},"?"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,"Query the data from files named ",(0,a.kt)("inlineCode",{parentName:"p"},"file000"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"file001"),", \u2026 , ",(0,a.kt)("inlineCode",{parentName:"p"},"file999"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count(*) FROM file('big_dir/file{0..9}{0..9}{0..9}', 'CSV', 'name String, value UInt32');\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,"Query the data from all files inside ",(0,a.kt)("inlineCode",{parentName:"p"},"big_dir")," directory recursively:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count(*) FROM file('big_dir/**', 'CSV', 'name String, value UInt32');\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,"Query the data from all ",(0,a.kt)("inlineCode",{parentName:"p"},"file002")," files from any folder inside ",(0,a.kt)("inlineCode",{parentName:"p"},"big_dir")," directory recursively:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count(*) FROM file('big_dir/**/file002', 'CSV', 'name String, value UInt32');\n")),(0,a.kt)("h2",{id:"virtual-columns"},"Virtual Columns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_path")," \u2014 Path to the file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_file")," \u2014 Name of the file.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"See Also")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/en/engines/table-engines/#table_engines-virtual_columns"},"Virtual columns"))))}m.isMDXComponent=!0}}]);