"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[66907],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),_=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=_(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=_(a),f=r,d=p["".concat(o,".").concat(f)]||p[f]||m[f]||l;return a?n.createElement(d,i(i({ref:t},u),{},{components:a})):n.createElement(d,i({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var _=2;_<l;_++)i[_]=a[_];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},37513:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>_});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_label:"Format Settings",sidebar_position:52,slug:"/en/operations/settings/formats",toc_max_heading_level:2},i="Format settings",s={unversionedId:"en/operations/settings/settings-formats",id:"en/operations/settings/settings-formats",title:"Format settings",description:"format-settings}",source:"@site/docs/en/operations/settings/settings-formats.md",sourceDirName:"en/operations/settings",slug:"/en/operations/settings/formats",permalink:"/docs/en/operations/settings/formats",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/settings/settings-formats.md",tags:[],version:"current",sidebarPosition:52,frontMatter:{sidebar_label:"Format Settings",sidebar_position:52,slug:"/en/operations/settings/formats",toc_max_heading_level:2},sidebar:"english",previous:{title:"Core Settings",permalink:"/docs/en/operations/settings/settings"},next:{title:"Permissions for Queries",permalink:"/docs/en/operations/settings/permissions-for-queries"}},o={},_=[{value:"input_format_skip_unknown_fields",id:"input_format_skip_unknown_fields",level:2},{value:"input_format_with_names_use_header",id:"input_format_with_names_use_header",level:2},{value:"input_format_with_types_use_header",id:"input_format_with_types_use_header",level:2},{value:"input_format_defaults_for_omitted_fields",id:"input_format_defaults_for_omitted_fields",level:2},{value:"input_format_null_as_default",id:"input_format_null_as_default",level:2},{value:"input_format_allow_seeks",id:"input_format_allow_seeks",level:2},{value:"input_format_max_rows_to_read_for_schema_inference",id:"input_format_max_rows_to_read_for_schema_inference",level:2},{value:"column_names_for_schema_inference",id:"column_names_for_schema_inference",level:2},{value:"schema_inference_hints",id:"schema_inference_hints",level:2},{value:"schema_inference_make_columns_nullable",id:"schema_inference_make_columns_nullable",level:2},{value:"input_format_try_infer_integers",id:"input_format_try_infer_integers",level:2},{value:"input_format_try_infer_dates",id:"input_format_try_infer_dates",level:2},{value:"input_format_try_infer_datetimes",id:"input_format_try_infer_datetimes",level:2},{value:"date_time_input_format",id:"date_time_input_format",level:2},{value:"date_time_output_format",id:"date_time_output_format",level:2},{value:"input_format_ipv4_default_on_conversion_error",id:"input_format_ipv4_default_on_conversion_error",level:2},{value:"input_format_ipv6_default_on_conversion_error",id:"input_format_ipv6_default_on_conversion_error",level:2},{value:"bool_true_representation",id:"bool_true_representation",level:2},{value:"bool_false_representation",id:"bool_false_representation",level:2},{value:"output_format_decimal_trailing_zeros",id:"output_format_decimal_trailing_zeros",level:2},{value:"input_format_allow_errors_num",id:"input_format_allow_errors_num",level:2},{value:"input_format_allow_errors_ratio",id:"input_format_allow_errors_ratio",level:2},{value:"format_schema",id:"format-schema",level:2},{value:"output_format_enable_streaming",id:"output_format_enable_streaming",level:2},{value:"output_format_write_statistics",id:"output_format_write_statistics",level:2},{value:"insert_distributed_one_random_shard",id:"insert_distributed_one_random_shard",level:2},{value:"JSON formats settings",id:"json-formats-settings",level:2},{value:"input_format_import_nested_json",id:"input_format_import_nested_json",level:2},{value:"input_format_json_read_bools_as_numbers",id:"input_format_json_read_bools_as_numbers",level:2},{value:"input_format_json_read_numbers_as_strings",id:"input_format_json_read_numbers_as_strings",level:2},{value:"input_format_json_read_objects_as_strings",id:"input_format_json_read_objects_as_strings",level:2},{value:"input_format_json_validate_types_from_metadata",id:"input_format_json_validate_types_from_metadata",level:2},{value:"output_format_json_quote_64bit_integers",id:"output_format_json_quote_64bit_integers",level:2},{value:"output_format_json_quote_64bit_floats",id:"output_format_json_quote_64bit_floats",level:2},{value:"output_format_json_quote_denormals",id:"output_format_json_quote_denormals",level:2},{value:"output_format_json_quote_decimals",id:"output_format_json_quote_decimals",level:2},{value:"output_format_json_escape_forward_slashes",id:"output_format_json_escape_forward_slashes",level:2},{value:"output_format_json_named_tuples_as_objects",id:"output_format_json_named_tuples_as_objects",level:2},{value:"input_format_json_named_tuples_as_objects",id:"input_format_json_named_tuples_as_objects",level:2},{value:"input_format_json_ignore_unknown_keys_in_named_tuple",id:"input_format_json_ignore_unknown_keys_in_named_tuple",level:2},{value:"input_format_json_defaults_for_missing_elements_in_named_tuple",id:"input_format_json_defaults_for_missing_elements_in_named_tuple",level:2},{value:"output_format_json_array_of_rows",id:"output_format_json_array_of_rows",level:2},{value:"output_format_json_validate_utf8",id:"output_format_json_validate_utf8",level:2},{value:"format_json_object_each_row_column_for_object_name",id:"format_json_object_each_row_column_for_object_name",level:2},{value:"TSV format settings",id:"tsv-format-settings",level:2},{value:"input_format_tsv_empty_as_default",id:"input_format_tsv_empty_as_default",level:3},{value:"input_format_tsv_enum_as_number",id:"input_format_tsv_enum_as_number",level:3},{value:"input_format_tsv_use_best_effort_in_schema_inference",id:"input_format_tsv_use_best_effort_in_schema_inference",level:3},{value:"input_format_tsv_skip_first_lines",id:"input_format_tsv_skip_first_lines",level:3},{value:"output_format_tsv_crlf_end_of_line",id:"output_format_tsv_crlf_end_of_line",level:3},{value:"format_tsv_null_representation",id:"format_tsv_null_representation",level:3},{value:"CSV format settings",id:"csv-format-settings",level:2},{value:"format_csv_delimiter",id:"format_csv_delimiter",level:3},{value:"format_csv_allow_single_quotes",id:"format_csv_allow_single_quotes",level:3},{value:"format_csv_allow_double_quotes",id:"format_csv_allow_double_quotes",level:3},{value:"output_format_csv_crlf_end_of_line",id:"output_format_csv_crlf_end_of_line",level:3},{value:"input_format_csv_enum_as_number",id:"input_format_csv_enum_as_number",level:3},{value:"input_format_csv_arrays_as_nested_csv",id:"input_format_csv_arrays_as_nested_csv",level:3},{value:"input_format_csv_empty_as_default",id:"input_format_csv_empty_as_default",level:3},{value:"input_format_csv_use_best_effort_in_schema_inference",id:"input_format_csv_use_best_effort_in_schema_inference",level:3},{value:"input_format_csv_skip_first_lines",id:"input_format_csv_skip_first_lines",level:3},{value:"format_csv_null_representation",id:"format_csv_null_representation",level:3},{value:"Values format settings",id:"values-format-settings",level:2},{value:"input_format_values_interpret_expressions",id:"input_format_values_interpret_expressions",level:3},{value:"input_format_values_deduce_templates_of_expressions",id:"input_format_values_deduce_templates_of_expressions",level:3},{value:"input_format_values_accurate_types_of_literals",id:"input_format_values_accurate_types_of_literals",level:3},{value:"Arrow format settings",id:"arrow-format-settings",level:2},{value:"input_format_arrow_import_nested",id:"input_format_arrow_import_nested",level:3},{value:"input_format_arrow_case_insensitive_column_matching",id:"input_format_arrow_case_insensitive_column_matching",level:3},{value:"input_format_arrow_allow_missing_columns",id:"input_format_arrow_allow_missing_columns",level:3},{value:"input_format_arrow_skip_columns_with_unsupported_types_in_schema_inference",id:"input_format_arrow_skip_columns_with_unsupported_types_in_schema_inference",level:3},{value:"output_format_arrow_low_cardinality_as_dictionary",id:"output_format_arrow_low_cardinality_as_dictionary",level:3},{value:"output_format_arrow_string_as_string",id:"output_format_arrow_string_as_string",level:3},{value:"output_format_arrow_fixed_string_as_fixed_byte_array (#output_format_arrow_fixed_string_as_fixed_byte_array)",id:"output_format_arrow_fixed_string_as_fixed_byte_array-output_format_arrow_fixed_string_as_fixed_byte_array",level:3},{value:"ORC format settings",id:"orc-format-settings",level:2},{value:"input_format_orc_import_nested",id:"input_format_orc_import_nested",level:3},{value:"input_format_orc_row_batch_size",id:"input_format_orc_row_batch_size",level:3},{value:"input_format_orc_case_insensitive_column_matching",id:"input_format_orc_case_insensitive_column_matching",level:3},{value:"input_format_orc_allow_missing_columns",id:"input_format_orc_allow_missing_columns",level:3},{value:"input_format_orc_skip_columns_with_unsupported_types_in_schema_inference",id:"input_format_orc_skip_columns_with_unsupported_types_in_schema_inference",level:3},{value:"output_format_orc_string_as_string",id:"output_format_orc_string_as_string",level:3},{value:"Parquet format settings",id:"parquet-format-settings",level:2},{value:"input_format_parquet_import_nested",id:"input_format_parquet_import_nested",level:3},{value:"input_format_parquet_case_insensitive_column_matching",id:"input_format_parquet_case_insensitive_column_matching",level:3},{value:"output_format_parquet_row_group_size",id:"output_format_parquet_row_group_size",level:3},{value:"input_format_parquet_allow_missing_columns",id:"input_format_parquet_allow_missing_columns",level:3},{value:"input_format_parquet_skip_columns_with_unsupported_types_in_schema_inference",id:"input_format_parquet_skip_columns_with_unsupported_types_in_schema_inference",level:3},{value:"output_format_parquet_string_as_string",id:"output_format_parquet_string_as_string",level:3},{value:"output_format_parquet_fixed_string_as_fixed_byte_array (#output_format_parquet_fixed_string_as_fixed_byte_array)",id:"output_format_parquet_fixed_string_as_fixed_byte_array-output_format_parquet_fixed_string_as_fixed_byte_array",level:3},{value:"output_format_parquet_version",id:"output_format_parquet_version",level:3},{value:"Hive format settings",id:"hive-format-settings",level:2},{value:"input_format_hive_text_fields_delimiter",id:"input_format_hive_text_fields_delimiter",level:3},{value:"input_format_hive_text_collection_items_delimiter",id:"input_format_hive_text_collection_items_delimiter",level:3},{value:"input_format_hive_text_map_keys_delimiter",id:"input_format_hive_text_map_keys_delimiter",level:3},{value:"MsgPack format settings",id:"msgpack-format-settings",level:2},{value:"input_format_msgpack_number_of_columns",id:"input_format_msgpack_number_of_columns",level:3},{value:"output_format_msgpack_uuid_representation",id:"output_format_msgpack_uuid_representation",level:3},{value:"Protobuf format settings",id:"protobuf-format-settings",level:2},{value:"input_format_protobuf_flatten_google_wrappers",id:"input_format_protobuf_flatten_google_wrappers",level:3},{value:"output_format_protobuf_nullables_with_google_wrappers",id:"output_format_protobuf_nullables_with_google_wrappers",level:3},{value:"Avro format settings",id:"avro-format-settings",level:2},{value:"input_format_avro_allow_missing_fields",id:"input_format_avro_allow_missing_fields",level:3},{value:"format_avro_schema_registry_url",id:"format_avro_schema_registry_url",level:3},{value:"output_format_avro_codec",id:"output_format_avro_codec",level:3},{value:"output_format_avro_sync_interval",id:"output_format_avro_sync_interval",level:3},{value:"output_format_avro_string_column_pattern",id:"output_format_avro_string_column_pattern",level:3},{value:"output_format_avro_rows_in_file",id:"output_format_avro_rows_in_file",level:3},{value:"Pretty formats settings",id:"pretty-formats-settings",level:2},{value:"output_format_pretty_max_rows",id:"output_format_pretty_max_rows",level:3},{value:"output_format_pretty_max_column_pad_width",id:"output_format_pretty_max_column_pad_width",level:3},{value:"output_format_pretty_max_value_width",id:"output_format_pretty_max_value_width",level:3},{value:"output_format_pretty_color",id:"output_format_pretty_color",level:3},{value:"output_format_pretty_grid_charset",id:"output_format_pretty_grid_charset",level:3},{value:"output_format_pretty_row_numbers",id:"output_format_pretty_row_numbers",level:3},{value:"Template format settings",id:"template-format-settings",level:2},{value:"format_template_resultset",id:"format_template_resultset",level:3},{value:"format_template_row",id:"format_template_row",level:3},{value:"format_template_rows_between_delimiter",id:"format_template_rows_between_delimiter",level:3},{value:"CustomSeparated format settings {custom-separated-format-settings}",id:"customseparated-format-settings-custom-separated-format-settings",level:2},{value:"format_custom_escaping_rule",id:"format_custom_escaping_rule",level:3},{value:"format_custom_field_delimiter",id:"format_custom_field_delimiter",level:3},{value:"format_custom_row_before_delimiter",id:"format_custom_row_before_delimiter",level:3},{value:"format_custom_row_after_delimiter",id:"format_custom_row_after_delimiter",level:3},{value:"format_custom_row_between_delimiter",id:"format_custom_row_between_delimiter",level:3},{value:"format_custom_result_before_delimiter",id:"format_custom_result_before_delimiter",level:3},{value:"format_custom_result_after_delimiter",id:"format_custom_result_after_delimiter",level:3},{value:"Regexp format settings",id:"regexp-format-settings",level:2},{value:"format_regexp_escaping_rule",id:"format_regexp_escaping_rule",level:3},{value:"format_regexp_skip_unmatched",id:"format_regexp_skip_unmatched",level:3},{value:"CapnProto format settings",id:"capn-proto-format-settings",level:2},{value:"format_capn_proto_enum_comparising_mode",id:"format_capn_proto_enum_comparising_mode",level:3},{value:"MySQLDump format settings",id:"musqldump-format-settings",level:2},{value:"input_format_mysql_dump_table_name (#input_format_mysql_dump_table_name)",id:"input_format_mysql_dump_table_name-input_format_mysql_dump_table_name",level:3},{value:"input_format_mysql_dump_map_columns (#input_format_mysql_dump_map_columns)",id:"input_format_mysql_dump_map_columns-input_format_mysql_dump_map_columns",level:3},{value:"SQLInsert format settings",id:"sqlinsert-format-settings",level:2},{value:"output_format_sql_insert_max_batch_size",id:"output_format_sql_insert_max_batch_size",level:3},{value:"output_format_sql_insert_table_name",id:"output_format_sql_insert_table_name",level:3},{value:"output_format_sql_insert_include_column_names",id:"output_format_sql_insert_include_column_names",level:3},{value:"output_format_sql_insert_use_replace",id:"output_format_sql_insert_use_replace",level:3},{value:"output_format_sql_insert_quote_names",id:"output_format_sql_insert_quote_names",level:3},{value:"BSONEachRow format settings",id:"bson-each-row-format-settings",level:2},{value:"output_format_bson_string_as_string",id:"output_format_bson_string_as_string",level:3},{value:"input_format_bson_skip_fields_with_unsupported_types_in_schema_inference",id:"input_format_bson_skip_fields_with_unsupported_types_in_schema_inference",level:3},{value:"RowBinary format settings",id:"row-binary-format-settings",level:2},{value:"format_binary_max_string_size",id:"format_binary_max_string_size",level:3}],u={toc:_},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"format-settings"},"Format settings"),(0,r.kt)("h2",{id:"input_format_skip_unknown_fields"},"input_format_skip_unknown_fields"),(0,r.kt)("p",null,"Enables or disables skipping insertion of extra data."),(0,r.kt)("p",null,"When writing data, ClickHouse throws an exception if input data contain columns that do not exist in the target table. If skipping is enabled, ClickHouse does not insert extra data and does not throw an exception."),(0,r.kt)("p",null,"Supported formats:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoneachrow"},"JSONEachRow")," (and other JSON formats)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#bsoneachrow"},"BSONEachRow")," (and other JSON formats)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tskv"},"TSKV")),(0,r.kt)("li",{parentName:"ul"},"All formats with suffixes WithNames/WithNamesAndTypes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#mysqldump"},"MySQLDump")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#native"},"Native"))),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("h2",{id:"input_format_with_names_use_header"},"input_format_with_names_use_header"),(0,r.kt)("p",null,"Enables or disables checking the column order when inserting data."),(0,r.kt)("p",null,"To improve insert performance, we recommend disabling this check if you are sure that the column order of the input data is the same as in the target table."),(0,r.kt)("p",null,"Supported formats:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#csvwithnames"},"CSVWithNames")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#csvwithnamesandtypes"},"CSVWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tabseparatedwithnames"},"TabSeparatedWithNames")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoncompacteachrowwithnames"},"JSONCompactEachRowWithNames")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoncompacteachrowwithnamesandtypes"},"JSONCompactEachRowWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoncompactstringseachrowwithnames"},"JSONCompactStringsEachRowWithNames")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoncompactstringseachrowwithnamesandtypes"},"JSONCompactStringsEachRowWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#rowbinarywithnames"},"RowBinaryWithNames")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#rowbinarywithnamesandtypes"},"RowBinaryWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#customseparatedwithnames"},"CustomSeparatedWithNames")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#customseparatedwithnamesandtypes"},"CustomSeparatedWithNamesAndTypes"))),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("h2",{id:"input_format_with_types_use_header"},"input_format_with_types_use_header"),(0,r.kt)("p",null,"Controls whether format parser should check if data types from the input data match data types from the target table."),(0,r.kt)("p",null,"Supported formats:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#csvwithnamesandtypes"},"CSVWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoncompacteachrowwithnamesandtypes"},"JSONCompactEachRowWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoncompactstringseachrowwithnamesandtypes"},"JSONCompactStringsEachRowWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#rowbinarywithnamesandtypes-rowbinarywithnamesandtypes"},"RowBinaryWithNamesAndTypes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#customseparatedwithnamesandtypes"},"CustomSeparatedWithNamesAndTypes"))),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("h2",{id:"input_format_defaults_for_omitted_fields"},"input_format_defaults_for_omitted_fields"),(0,r.kt)("p",null,"When performing ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT")," queries, replace omitted input column values with default values of the respective columns. This option applies to ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#jsoneachrow"},"JSONEachRow")," (and other JSON formats), ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#csv"},"CSV"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#tabseparated"},"TabSeparated"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#tskv"},"TSKV"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#parquet"},"Parquet"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#arrow"},"Arrow"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#avro"},"Avro"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#orc"},"ORC"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#native"},"Native")," formats and formats with ",(0,r.kt)("inlineCode",{parentName:"p"},"WithNames"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"WithNamesAndTypes")," suffixes."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"When this option is enabled, extended table metadata are sent from server to client. It consumes additional computing resources on the server and can reduce performance.")),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("h2",{id:"input_format_null_as_default"},"input_format_null_as_default"),(0,r.kt)("p",null,"Enables or disables the initialization of ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax/#null-literal"},"NULL")," fields with ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table/#create-default-values"},"default values"),", if data type of these fields is not ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nullable/#data_type-nullable"},"nullable"),".\nIf column type is not nullable and this setting is disabled, then inserting ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," causes an exception. If column type is nullable, then ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," values are inserted as is, regardless of this setting."),(0,r.kt)("p",null,"This setting is applicable for most input formats."),(0,r.kt)("p",null,"For complex default expressions ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_defaults_for_omitted_fields")," must be enabled too."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Inserting ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," into a not nullable column causes an exception."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," fields are initialized with default column values.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,r.kt)("h2",{id:"input_format_allow_seeks"},"input_format_allow_seeks"),(0,r.kt)("p",null,"Allow seeks while reading in ORC/Parquet/Arrow input formats."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"input_format_max_rows_to_read_for_schema_inference"},"input_format_max_rows_to_read_for_schema_inference"),(0,r.kt)("p",null,"The maximum rows of data to read for automatic schema inference."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"25'000"),"."),(0,r.kt)("h2",{id:"column_names_for_schema_inference"},"column_names_for_schema_inference"),(0,r.kt)("p",null,"The list of column names to use in schema inference for formats without column names. The format: 'column1,column2,column3,...'"),(0,r.kt)("h2",{id:"schema_inference_hints"},"schema_inference_hints"),(0,r.kt)("p",null,"The list of column names and types to use as hints in schema inference for formats without schema."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'desc format(JSONEachRow, \'{"x" : 1, "y" : "String", "z" : "0.0.0.0" }\') settings schema_inference_hints=\'x UInt8, z IPv4\';\n')),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"x   UInt8\ny   Nullable(String)\nz   IPv4\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"schema_inference_hints")," is not formated properly, or if there is a typo or a wrong datatype, etc... the whole schema_inference_hints will be ignored.")),(0,r.kt)("h2",{id:"schema_inference_make_columns_nullable"},"schema_inference_make_columns_nullable"),(0,r.kt)("p",null,"Controls making inferred types ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable")," in schema inference for formats without information about nullability.\nIf the setting is enabled, the inferred type will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable")," only if column contains ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," in a sample that is parsed during schema inference."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h2",{id:"input_format_try_infer_integers"},"input_format_try_infer_integers"),(0,r.kt)("p",null,"If enabled, ClickHouse will try to infer integers instead of floats in schema inference for text formats. If all numbers in the column from input data are integers, the result type will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64"),", if at least one number is float, the result type will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64"),"."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"input_format_try_infer_dates"},"input_format_try_infer_dates"),(0,r.kt)("p",null,"If enabled, ClickHouse will try to infer type ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," from string fields in schema inference for text formats. If all fields from a column in input data were successfully parsed as dates, the result type will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),", if at least one field was not parsed as date, the result type will be ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"input_format_try_infer_datetimes"},"input_format_try_infer_datetimes"),(0,r.kt)("p",null,"If enabled, ClickHouse will try to infer type ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime64")," from string fields in schema inference for text formats. If all fields from a column in input data were successfully parsed as datetimes, the result type will be ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime64"),", if at least one field was not parsed as datetime, the result type will be ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"date_time_input_format"},"date_time_input_format"),(0,r.kt)("p",null,"Allows choosing a parser of the text representation of date and time."),(0,r.kt)("p",null,"The setting does not apply to ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/date-time-functions"},"date and time functions"),"."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"'best_effort'")," \u2014 Enables extended parsing."),(0,r.kt)("p",{parentName:"li"},"ClickHouse can parse the basic ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD HH:MM:SS")," format and all ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601")," date and time formats. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"'2018-06-08T01:02:03.000Z'"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"'basic'")," \u2014 Use basic parser."),(0,r.kt)("p",{parentName:"li"},"ClickHouse can parse only the basic ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD HH:MM:SS")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD")," format. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"2019-08-20 10:18:56")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"2019-08-20"),"."))),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"'basic'"),"."),(0,r.kt)("p",null,"See also:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime data type.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/functions/date-time-functions"},"Functions for working with dates and times."))),(0,r.kt)("h2",{id:"date_time_output_format"},"date_time_output_format"),(0,r.kt)("p",null,"Allows choosing different output formats of the text representation of date and time."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"simple")," - Simple output format."),(0,r.kt)("p",{parentName:"li"},"ClickHouse output date and time ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD hh:mm:ss")," format. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"2019-08-20 10:18:56"),". The calculation is performed according to the data type's time zone (if present) or server time zone.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"iso")," - ISO output format."),(0,r.kt)("p",{parentName:"li"},"ClickHouse output date and time in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601")," ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDThh:mm:ssZ")," format. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"2019-08-20T10:18:56Z"),". Note that output is in UTC (",(0,r.kt)("inlineCode",{parentName:"p"},"Z")," means UTC).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"unix_timestamp")," - Unix timestamp output format."),(0,r.kt)("p",{parentName:"li"},"ClickHouse output date and time in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_time"},"Unix timestamp")," format. For example ",(0,r.kt)("inlineCode",{parentName:"p"},"1566285536"),"."))),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"simple"),"."),(0,r.kt)("p",null,"See also:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime data type.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/functions/date-time-functions"},"Functions for working with dates and times."))),(0,r.kt)("h2",{id:"input_format_ipv4_default_on_conversion_error"},"input_format_ipv4_default_on_conversion_error"),(0,r.kt)("p",null,"Deserialization of IPv4 will use default values instead of throwing exception on conversion error."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"input_format_ipv6_default_on_conversion_error"},"input_format_ipv6_default_on_conversion_error"),(0,r.kt)("p",null,"Deserialization of IPV6 will use default values instead of throwing exception on conversion error."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"bool_true_representation"},"bool_true_representation"),(0,r.kt)("p",null,"Text to represent true bool value in TSV/CSV/Vertical/Pretty formats."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")),(0,r.kt)("h2",{id:"bool_false_representation"},"bool_false_representation"),(0,r.kt)("p",null,"Text to represent false bool value in TSV/CSV/Vertical/Pretty formats."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("h2",{id:"output_format_decimal_trailing_zeros"},"output_format_decimal_trailing_zeros"),(0,r.kt)("p",null,"Output trailing zeros when printing Decimal values. E.g. 1.230000 instead of 1.23."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"input_format_allow_errors_num"},"input_format_allow_errors_num"),(0,r.kt)("p",null,"Sets the maximum number of acceptable errors when reading from text formats (CSV, TSV, etc.)."),(0,r.kt)("p",null,"The default value is 0."),(0,r.kt)("p",null,"Always pair it with ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_ratio"),"."),(0,r.kt)("p",null,"If an error occurred while reading rows but the error counter is still less than ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_num"),", ClickHouse ignores the row and moves on to the next one."),(0,r.kt)("p",null,"If both ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_num")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_ratio")," are exceeded, ClickHouse throws an exception."),(0,r.kt)("h2",{id:"input_format_allow_errors_ratio"},"input_format_allow_errors_ratio"),(0,r.kt)("p",null,"Sets the maximum percentage of errors allowed when reading from text formats (CSV, TSV, etc.).\nThe percentage of errors is set as a floating-point number between 0 and 1."),(0,r.kt)("p",null,"The default value is 0."),(0,r.kt)("p",null,"Always pair it with ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_num"),"."),(0,r.kt)("p",null,"If an error occurred while reading rows but the error counter is still less than ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_ratio"),", ClickHouse ignores the row and moves on to the next one."),(0,r.kt)("p",null,"If both ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_num")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_ratio")," are exceeded, ClickHouse throws an exception."),(0,r.kt)("h2",{id:"format-schema"},"format_schema"),(0,r.kt)("p",null,"This parameter is useful when you are using formats that require a schema definition, such as ",(0,r.kt)("a",{parentName:"p",href:"https://capnproto.org/"},"Cap\u2019n Proto")," or ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"Protobuf"),". The value depends on the format."),(0,r.kt)("h2",{id:"output_format_enable_streaming"},"output_format_enable_streaming"),(0,r.kt)("p",null,"Enable streaming in output formats that support it."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"output_format_write_statistics"},"output_format_write_statistics"),(0,r.kt)("p",null,"Write statistics about read rows, bytes, time elapsed in suitable output formats."),(0,r.kt)("p",null,"Enabled by default"),(0,r.kt)("h2",{id:"insert_distributed_one_random_shard"},"insert_distributed_one_random_shard"),(0,r.kt)("p",null,"Enables or disables random shard insertion into a ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/special/distributed/#distributed"},"Distributed")," table when there is no distributed key."),(0,r.kt)("p",null,"By default, when inserting data into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Distributed")," table with more than one shard, the ClickHouse server will reject any insertion request if there is no distributed key. When ",(0,r.kt)("inlineCode",{parentName:"p"},"insert_distributed_one_random_shard = 1"),", insertions are allowed and data is forwarded randomly among all shards."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Insertion is rejected if there are multiple shards and no distributed key is given."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Insertion is done randomly among all available shards when no distributed key is given.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h2",{id:"json-formats-settings"},"JSON formats settings"),(0,r.kt)("h2",{id:"input_format_import_nested_json"},"input_format_import_nested_json"),(0,r.kt)("p",null,"Enables or disables the insertion of JSON data with nested objects."),(0,r.kt)("p",null,"Supported formats:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoneachrow"},"JSONEachRow"))),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 0."),(0,r.kt)("p",null,"See also:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoneachrow-nested"},"Usage of Nested Structures")," with the ",(0,r.kt)("inlineCode",{parentName:"li"},"JSONEachRow")," format.")),(0,r.kt)("h2",{id:"input_format_json_read_bools_as_numbers"},"input_format_json_read_bools_as_numbers"),(0,r.kt)("p",null,"Allow parsing bools as numbers in JSON input formats."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"input_format_json_read_numbers_as_strings"},"input_format_json_read_numbers_as_strings"),(0,r.kt)("p",null,"Allow parsing numbers as strings in JSON input formats."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"input_format_json_read_objects_as_strings"},"input_format_json_read_objects_as_strings"),(0,r.kt)("p",null,"Allow parsing JSON objects as strings in JSON input formats."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SET input_format_json_read_objects_as_strings = 1;\nCREATE TABLE test (id UInt64, obj String, date Date) ENGINE=Memory();\nINSERT INTO test FORMAT JSONEachRow {"id" : 1, "obj" : {"a" : 1, "b" : "Hello"}, "date" : "2020-01-01"};\nSELECT * FROM test;\n')),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\u250c\u2500id\u2500\u252c\u2500obj\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u2510\n\u2502  1 \u2502 {"a" : 1, "b" : "Hello"} \u2502 2020-01-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"input_format_json_validate_types_from_metadata"},"input_format_json_validate_types_from_metadata"),(0,r.kt)("p",null,"For JSON/JSONCompact/JSONColumnsWithMetadata input formats, if this setting is set to 1,\nthe types from metadata in input data will be compared with the types of the corresponding columns from the table."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"output_format_json_quote_64bit_integers"},"output_format_json_quote_64bit_integers"),(0,r.kt)("p",null,"Controls quoting of 64-bit or bigger ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"integers")," (like ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt64")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Int128"),") when they are output in a ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#json"},"JSON")," format.\nSuch integers are enclosed in quotes by default. This behavior is compatible with most JavaScript implementations."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Integers are output without quotes."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Integers are enclosed in quotes.")),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("h2",{id:"output_format_json_quote_64bit_floats"},"output_format_json_quote_64bit_floats"),(0,r.kt)("p",null,"Controls quoting of 64-bit ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"floats")," when they are output in JSON* formats."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"output_format_json_quote_denormals"},"output_format_json_quote_denormals"),(0,r.kt)("p",null,"Enables ",(0,r.kt)("inlineCode",{parentName:"p"},"+nan"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-nan"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"+inf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-inf")," outputs in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#json"},"JSON")," output format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Consider the following table ",(0,r.kt)("inlineCode",{parentName:"p"},"account_orders"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500name\u2500\u2500\u2500\u252c\u2500duration\u2500\u252c\u2500period\u2500\u252c\u2500area\u2500\u2510\n\u2502  1 \u2502 Andrew \u2502       20 \u2502      0 \u2502  400 \u2502\n\u2502  2 \u2502 John   \u2502       40 \u2502      0 \u2502    0 \u2502\n\u2502  3 \u2502 Bob    \u2502       15 \u2502      0 \u2502 -100 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"output_format_json_quote_denormals = 0"),", the query returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," values in output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT area/period FROM account_orders FORMAT JSON;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n        "meta":\n        [\n                {\n                        "name": "divide(area, period)",\n                        "type": "Float64"\n                }\n        ],\n\n        "data":\n        [\n                {\n                        "divide(area, period)": null\n                },\n                {\n                        "divide(area, period)": null\n                },\n                {\n                        "divide(area, period)": null\n                }\n        ],\n\n        "rows": 3,\n\n        "statistics":\n        {\n                "elapsed": 0.003648093,\n                "rows_read": 3,\n                "bytes_read": 24\n        }\n}\n')),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"output_format_json_quote_denormals = 1"),", the query returns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n        "meta":\n        [\n                {\n                        "name": "divide(area, period)",\n                        "type": "Float64"\n                }\n        ],\n\n        "data":\n        [\n                {\n                        "divide(area, period)": "inf"\n                },\n                {\n                        "divide(area, period)": "-nan"\n                },\n                {\n                        "divide(area, period)": "-inf"\n                }\n        ],\n\n        "rows": 3,\n\n        "statistics":\n        {\n                "elapsed": 0.000070241,\n                "rows_read": 3,\n                "bytes_read": 24\n        }\n}\n')),(0,r.kt)("h2",{id:"output_format_json_quote_decimals"},"output_format_json_quote_decimals"),(0,r.kt)("p",null,"Controls quoting of decimals in JSON output formats."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"output_format_json_escape_forward_slashes"},"output_format_json_escape_forward_slashes"),(0,r.kt)("p",null,"Controls escaping forward slashes for string outputs in JSON output format. This is intended for compatibility with JavaScript. Don't confuse with backslashes that are always escaped."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"output_format_json_named_tuples_as_objects"},"output_format_json_named_tuples_as_objects"),(0,r.kt)("p",null,"Serialize named tuple columns as JSON objects."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"input_format_json_named_tuples_as_objects"},"input_format_json_named_tuples_as_objects"),(0,r.kt)("p",null,"Parse named tuple columns as JSON objects."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"input_format_json_ignore_unknown_keys_in_named_tuple"},"input_format_json_ignore_unknown_keys_in_named_tuple"),(0,r.kt)("p",null,"Ignore unknown keys in json object for named tuples."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"input_format_json_defaults_for_missing_elements_in_named_tuple"},"input_format_json_defaults_for_missing_elements_in_named_tuple"),(0,r.kt)("p",null,"Insert default values for missing elements in JSON object while parsing named tuple.\nThis setting works only when setting ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_json_named_tuples_as_objects")," is enabled."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"output_format_json_array_of_rows"},"output_format_json_array_of_rows"),(0,r.kt)("p",null,"Enables the ability to output all rows as a JSON array in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#jsoneachrow"},"JSONEachRow")," format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 \u2014 ClickHouse outputs all rows as an array, each row in the ",(0,r.kt)("inlineCode",{parentName:"li"},"JSONEachRow")," format."),(0,r.kt)("li",{parentName:"ul"},"0 \u2014 ClickHouse outputs each row separately in the ",(0,r.kt)("inlineCode",{parentName:"li"},"JSONEachRow")," format.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example of a query with the enabled setting")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET output_format_json_array_of_rows = 1;\nSELECT number FROM numbers(3) FORMAT JSONEachRow;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'[\n{"number":"0"},\n{"number":"1"},\n{"number":"2"}\n]\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example of a query with the disabled setting")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET output_format_json_array_of_rows = 0;\nSELECT number FROM numbers(3) FORMAT JSONEachRow;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"number":"0"}\n{"number":"1"}\n{"number":"2"}\n')),(0,r.kt)("h2",{id:"output_format_json_validate_utf8"},"output_format_json_validate_utf8"),(0,r.kt)("p",null,"Controls validation of UTF-8 sequences in JSON output formats, doesn't impact formats JSON/JSONCompact/JSONColumnsWithMetadata, they always validate UTF-8."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"format_json_object_each_row_column_for_object_name"},"format_json_object_each_row_column_for_object_name"),(0,r.kt)("p",null,"The name of column that will be used for storing/writing object names in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#jsonobjecteachrow"},"JSONObjectEachRow")," format.\nColumn type should be String. If value is empty, default names ",(0,r.kt)("inlineCode",{parentName:"p"},"row_{i}"),"will be used for object names."),(0,r.kt)("p",null,"Default value: ''."),(0,r.kt)("h2",{id:"tsv-format-settings"},"TSV format settings"),(0,r.kt)("h3",{id:"input_format_tsv_empty_as_default"},"input_format_tsv_empty_as_default"),(0,r.kt)("p",null,"When enabled, replace empty input fields in TSV with default values. For complex default expressions ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_defaults_for_omitted_fields")," must be enabled too."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_tsv_enum_as_number"},"input_format_tsv_enum_as_number"),(0,r.kt)("p",null,"When enabled, always treat enum values as enum ids for TSV input format. It's recommended to enable this setting if data contains only enum ids to optimize enum parsing."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Enum values are parsed as values or as enum IDs."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enum values are parsed only as enum IDs.")),(0,r.kt)("p",null,"Default value: 0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Consider the table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table_with_enum_column_for_tsv_insert (Id Int32,Value Enum('first' = 1, 'second' = 2)) ENGINE=Memory();\n")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_tsv_enum_as_number")," setting is enabled:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_tsv_enum_as_number = 1;\nINSERT INTO table_with_enum_column_for_tsv_insert FORMAT TSV 102    2;\nSELECT * FROM table_with_enum_column_for_tsv_insert;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500Id\u2500\u252c\u2500Value\u2500\u2500\u2510\n\u2502 102 \u2502 second \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_tsv_enum_as_number = 1;\nINSERT INTO table_with_enum_column_for_tsv_insert FORMAT TSV 103    'first';\n")),(0,r.kt)("p",null,"throws an exception."),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_tsv_enum_as_number")," setting is disabled:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_tsv_enum_as_number = 0;\nINSERT INTO table_with_enum_column_for_tsv_insert FORMAT TSV 102    2;\nINSERT INTO table_with_enum_column_for_tsv_insert FORMAT TSV 103    'first';\nSELECT * FROM table_with_enum_column_for_tsv_insert;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500Id\u2500\u252c\u2500Value\u2500\u2500\u2510\n\u2502 102 \u2502 second \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500Id\u2500\u252c\u2500Value\u2500\u2500\u2510\n\u2502 103 \u2502 first  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"input_format_tsv_use_best_effort_in_schema_inference"},"input_format_tsv_use_best_effort_in_schema_inference"),(0,r.kt)("p",null,"Use some tweaks and heuristics to infer schema in TSV format. If disabled, all fields will be treated as String."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h3",{id:"input_format_tsv_skip_first_lines"},"input_format_tsv_skip_first_lines"),(0,r.kt)("p",null,"The number of lines to skip at the beginning of data in TSV input format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"output_format_tsv_crlf_end_of_line"},"output_format_tsv_crlf_end_of_line"),(0,r.kt)("p",null,"Use DOC/Windows-style line separator (CRLF) in TSV instead of Unix style (LF)."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"format_tsv_null_representation"},"format_tsv_null_representation"),(0,r.kt)("p",null,"Defines the representation of ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#tabseparated"},"TSV")," output and input formats. User can set any string as a value, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"My NULL"),"."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"\\N"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM tsv_custom_null FORMAT TSV;\n")),(0,r.kt)("p",null,"Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"788\n\\N\n\\N\n")),(0,r.kt)("p",null,"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET format_tsv_null_representation = 'My NULL';\nSELECT * FROM tsv_custom_null FORMAT TSV;\n")),(0,r.kt)("p",null,"Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"788\nMy NULL\nMy NULL\n")),(0,r.kt)("h2",{id:"csv-format-settings"},"CSV format settings"),(0,r.kt)("h3",{id:"format_csv_delimiter"},"format_csv_delimiter"),(0,r.kt)("p",null,"The character is interpreted as a delimiter in the CSV data."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},","),"."),(0,r.kt)("h3",{id:"format_csv_allow_single_quotes"},"format_csv_allow_single_quotes"),(0,r.kt)("p",null,"If it is set to true, allow strings in single quotes."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h3",{id:"format_csv_allow_double_quotes"},"format_csv_allow_double_quotes"),(0,r.kt)("p",null,"If it is set to true, allow strings in double quotes."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h3",{id:"output_format_csv_crlf_end_of_line"},"output_format_csv_crlf_end_of_line"),(0,r.kt)("p",null,"Use DOS/Windows-style line separator (CRLF) in CSV instead of Unix style (LF)."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_csv_enum_as_number"},"input_format_csv_enum_as_number"),(0,r.kt)("p",null,"When enabled, always treat enum values as enum ids for CSV input format. It's recommended to enable this setting if data contains only enum ids to optimize enum parsing."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Enum values are parsed as values or as enum IDs."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enum values are parsed only as enum IDs.")),(0,r.kt)("p",null,"Default value: 0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Consider the table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table_with_enum_column_for_csv_insert (Id Int32,Value Enum('first' = 1, 'second' = 2)) ENGINE=Memory();\n")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_csv_enum_as_number")," setting is enabled:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_csv_enum_as_number = 1;\nINSERT INTO table_with_enum_column_for_csv_insert FORMAT CSV 102,2\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500Id\u2500\u252c\u2500Value\u2500\u2500\u2510\n\u2502 102 \u2502 second \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_csv_enum_as_number = 1;\nINSERT INTO table_with_enum_column_for_csv_insert FORMAT CSV 103,'first'\n")),(0,r.kt)("p",null,"throws an exception."),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_csv_enum_as_number")," setting is disabled:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_csv_enum_as_number = 0;\nINSERT INTO table_with_enum_column_for_csv_insert FORMAT CSV 102,2\nINSERT INTO table_with_enum_column_for_csv_insert FORMAT CSV 103,'first'\nSELECT * FROM table_with_enum_column_for_csv_insert;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500Id\u2500\u252c\u2500Value\u2500\u2500\u2510\n\u2502 102 \u2502 second \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500Id\u2500\u252c\u2500Value\u2500\u2510\n\u2502 103 \u2502 first \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"input_format_csv_arrays_as_nested_csv"},"input_format_csv_arrays_as_nested_csv"),(0,r.kt)("p",null,'When reading Array from CSV, expect that its elements were serialized in nested CSV and then put into string. Example: "','[""Hello"", ""world"", ""42"""" TV""]','". Braces around array can be omitted.'),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_csv_empty_as_default"},"input_format_csv_empty_as_default"),(0,r.kt)("p",null,"When enabled, replace empty input fields in CSV with default values. For complex default expressions ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_defaults_for_omitted_fields")," must be enabled too."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h3",{id:"input_format_csv_use_best_effort_in_schema_inference"},"input_format_csv_use_best_effort_in_schema_inference"),(0,r.kt)("p",null,"Use some tweaks and heuristics to infer schema in CSV format. If disabled, all fields will be treated as String."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h3",{id:"input_format_csv_skip_first_lines"},"input_format_csv_skip_first_lines"),(0,r.kt)("p",null,"The number of lines to skip at the beginning of data in CSV input format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"format_csv_null_representation"},"format_csv_null_representation"),(0,r.kt)("p",null,"Defines the representation of ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#csv"},"CSV")," output and input formats. User can set any string as a value, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"My NULL"),"."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"\\N"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from csv_custom_null FORMAT CSV;\n")),(0,r.kt)("p",null,"Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"788\n\\N\n\\N\n")),(0,r.kt)("p",null,"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET format_csv_null_representation = 'My NULL';\nSELECT * FROM csv_custom_null FORMAT CSV;\n")),(0,r.kt)("p",null,"Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"788\nMy NULL\nMy NULL\n")),(0,r.kt)("h2",{id:"values-format-settings"},"Values format settings"),(0,r.kt)("h3",{id:"input_format_values_interpret_expressions"},"input_format_values_interpret_expressions"),(0,r.kt)("p",null,"Enables or disables the full SQL parser if the fast stream parser can\u2019t parse the data. This setting is used only for the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-values"},"Values")," format at the data insertion. For more information about syntax parsing, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax"},"Syntax")," section."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"0 \u2014 Disabled."),(0,r.kt)("p",{parentName:"li"},"In this case, you must provide formatted data. See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats"},"Formats")," section.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"1 \u2014 Enabled."),(0,r.kt)("p",{parentName:"li"},"In this case, you can use an SQL expression as a value, but data insertion is much slower this way. If you insert only formatted data, then ClickHouse behaves as if the setting value is 0."))),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("p",null,"Example of Use"),(0,r.kt)("p",null,"Insert the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime")," type value with the different settings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_values_interpret_expressions = 0;\nINSERT INTO datetime_t VALUES (now())\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Exception on client:\nCode: 27. DB::Exception: Cannot parse input: expected ) before: now()): (at row 1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_values_interpret_expressions = 1;\nINSERT INTO datetime_t VALUES (now())\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Ok.\n")),(0,r.kt)("p",null,"The last query is equivalent to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_values_interpret_expressions = 0;\nINSERT INTO datetime_t SELECT now()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Ok.\n")),(0,r.kt)("h3",{id:"input_format_values_deduce_templates_of_expressions"},"input_format_values_deduce_templates_of_expressions"),(0,r.kt)("p",null,"Enables or disables template deduction for SQL expressions in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-values"},"Values")," format. It allows parsing and interpreting expressions in ",(0,r.kt)("inlineCode",{parentName:"p"},"Values")," much faster if expressions in consecutive rows have the same structure. ClickHouse tries to deduce the template of an expression, parse the following rows using this template and evaluate the expression on a batch of successfully parsed rows."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("p",null,"For the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO test VALUES (lower('Hello')), (lower('world')), (lower('INSERT')), (upper('Values')), ...\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"input_format_values_interpret_expressions=1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"format_values_deduce_templates_of_expressions=0"),", expressions are interpreted separately for each row (this is very slow for large number of rows)."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"input_format_values_interpret_expressions=0")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"format_values_deduce_templates_of_expressions=1"),", expressions in the first, second and third rows are parsed using template ",(0,r.kt)("inlineCode",{parentName:"li"},"lower(String)")," and interpreted together, expression in the forth row is parsed with another template (",(0,r.kt)("inlineCode",{parentName:"li"},"upper(String)"),")."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"input_format_values_interpret_expressions=1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"format_values_deduce_templates_of_expressions=1"),", the same as in previous case, but also allows fallback to interpreting expressions separately if it\u2019s not possible to deduce template.")),(0,r.kt)("h3",{id:"input_format_values_accurate_types_of_literals"},"input_format_values_accurate_types_of_literals"),(0,r.kt)("p",null,"This setting is used only when ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_values_deduce_templates_of_expressions = 1"),". Expressions for some column may have the same structure, but contain numeric literals of different types, e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"(..., abs(0), ...),             -- UInt64 literal\n(..., abs(3.141592654), ...),   -- Float64 literal\n(..., abs(-1), ...),            -- Int64 literal\n")),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"0 \u2014 Disabled."),(0,r.kt)("p",{parentName:"li"},"In this case, ClickHouse may use a more general type for some literals (e.g.,\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Float64")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt64")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"42"),"), but it may cause overflow and precision issues.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"1 \u2014 Enabled."),(0,r.kt)("p",{parentName:"li"},"In this case, ClickHouse checks the actual type of literal and uses an expression template of the corresponding type. In some cases, it may significantly slow down expression evaluation in ",(0,r.kt)("inlineCode",{parentName:"p"},"Values"),"."))),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("h2",{id:"arrow-format-settings"},"Arrow format settings"),(0,r.kt)("h3",{id:"input_format_arrow_import_nested"},"input_format_arrow_import_nested"),(0,r.kt)("p",null,"Enables or disables the ability to insert the data into ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," columns as an array of structs in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data_types-matching-arrow"},"Arrow")," input format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Data can not be inserted into ",(0,r.kt)("inlineCode",{parentName:"li"},"Nested")," columns as an array of structs."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Data can be inserted into ",(0,r.kt)("inlineCode",{parentName:"li"},"Nested")," columns as an array of structs.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"input_format_arrow_case_insensitive_column_matching"},"input_format_arrow_case_insensitive_column_matching"),(0,r.kt)("p",null,"Ignore case when matching Arrow column names with ClickHouse column names."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_arrow_allow_missing_columns"},"input_format_arrow_allow_missing_columns"),(0,r.kt)("p",null,"While importing data, when column is not found in schema default value will be used instead of error."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_arrow_skip_columns_with_unsupported_types_in_schema_inference"},"input_format_arrow_skip_columns_with_unsupported_types_in_schema_inference"),(0,r.kt)("p",null,"Allow skipping columns with unsupported types while schema inference for format Arrow."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"output_format_arrow_low_cardinality_as_dictionary"},"output_format_arrow_low_cardinality_as_dictionary"),(0,r.kt)("p",null,"Allows to convert the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/lowcardinality"},"LowCardinality")," type to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DICTIONARY")," type of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-arrow"},"Arrow")," format for ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 The ",(0,r.kt)("inlineCode",{parentName:"li"},"LowCardinality")," type is not converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DICTIONARY")," type."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 The ",(0,r.kt)("inlineCode",{parentName:"li"},"LowCardinality")," type is converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DICTIONARY")," type.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"output_format_arrow_string_as_string"},"output_format_arrow_string_as_string"),(0,r.kt)("p",null,"Use Arrow String type instead of Binary for String columns."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"output_format_arrow_fixed_string_as_fixed_byte_array-output_format_arrow_fixed_string_as_fixed_byte_array"},"output_format_arrow_fixed_string_as_fixed_byte_array (#output_format_arrow_fixed_string_as_fixed_byte_array)"),(0,r.kt)("p",null,"Use Arrow FIXED_SIZE_BINARY type instead of Binary/String for FixedString columns."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h2",{id:"orc-format-settings"},"ORC format settings"),(0,r.kt)("h3",{id:"input_format_orc_import_nested"},"input_format_orc_import_nested"),(0,r.kt)("p",null,"Enables or disables the ability to insert the data into ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," columns as an array of structs in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-orc"},"ORC")," input format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Data can not be inserted into ",(0,r.kt)("inlineCode",{parentName:"li"},"Nested")," columns as an array of structs."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Data can be inserted into ",(0,r.kt)("inlineCode",{parentName:"li"},"Nested")," columns as an array of structs.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"input_format_orc_row_batch_size"},"input_format_orc_row_batch_size"),(0,r.kt)("p",null,"Batch size when reading ORC stripes."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"100'000")),(0,r.kt)("h3",{id:"input_format_orc_case_insensitive_column_matching"},"input_format_orc_case_insensitive_column_matching"),(0,r.kt)("p",null,"Ignore case when matching ORC column names with ClickHouse column names."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_orc_allow_missing_columns"},"input_format_orc_allow_missing_columns"),(0,r.kt)("p",null,"While importing data, when column is not found in schema default value will be used instead of error."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_orc_skip_columns_with_unsupported_types_in_schema_inference"},"input_format_orc_skip_columns_with_unsupported_types_in_schema_inference"),(0,r.kt)("p",null,"Allow skipping columns with unsupported types while schema inference for format Arrow."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"output_format_orc_string_as_string"},"output_format_orc_string_as_string"),(0,r.kt)("p",null,"Use ORC String type instead of Binary for String columns."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"parquet-format-settings"},"Parquet format settings"),(0,r.kt)("h3",{id:"input_format_parquet_import_nested"},"input_format_parquet_import_nested"),(0,r.kt)("p",null,"Enables or disables the ability to insert the data into ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," columns as an array of structs in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-parquet"},"Parquet")," input format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Data can not be inserted into ",(0,r.kt)("inlineCode",{parentName:"li"},"Nested")," columns as an array of structs."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Data can be inserted into ",(0,r.kt)("inlineCode",{parentName:"li"},"Nested")," columns as an array of structs.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"input_format_parquet_case_insensitive_column_matching"},"input_format_parquet_case_insensitive_column_matching"),(0,r.kt)("p",null,"Ignore case when matching Parquet column names with ClickHouse column names."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"output_format_parquet_row_group_size"},"output_format_parquet_row_group_size"),(0,r.kt)("p",null,"Row group size in rows."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"1'000'000"),"."),(0,r.kt)("h3",{id:"input_format_parquet_allow_missing_columns"},"input_format_parquet_allow_missing_columns"),(0,r.kt)("p",null,"While importing data, when column is not found in schema default value will be used instead of error."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_parquet_skip_columns_with_unsupported_types_in_schema_inference"},"input_format_parquet_skip_columns_with_unsupported_types_in_schema_inference"),(0,r.kt)("p",null,"Allow skipping columns with unsupported types while schema inference for format Parquet."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"output_format_parquet_string_as_string"},"output_format_parquet_string_as_string"),(0,r.kt)("p",null,"Use Parquet String type instead of Binary for String columns."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"output_format_parquet_fixed_string_as_fixed_byte_array-output_format_parquet_fixed_string_as_fixed_byte_array"},"output_format_parquet_fixed_string_as_fixed_byte_array (#output_format_parquet_fixed_string_as_fixed_byte_array)"),(0,r.kt)("p",null,"Use Parquet FIXED_LENGTH_BYTE_ARRAY type instead of Binary/String for FixedString columns."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h3",{id:"output_format_parquet_version"},"output_format_parquet_version"),(0,r.kt)("p",null,"The version of Parquet format used in output format. Supported versions: ",(0,r.kt)("inlineCode",{parentName:"p"},"1.0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2.4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2.6")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"2.latest"),"."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"2.latest"),"."),(0,r.kt)("h2",{id:"hive-format-settings"},"Hive format settings"),(0,r.kt)("h3",{id:"input_format_hive_text_fields_delimiter"},"input_format_hive_text_fields_delimiter"),(0,r.kt)("p",null,"Delimiter between fields in Hive Text File."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"\\x01"),"."),(0,r.kt)("h3",{id:"input_format_hive_text_collection_items_delimiter"},"input_format_hive_text_collection_items_delimiter"),(0,r.kt)("p",null,"Delimiter between collection(array or map) items in Hive Text File."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"\\x02"),"."),(0,r.kt)("h3",{id:"input_format_hive_text_map_keys_delimiter"},"input_format_hive_text_map_keys_delimiter"),(0,r.kt)("p",null,"Delimiter between a pair of map key/values in Hive Text File."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"\\x03"),"."),(0,r.kt)("h2",{id:"msgpack-format-settings"},"MsgPack format settings"),(0,r.kt)("h3",{id:"input_format_msgpack_number_of_columns"},"input_format_msgpack_number_of_columns"),(0,r.kt)("p",null,"The number of columns in inserted MsgPack data. Used for automatic schema inference from data."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"output_format_msgpack_uuid_representation"},"output_format_msgpack_uuid_representation"),(0,r.kt)("p",null,"The way how to output UUID in MsgPack format.\nPossible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bin")," - as 16-bytes binary."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str")," - as a string of 36 bytes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ext")," - as extention with ExtType = 2.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"ext"),"."),(0,r.kt)("h2",{id:"protobuf-format-settings"},"Protobuf format settings"),(0,r.kt)("h3",{id:"input_format_protobuf_flatten_google_wrappers"},"input_format_protobuf_flatten_google_wrappers"),(0,r.kt)("p",null,"Enable Google wrappers for regular non-nested columns, e.g. google.protobuf.StringValue 'str' for String column 'str'. For Nullable columns empty wrappers are recognized as defaults, and missing as nulls."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"output_format_protobuf_nullables_with_google_wrappers"},"output_format_protobuf_nullables_with_google_wrappers"),(0,r.kt)("p",null,"When serializing Nullable columns with Google wrappers, serialize default values as empty wrappers. If turned off, default and null values are not serialized."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"avro-format-settings"},"Avro format settings"),(0,r.kt)("h3",{id:"input_format_avro_allow_missing_fields"},"input_format_avro_allow_missing_fields"),(0,r.kt)("p",null,"Enables using fields that are not specified in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-avro"},"Avro")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-avro-confluent"},"AvroConfluent")," format schema. When a field is not found in the schema, ClickHouse uses the default value instead of throwing an exception."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 0."),(0,r.kt)("h3",{id:"format_avro_schema_registry_url"},"format_avro_schema_registry_url"),(0,r.kt)("p",null,"Sets ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/current/schema-registry/index.html"},"Confluent Schema Registry")," URL to use with ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-avro-confluent"},"AvroConfluent")," format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"Empty"),"."),(0,r.kt)("h3",{id:"output_format_avro_codec"},"output_format_avro_codec"),(0,r.kt)("p",null,"Sets the compression codec used for output Avro file."),(0,r.kt)("p",null,"Type: string"),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null")," \u2014 No compression"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deflate")," \u2014 Compress with Deflate (zlib)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"snappy")," \u2014 Compress with ",(0,r.kt)("a",{parentName:"li",href:"https://google.github.io/snappy/"},"Snappy"))),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"snappy")," (if available) or ",(0,r.kt)("inlineCode",{parentName:"p"},"deflate"),"."),(0,r.kt)("h3",{id:"output_format_avro_sync_interval"},"output_format_avro_sync_interval"),(0,r.kt)("p",null,"Sets minimum data size (in bytes) between synchronization markers for output Avro file."),(0,r.kt)("p",null,"Type: unsigned int"),(0,r.kt)("p",null,"Possible values: 32 (32 bytes) - 1073741824 (1 GiB)"),(0,r.kt)("p",null,"Default value: 32768 (32 KiB)"),(0,r.kt)("h3",{id:"output_format_avro_string_column_pattern"},"output_format_avro_string_column_pattern"),(0,r.kt)("p",null,"Regexp of column names of type String to output as Avro ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," (default is ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes"),").\nRE2 syntax is supported."),(0,r.kt)("p",null,"Type: string"),(0,r.kt)("h3",{id:"output_format_avro_rows_in_file"},"output_format_avro_rows_in_file"),(0,r.kt)("p",null,"Max rows in a file (if permitted by storage)."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,r.kt)("h2",{id:"pretty-formats-settings"},"Pretty formats settings"),(0,r.kt)("h3",{id:"output_format_pretty_max_rows"},"output_format_pretty_max_rows"),(0,r.kt)("p",null,"Rows limit for Pretty formats."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"10'000"),"."),(0,r.kt)("h3",{id:"output_format_pretty_max_column_pad_width"},"output_format_pretty_max_column_pad_width"),(0,r.kt)("p",null,"Maximum width to pad all values in a column in Pretty formats."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"250"),"."),(0,r.kt)("h3",{id:"output_format_pretty_max_value_width"},"output_format_pretty_max_value_width"),(0,r.kt)("p",null,"Limits the width of value displayed in ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#pretty"},"Pretty")," formats. If the value width exceeds the limit, the value is cut."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Positive integer."),(0,r.kt)("li",{parentName:"ul"},"0 \u2014 The value is cut completely.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"10000")," symbols."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET output_format_pretty_max_value_width = 10;\nSELECT range(number) FROM system.numbers LIMIT 10 FORMAT PrettyCompactNoEscapes;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500range(number)\u2500\u2510\n\u2502 []            \u2502\n\u2502 [0]           \u2502\n\u2502 [0,1]         \u2502\n\u2502 [0,1,2]       \u2502\n\u2502 [0,1,2,3]     \u2502\n\u2502 [0,1,2,3,4\u22ef   \u2502\n\u2502 [0,1,2,3,4\u22ef   \u2502\n\u2502 [0,1,2,3,4\u22ef   \u2502\n\u2502 [0,1,2,3,4\u22ef   \u2502\n\u2502 [0,1,2,3,4\u22ef   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query with zero width:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET output_format_pretty_max_value_width = 0;\nSELECT range(number) FROM system.numbers LIMIT 5 FORMAT PrettyCompactNoEscapes;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500range(number)\u2500\u2510\n\u2502 \u22ef             \u2502\n\u2502 \u22ef             \u2502\n\u2502 \u22ef             \u2502\n\u2502 \u22ef             \u2502\n\u2502 \u22ef             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"output_format_pretty_color"},"output_format_pretty_color"),(0,r.kt)("p",null,"Use ANSI escape sequences to paint colors in Pretty formats."),(0,r.kt)("p",null,"Enabled by default."),(0,r.kt)("h3",{id:"output_format_pretty_grid_charset"},"output_format_pretty_grid_charset"),(0,r.kt)("p",null,"Allows changing a charset which is used for printing grids borders. Available charsets are UTF-8, ASCII."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"SET output_format_pretty_grid_charset = 'UTF-8';\nSELECT * FROM a;\n\u250c\u2500a\u2500\u2510\n\u2502 1 \u2502\n\u2514\u2500\u2500\u2500\u2518\n\nSET output_format_pretty_grid_charset = 'ASCII';\nSELECT * FROM a;\n+-a-+\n| 1 |\n+---+\n")),(0,r.kt)("h3",{id:"output_format_pretty_row_numbers"},"output_format_pretty_row_numbers"),(0,r.kt)("p",null,"Adds row numbers to output in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#pretty"},"Pretty")," format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Output without row numbers."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Output with row numbers.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET output_format_pretty_row_numbers = 1;\nSELECT TOP 3 name, value FROM system.settings;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"   \u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500value\u2500\u2500\u2500\u2510\n1. \u2502 min_compress_block_size \u2502 65536   \u2502\n2. \u2502 max_compress_block_size \u2502 1048576 \u2502\n3. \u2502 max_block_size          \u2502 65505   \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"template-format-settings"},"Template format settings"),(0,r.kt)("h3",{id:"format_template_resultset"},"format_template_resultset"),(0,r.kt)("p",null,"Path to file which contains format string for result set (for Template format)."),(0,r.kt)("h3",{id:"format_template_row"},"format_template_row"),(0,r.kt)("p",null,"Path to file which contains format string for rows (for Template format)."),(0,r.kt)("h3",{id:"format_template_rows_between_delimiter"},"format_template_rows_between_delimiter"),(0,r.kt)("p",null,"Delimiter between rows (for Template format)."),(0,r.kt)("h2",{id:"customseparated-format-settings-custom-separated-format-settings"},"CustomSeparated format settings {custom-separated-format-settings}"),(0,r.kt)("h3",{id:"format_custom_escaping_rule"},"format_custom_escaping_rule"),(0,r.kt)("p",null,"Sets the field escaping rule for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#format-customseparated"},"CustomSeparated")," data format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'Escaped'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tabseparated"},"TSV"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'Quoted'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#data-format-values"},"Values"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'CSV'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#csv"},"CSV"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'JSON'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoneachrow"},"JSONEachRow"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'XML'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#xml"},"XML"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'Raw'")," \u2014 Extracts subpatterns as a whole, no escaping rules, similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tabseparatedraw"},"TSVRaw"),".")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"'Escaped'"),"."),(0,r.kt)("h3",{id:"format_custom_field_delimiter"},"format_custom_field_delimiter"),(0,r.kt)("p",null,"Sets the character that is interpreted as a delimiter between the fields for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#format-customseparated"},"CustomSeparated")," data format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"'\\t'"),"."),(0,r.kt)("h3",{id:"format_custom_row_before_delimiter"},"format_custom_row_before_delimiter"),(0,r.kt)("p",null,"Sets the character that is interpreted as a delimiter before the field of the first column for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#format-customseparated"},"CustomSeparated")," data format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,r.kt)("h3",{id:"format_custom_row_after_delimiter"},"format_custom_row_after_delimiter"),(0,r.kt)("p",null,"Sets the character that is interpreted as a delimiter after the field of the last column for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#format-customseparated"},"CustomSeparated")," data format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"'\\n'"),"."),(0,r.kt)("h3",{id:"format_custom_row_between_delimiter"},"format_custom_row_between_delimiter"),(0,r.kt)("p",null,"Sets the character that is interpreted as a delimiter between the rows for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#format-customseparated"},"CustomSeparated")," data format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,r.kt)("h3",{id:"format_custom_result_before_delimiter"},"format_custom_result_before_delimiter"),(0,r.kt)("p",null,"Sets the character that is interpreted as a prefix before the result set for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#format-customseparated"},"CustomSeparated")," data format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,r.kt)("h3",{id:"format_custom_result_after_delimiter"},"format_custom_result_after_delimiter"),(0,r.kt)("p",null,"Sets the character that is interpreted as a suffix after the result set for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#format-customseparated"},"CustomSeparated")," data format."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,r.kt)("h2",{id:"regexp-format-settings"},"Regexp format settings"),(0,r.kt)("h3",{id:"format_regexp_escaping_rule"},"format_regexp_escaping_rule"),(0,r.kt)("p",null,"Field escaping rule."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'Escaped'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tabseparated"},"TSV"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'Quoted'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#data-format-values"},"Values"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'CSV'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#csv"},"CSV"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'JSON'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#jsoneachrow"},"JSONEachRow"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'XML'")," \u2014 Similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#xml"},"XML"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'Raw'")," \u2014 Extracts subpatterns as a whole, no escaping rules, similarly to ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats/#tabseparatedraw"},"TSVRaw"),".")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"Raw"),"."),(0,r.kt)("h3",{id:"format_regexp_skip_unmatched"},"format_regexp_skip_unmatched"),(0,r.kt)("p",null,"Skip lines unmatched by regular expression."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"capn-proto-format-settings"},"CapnProto format settings"),(0,r.kt)("h3",{id:"format_capn_proto_enum_comparising_mode"},"format_capn_proto_enum_comparising_mode"),(0,r.kt)("p",null,"Determines how to map ClickHouse ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum")," data type and ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#capnproto"},"CapnProto")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum")," data type from schema."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'by_values'")," \u2014 Values in enums should be the same, names can be different."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'by_names'")," \u2014 Names in enums should be the same, values can be different."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'by_name_case_insensitive'")," \u2014 Names in enums should be the same case-insensitive, values can be different.")),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"'by_values'"),"."),(0,r.kt)("h2",{id:"musqldump-format-settings"},"MySQLDump format settings"),(0,r.kt)("h3",{id:"input_format_mysql_dump_table_name-input_format_mysql_dump_table_name"},"input_format_mysql_dump_table_name (#input_format_mysql_dump_table_name)"),(0,r.kt)("p",null,"The name of the table from which to read data from in MySQLDump input format."),(0,r.kt)("h3",{id:"input_format_mysql_dump_map_columns-input_format_mysql_dump_map_columns"},"input_format_mysql_dump_map_columns (#input_format_mysql_dump_map_columns)"),(0,r.kt)("p",null,"Enables matching columns from table in MySQL dump and columns from ClickHouse table by names in MySQLDump input format."),(0,r.kt)("p",null,"Possible values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 \u2014 Disabled."),(0,r.kt)("li",{parentName:"ul"},"1 \u2014 Enabled.")),(0,r.kt)("p",null,"Default value: 1."),(0,r.kt)("h2",{id:"sqlinsert-format-settings"},"SQLInsert format settings"),(0,r.kt)("h3",{id:"output_format_sql_insert_max_batch_size"},"output_format_sql_insert_max_batch_size"),(0,r.kt)("p",null,"The maximum number of rows in one INSERT statement."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"65505"),"."),(0,r.kt)("h3",{id:"output_format_sql_insert_table_name"},"output_format_sql_insert_table_name"),(0,r.kt)("p",null,"The name of table that will be used in the output INSERT statement."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"'table''"),"."),(0,r.kt)("h3",{id:"output_format_sql_insert_include_column_names"},"output_format_sql_insert_include_column_names"),(0,r.kt)("p",null,"Include column names in INSERT statement."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"output_format_sql_insert_use_replace"},"output_format_sql_insert_use_replace"),(0,r.kt)("p",null,"Use REPLACE keyword instead of INSERT."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h3",{id:"output_format_sql_insert_quote_names"},"output_format_sql_insert_quote_names"),(0,r.kt)("p",null,'Quote column names with "`" characters'),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h2",{id:"bson-each-row-format-settings"},"BSONEachRow format settings"),(0,r.kt)("h3",{id:"output_format_bson_string_as_string"},"output_format_bson_string_as_string"),(0,r.kt)("p",null,"Use BSON String type instead of Binary for String columns."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h3",{id:"input_format_bson_skip_fields_with_unsupported_types_in_schema_inference"},"input_format_bson_skip_fields_with_unsupported_types_in_schema_inference"),(0,r.kt)("p",null,"Allow skipping columns with unsupported types while schema inference for format BSONEachRow."),(0,r.kt)("p",null,"Disabled by default."),(0,r.kt)("h2",{id:"row-binary-format-settings"},"RowBinary format settings"),(0,r.kt)("h3",{id:"format_binary_max_string_size"},"format_binary_max_string_size"),(0,r.kt)("p",null,"The maximum allowed size for String in RowBinary format. It prevents allocating large amount of memory in case of corrupted data. 0 means there is no limit."),(0,r.kt)("p",null,"Default value: ",(0,r.kt)("inlineCode",{parentName:"p"},"1GiB")))}m.isMDXComponent=!0}}]);