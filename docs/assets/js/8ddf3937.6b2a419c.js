"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[1166],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>h});var n=t(67294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),p=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(i.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,h=m["".concat(i,".").concat(u)]||m[u]||d[u]||s;return t?n.createElement(h,r(r({ref:a},c),{},{components:t})):n.createElement(h,r({ref:a},c))}));function h(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=u;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<s;p++)r[p]=t[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},71844:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=t(87462),o=(t(67294),t(3905));const s={sidebar_label:"JSON",sidebar_position:2,slug:"/en/integrations/data-formats/json"},r="Importing and exporting JSON data in ClickHouse",l={unversionedId:"en/integrations/data-ingestion/data-formats/json",id:"en/integrations/data-ingestion/data-formats/json",title:"Importing and exporting JSON data in ClickHouse",description:"JSON is a popular format for exchanging data between different layers of modern applications. ClickHouse provides many tuning options to support almost any form of JSON data.",source:"@site/docs/en/integrations/data-ingestion/data-formats/json.md",sourceDirName:"en/integrations/data-ingestion/data-formats",slug:"/en/integrations/data-formats/json",permalink:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/json",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/data-ingestion/data-formats/json.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"JSON",sidebar_position:2,slug:"/en/integrations/data-formats/json"}},i={},p=[{value:"Importing JSON data",id:"importing-json-data",level:2},{value:"Importing from an array of JSON objects",id:"importing-from-an-array-of-json-objects",level:3},{value:"Handling NDJSON (line delimited JSON)",id:"handling-ndjson-line-delimited-json",level:4},{value:"Importing from JSON object keys",id:"importing-from-json-object-keys",level:3},{value:"Importing parent object key values",id:"importing-parent-object-key-values",level:4},{value:"Importing from JSON arrays",id:"importing-from-json-arrays",level:3},{value:"Importing individual columns from JSON arrays",id:"importing-individual-columns-from-json-arrays",level:3},{value:"Saving JSON objects instead of parsing",id:"saving-json-objects-instead-of-parsing",level:3},{value:"Data types detection when importing JSON data",id:"data-types-detection-when-importing-json-data",level:2},{value:"JSON objects with nested objects",id:"json-objects-with-nested-objects",level:2},{value:"Nested JSON objects",id:"nested-json-objects",level:3},{value:"Skipping unknown columns",id:"skipping-unknown-columns",level:2},{value:"Exporting JSON data",id:"exporting-json-data",level:2},{value:"Overriding data types as strings",id:"overriding-data-types-as-strings",level:3},{value:"Exporting metadata together with data",id:"exporting-metadata-together-with-data",level:3},{value:"Compact way to export JSON data and structure",id:"compact-way-to-export-json-data-and-structure",level:4},{value:"Exporting JSON to a file",id:"exporting-json-to-a-file",level:3},{value:"Importing and exporting BSON",id:"importing-and-exporting-bson",level:2},{value:"Other formats",id:"other-formats",level:2}],c={toc:p},m="wrapper";function d(e){let{components:a,...s}=e;return(0,o.kt)(m,(0,n.Z)({},c,s,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"importing-and-exporting-json-data-in-clickhouse"},"Importing and exporting JSON data in ClickHouse"),(0,o.kt)("p",null,"JSON is a popular format for exchanging data between different layers of modern applications. ClickHouse provides many tuning options to support almost any form of JSON data."),(0,o.kt)("h2",{id:"importing-json-data"},"Importing JSON data"),(0,o.kt)("p",null,"To import JSON data, we first have to define which JSON type to use. This will depend on how the input data is structured."),(0,o.kt)("admonition",{title:"JSON tutorial",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"For a step by step tutorial with a large JSON dataset, please see ",(0,o.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/guides/developer/working-with-json/json-load-data"},"Loading JSON in 5 steps"),".")),(0,o.kt)("h3",{id:"importing-from-an-array-of-json-objects"},"Importing from an array of JSON objects"),(0,o.kt)("p",null,"One of the most popular forms of JSON data is having a list of JSON objects in a JSON array, like in ",(0,o.kt)("a",{target:"_blank",href:t(19239).Z},"this example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> cat list.json\n[\n  {\n    "path": "Akiba_Hebrew_Academy",\n    "month": "2017-08-01",\n    "hits": 241\n  },\n  {\n    "path": "Aegithina_tiphia",\n    "month": "2018-02-01",\n    "hits": 34\n  },\n  ...\n]\n')),(0,o.kt)("p",null,"Let\u2019s create a table for this kind of data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE sometable\n(\n    `path` String,\n    `month` Date,\n    `hits` UInt32\n)\nENGINE = MergeTree\nORDER BY tuple(month, path)\n")),(0,o.kt)("p",null,"To import a list of JSON objects, we can use a ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoneachrow"},"JSONEachRow")," format (inserting data from ",(0,o.kt)("a",{target:"_blank",href:t(19239).Z},"list.json")," file):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sometable\nFROM INFILE 'list.json'\nFORMAT JSONEachRow\n")),(0,o.kt)("p",null,"We have used a ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/insert-into.md/#inserting-data-from-a-file"},"FROM INFILE")," clause to load data from the local file, and we can see import was successful:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM sometable\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 1971-72_Utah_Stars_season \u2502 2016-10-01 \u2502    1 \u2502\n\u2502 Akiba_Hebrew_Academy      \u2502 2017-08-01 \u2502  241 \u2502\n\u2502 Aegithina_tiphia          \u2502 2018-02-01 \u2502   34 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("h4",{id:"handling-ndjson-line-delimited-json"},"Handling NDJSON (line delimited JSON)"),(0,o.kt)("p",null,"Many apps can log data in JSON format so that each log line is an individual JSON object, like in ",(0,o.kt)("a",{target:"_blank",href:t(43817).Z},"this file"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat object-per-line.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'{"path":"1-krona","month":"2017-01-01","hits":4}\n{"path":"Ahmadabad-e_Kalij-e_Sofla","month":"2017-01-01","hits":3}\n{"path":"Bob_Dolman","month":"2016-11-01","hits":245}\n')),(0,o.kt)("p",null,"The same ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONEachRow")," format is capable of working with such files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sometable FROM INFILE 'object-per-line.json' FORMAT JSONEachRow;\nSELECT * FROM sometable;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 Bob_Dolman                \u2502 2016-11-01 \u2502  245 \u2502\n\u2502 1-krona                   \u2502 2017-01-01 \u2502    4 \u2502\n\u2502 Ahmadabad-e_Kalij-e_Sofla \u2502 2017-01-01 \u2502    3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("h3",{id:"importing-from-json-object-keys"},"Importing from JSON object keys"),(0,o.kt)("p",null,"In some cases, the list of JSON objects can be encoded as object properties instead of array elements (see ",(0,o.kt)("a",{target:"_blank",href:t(40743).Z},"objects.json")," for example):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cat objects.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'{\n  "a": {\n    "path":"April_25,_2017",\n    "month":"2018-01-01",\n    "hits":2\n  },\n  "b": {\n    "path":"Akahori_Station",\n    "month":"2016-06-01",\n    "hits":11\n  },\n  ...\n}\n')),(0,o.kt)("p",null,"ClickHouse can load data from this kind of data using ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsonobjecteachrow"},"JSONObjectEachRow")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sometable FROM INFILE 'objects.json' FORMAT JSONObjectEachRow;\nSELECT * FROM sometable;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 Abducens_palsy  \u2502 2016-05-01 \u2502   28 \u2502\n\u2502 Akahori_Station \u2502 2016-06-01 \u2502   11 \u2502\n\u2502 April_25,_2017  \u2502 2018-01-01 \u2502    2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("h4",{id:"importing-parent-object-key-values"},"Importing parent object key values"),(0,o.kt)("p",null,"Let\u2019s say we also want to save values in parent object keys to the table. In this case, we can use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/settings-formats.md/#format_json_object_each_row_column_for_object_name"},"following option")," to define the name of the column we want key values to be saved to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SET format_json_object_each_row_column_for_object_name = 'id'\n")),(0,o.kt)("p",null,"Now we can check which data is going to be loaded from the original JSON file using ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/files.md/#file"},"file()")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM file('objects.json', JSONObjectEachRow)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500id\u2500\u252c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 a  \u2502 April_25,_2017  \u2502 2018-01-01 \u2502    2 \u2502\n\u2502 b  \u2502 Akahori_Station \u2502 2016-06-01 \u2502   11 \u2502\n\u2502 c  \u2502 Abducens_palsy  \u2502 2016-05-01 \u2502   28 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("p",null,"Note how the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," column has been populated by key values correctly."),(0,o.kt)("h3",{id:"importing-from-json-arrays"},"Importing from JSON arrays"),(0,o.kt)("p",null,"Sometimes, for the sake of saving space, JSON files are encoded in arrays instead of objects. In this case, we deal with a ",(0,o.kt)("a",{target:"_blank",href:t(61268).Z},"list of JSON arrays"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat arrays.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'["Akiba_Hebrew_Academy", "2017-08-01", 241],\n["Aegithina_tiphia", "2018-02-01", 34],\n["1971-72_Utah_Stars_season", "2016-10-01", 1]\n')),(0,o.kt)("p",null,"In this case, ClickHouse will load this data and attribute each value to the corresponding column based on its order in the array. We use ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoncompacteachrow"},"JSONCompactEachRow")," format for this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 1971-72_Utah_Stars_season \u2502 2016-10-01 \u2502    1 \u2502\n\u2502 Akiba_Hebrew_Academy      \u2502 2017-08-01 \u2502  241 \u2502\n\u2502 Aegithina_tiphia          \u2502 2018-02-01 \u2502   34 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("h3",{id:"importing-individual-columns-from-json-arrays"},"Importing individual columns from JSON arrays"),(0,o.kt)("p",null,"In some cases, data can be encoded column-wise instead of row-wise. In this case, a parent JSON object contains columns with values. Take a look at the ",(0,o.kt)("a",{target:"_blank",href:t(1996).Z},"following file"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat columns.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'{\n  "path": ["2007_Copa_America", "Car_dealerships_in_the_USA", "Dihydromyricetin_reductase"],\n  "month": ["2016-07-01", "2015-07-01", "2015-07-01"],\n  "hits": [178, 11, 1]\n}\n')),(0,o.kt)("p",null,"ClickHouse uses ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoncolumns"},"JSONColumns")," format to parse data formatted like that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM file('columns.json', JSONColumns)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 2007_Copa_America          \u2502 2016-07-01 \u2502  178 \u2502\n\u2502 Car_dealerships_in_the_USA \u2502 2015-07-01 \u2502   11 \u2502\n\u2502 Dihydromyricetin_reductase \u2502 2015-07-01 \u2502    1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("p",null,"A more compact format is also supported when dealing with an ",(0,o.kt)("a",{target:"_blank",href:t(11638).Z},"array of columns")," instead of an object using ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoncompactcolumns"},"JSONCompactColumns")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM file('columns-array.json', JSONCompactColumns)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500c1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c2\u2500\u252c\u2500c3\u2500\u2510\n\u2502 Heidenrod       \u2502 2017-01-01 \u2502 10 \u2502\n\u2502 Arthur_Henrique \u2502 2016-11-01 \u2502 12 \u2502\n\u2502 Alan_Ebnother   \u2502 2015-11-01 \u2502 66 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("h3",{id:"saving-json-objects-instead-of-parsing"},"Saving JSON objects instead of parsing"),(0,o.kt)("p",null,"There are cases you might want to save JSON objects to a single String (or JSON) column instead of parsing it. This can be useful when dealing with a list of JSON objects of different structures. Let\u2019s take ",(0,o.kt)("a",{target:"_blank",href:t(46287).Z},"this file"),", where we have multiple different JSON objects inside a parent list:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat custom.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'[\n  {"name": "Joe", "age": 99, "type": "person"},\n  {"url": "/my.post.MD", "hits": 1263, "type": "post"},\n  {"message": "Warning on disk usage", "type": "log"}\n]\n')),(0,o.kt)("p",null,"We want to save original JSON objects into the following table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE events\n(\n    `data` String\n)\nENGINE = MergeTree\nORDER BY ()\n")),(0,o.kt)("p",null,"Now we can load data from the file into this table using ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsonasstring"},"JSONAsString")," format to keep JSON objects instead of parsing them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO events (data)\nFROM INFILE 'custom.json'\nFORMAT JSONAsString\n")),(0,o.kt)("p",null,"And we can use ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/json-functions.md"},"JSON functions")," to query saved objects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    JSONExtractString(data, 'type') AS type,\n    data\nFROM events\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'\u250c\u2500type\u2500\u2500\u2500\u252c\u2500data\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 person \u2502 {"name": "Joe", "age": 99, "type": "person"}         \u2502\n\u2502 post   \u2502 {"url": "/my.post.MD", "hits": 1263, "type": "post"} \u2502\n\u2502 log    \u2502 {"message": "Warning on disk usage", "type": "log"}  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,o.kt)("p",null,"Consider using ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/schema-inference.md/#json-as-object"},"JSONAsObject")," together with a new ",(0,o.kt)("a",{parentName:"p",href:"/AlgoliaDocsSelfCrawl/en/guides/developer/working-with-json/json-semi-structured/#json-object-type"},"JSON data type")," to store and process JSON in tables in a more efficient way. Note that JSONAsString works perfectly fine in cases we have JSON object-per-line formatted files (usually used with ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONEachRow")," format)."),(0,o.kt)("h2",{id:"data-types-detection-when-importing-json-data"},"Data types detection when importing JSON data"),(0,o.kt)("p",null,"ClickHouse does some magic to guess the best types while importing JSON data. We can use a ",(0,o.kt)("inlineCode",{parentName:"p"},"DESCRIBE")," clause to check which types were defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE TABLE file('list.json', JSONEachRow)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500name\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u252c\u2500ttl_expression\u2500\u2510\n\u2502 path  \u2502 Nullable(String) \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\n\u2502 month \u2502 Nullable(Date)   \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\n\u2502 hits  \u2502 Nullable(Int64)  \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("p",null,"This allows quickly creating tables from JSON files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE new_table\nENGINE = MergeTree\nORDER BY tuple() AS\nSELECT *\nFROM file('list.json', JSONEachRow)\n")),(0,o.kt)("p",null,"Detected types will be used for this table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE TABLE new_table\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500name\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u252c\u2500ttl_expression\u2500\u2510\n\u2502 path  \u2502 Nullable(String) \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\n\u2502 month \u2502 Nullable(Date)   \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\n\u2502 hits  \u2502 Nullable(Int64)  \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("h2",{id:"json-objects-with-nested-objects"},"JSON objects with nested objects"),(0,o.kt)("p",null,"In cases we're dealing with ",(0,o.kt)("a",{target:"_blank",href:t(76678).Z},"nested JSON objects"),", we can additionally define schema and use complex types (",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/array.md/"},"Array"),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/json.md/"},"JSON")," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple.md/"},"Tuple"),") to load data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM file('list-nested.json', JSONEachRow, 'page JSON, month Date, hits UInt32')\nLIMIT 1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'\u250c\u2500page\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 {"owner_id":12,"path":"Akiba_Hebrew_Academy","title":"Akiba Hebrew Academy"} \u2502 2017-08-01 \u2502  241 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,o.kt)("h3",{id:"nested-json-objects"},"Nested JSON objects"),(0,o.kt)("p",null,"We can refer to nested JSON keys by enabling the ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/settings-formats.md/#input_format_import_nested_json"},"following settings option"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_import_nested_json = 1\n")),(0,o.kt)("p",null,"This allows us to refer to nested JSON object keys using dot notation (remember to wrap those with backtick symbols to work):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM file('list-nested.json', JSONEachRow, '`page.owner_id` UInt32, `page.title` String, month Date, hits UInt32')\nLIMIT 1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-results"},"\u250c\u2500page.owner_id\u2500\u252c\u2500page.title\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502            12 \u2502 Akiba Hebrew Academy \u2502 2017-08-01 \u2502  241 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("p",null,"This way, we can flatten nested JSON objects or use some nested values to save them as separate columns."),(0,o.kt)("h2",{id:"skipping-unknown-columns"},"Skipping unknown columns"),(0,o.kt)("p",null,"By default, ClickHouse will ignore unknown columns when importing JSON data. Let\u2019s try to import the original file into the table without the ",(0,o.kt)("inlineCode",{parentName:"p"},"month")," column:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE shorttable\n(\n    `path` String,\n    `hits` UInt32\n)\nENGINE = MergeTree\nORDER BY path\n")),(0,o.kt)("p",null,"We can still insert the ",(0,o.kt)("a",{target:"_blank",href:t(19239).Z},"original JSON data")," with 3 columns into this table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO shorttable FROM INFILE 'list.json' FORMAT JSONEachRow;\nSELECT * FROM shorttable\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500hits\u2500\u2510\n\u2502 1971-72_Utah_Stars_season \u2502    1 \u2502\n\u2502 Aegithina_tiphia          \u2502   34 \u2502\n\u2502 Akiba_Hebrew_Academy      \u2502  241 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("p",null,"ClickHouse will ignore unknown columns while importing. This can be disabled with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/settings-formats.md/#input_format_skip_unknown_fields"},"input_format_skip_unknown_fields")," settings option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SET input_format_skip_unknown_fields = 0;\nINSERT INTO shorttable FROM INFILE 'list.json' FORMAT JSONEachRow;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"Ok.\nException on client:\nCode: 117. DB::Exception: Unknown field found while parsing JSONEachRow format: month: (in file/uri /data/clickhouse/user_files/list.json): (at row 1)\n")),(0,o.kt)("p",null,"ClickHouse will throw exceptions in cases of inconsistent JSON and table columns structure."),(0,o.kt)("h2",{id:"exporting-json-data"},"Exporting JSON data"),(0,o.kt)("p",null,"Almost any JSON format used for import can be used for export as well. The most popular is ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoneachrow"},"JSONEachRow"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable FORMAT JSONEachRow\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'{"path":"Bob_Dolman","month":"2016-11-01","hits":245}\n{"path":"1-krona","month":"2017-01-01","hits":4}\n{"path":"Ahmadabad-e_Kalij-e_Sofla","month":"2017-01-01","hits":3}\n')),(0,o.kt)("p",null,"Or we can use JSONCompactEachRow to save disk space by skipping column names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable FORMAT JSONCompactEachRow\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'["Bob_Dolman", "2016-11-01", 245]\n["1-krona", "2017-01-01", 4]\n["Ahmadabad-e_Kalij-e_Sofla", "2017-01-01", 3]\n')),(0,o.kt)("h3",{id:"overriding-data-types-as-strings"},"Overriding data types as strings"),(0,o.kt)("p",null,"ClickHouse respects data types and will export JSON accordingly to standards. But in cases we need to have all values encoded as strings, we can use ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsonstringseachrow"},"JSONStringsEachRow")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable FORMAT JSONStringsEachRow\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'{"path":"Bob_Dolman","month":"2016-11-01","hits":"245"}\n{"path":"1-krona","month":"2017-01-01","hits":"4"}\n{"path":"Ahmadabad-e_Kalij-e_Sofla","month":"2017-01-01","hits":"3"}\n')),(0,o.kt)("p",null,"Now ",(0,o.kt)("inlineCode",{parentName:"p"},"hits")," numeric column is encoded as a string. Exporting as strings is supported for all JSON* formats, just explore ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONStrings\\*")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONCompactStrings\\*")," formats:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable FORMAT JSONCompactStringsEachRow\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'["Bob_Dolman", "2016-11-01", "245"]\n["1-krona", "2017-01-01", "4"]\n["Ahmadabad-e_Kalij-e_Sofla", "2017-01-01", "3"]\n')),(0,o.kt)("h3",{id:"exporting-metadata-together-with-data"},"Exporting metadata together with data"),(0,o.kt)("p",null,"General ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#json"},"JSON")," format, which is popular in apps, will export not only resulting data but column types and query stats:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable FORMAT JSON\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'{\n    "meta":\n    [\n        {\n            "name": "path",\n            "type": "String"\n        },\n        \u2026\n    ],\n\n    "data":\n    [\n        {\n            "path": "Bob_Dolman",\n            "month": "2016-11-01",\n            "hits": 245\n        },\n        \u2026\n    ],\n\n    "rows": 3,\n\n    "statistics":\n    {\n        "elapsed": 0.000497457,\n        "rows_read": 3,\n        "bytes_read": 87\n    }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoncompact"},"JSONCompact")," format will print the same metadata, but use a compacted form for the data itself:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable FORMAT JSONCompact\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'{\n    "meta":\n    [\n        {\n            "name": "path",\n            "type": "String"\n        },\n        \u2026\n    ],\n\n    "data":\n    [\n        ["Bob_Dolman", "2016-11-01", 245],\n        ["1-krona", "2017-01-01", 4],\n        ["Ahmadabad-e_Kalij-e_Sofla", "2017-01-01", 3]                                                                                                                                                     \n    ],\n\n    "rows": 3,\n\n    "statistics":\n    {\n        "elapsed": 0.00074981,\n        "rows_read": 3,\n        "bytes_read": 87\n    }\n}\n')),(0,o.kt)("p",null,"Consider ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsonstrings"},"JSONStrings")," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoncompactstrings"},"JSONCompactStrings")," variants to encode all values as strings."),(0,o.kt)("h4",{id:"compact-way-to-export-json-data-and-structure"},"Compact way to export JSON data and structure"),(0,o.kt)("p",null,"A more efficient way to have data, as well as it\u2019s structure, is to use ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#jsoncompacteachrowwithnamesandtypes"},"JSONCompactEachRowWithNamesAndTypes")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable FORMAT JSONCompactEachRowWithNamesAndTypes\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},'["path", "month", "hits"]\n["String", "Date", "UInt32"]\n["Bob_Dolman", "2016-11-01", 245]\n["1-krona", "2017-01-01", 4]\n["Ahmadabad-e_Kalij-e_Sofla", "2017-01-01", 3]\n')),(0,o.kt)("p",null,"This will use a compact JSON format prepended by two header rows with column names and types. This format can then be used to ingest data into another ClickHouse instance (or other apps)."),(0,o.kt)("h3",{id:"exporting-json-to-a-file"},"Exporting JSON to a file"),(0,o.kt)("p",null,"To save exported JSON data to a file, we can use an ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/select/into-outfile.md"},"INTO OUTFILE")," clause:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable INTO OUTFILE 'out.json' FORMAT JSONEachRow\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"36838935 rows in set. Elapsed: 2.220 sec. Processed 36.84 million rows, 1.27 GB (16.60 million rows/s., 572.47 MB/s.)\n")),(0,o.kt)("p",null,"It took ClickHouse only 2 seconds to export almost 37m records to a JSON file. We can also export using a ",(0,o.kt)("inlineCode",{parentName:"p"},"COMPRESSION")," clause to enable compression on the fly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable INTO OUTFILE 'out.json.gz' FORMAT JSONEachRow\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"36838935 rows in set. Elapsed: 22.680 sec. Processed 36.84 million rows, 1.27 GB (1.62 million rows/s., 56.02 MB/s.)\n")),(0,o.kt)("p",null,"It takes more time to accomplish but generates a much smaller compressed file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"2.2G    out.json\n576M    out.json.gz\n")),(0,o.kt)("h2",{id:"importing-and-exporting-bson"},"Importing and exporting BSON"),(0,o.kt)("p",null,"ClickHouse allows exporting to and importing data from ",(0,o.kt)("a",{parentName:"p",href:"https://bsonspec.org/"},"BSON")," encoded files. This format is used by some DBMSs, e.g. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mongodb/mongo"},"MongoDB")," database."),(0,o.kt)("p",null,"To import BSON data, we use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats.md/#bsoneachrow"},"BSONEachRow")," format. Let\u2019s import data from ",(0,o.kt)("a",{target:"_blank",href:t(4670).Z},"this BSON file"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM file('data.bson', BSONEachRow)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500month\u2500\u252c\u2500hits\u2500\u2510\n\u2502 Bob_Dolman                \u2502 17106 \u2502  245 \u2502\n\u2502 1-krona                   \u2502 17167 \u2502    4 \u2502\n\u2502 Ahmadabad-e_Kalij-e_Sofla \u2502 17167 \u2502    3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("p",null,"And we can also export to BSON files using the same format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM sometable\nINTO OUTFILE 'out.bson'\nFORMAT BSONEachRow\n")),(0,o.kt)("p",null,"After that, we\u2019ll have our data exported to the ",(0,o.kt)("inlineCode",{parentName:"p"},"out.bson")," file."),(0,o.kt)("h2",{id:"other-formats"},"Other formats"),(0,o.kt)("p",null,"ClickHouse introduces support for many formats, both text, and binary, to cover various scenarios and platforms. Explore more formats and ways to work with them in the following articles:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/csv-tsv"},"CSV and TSV formats")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/parquet-arrow-avro-orc"},"Parquet, Avro, Arrow and ORC")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"JSON formats")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/templates-regexp"},"Regex and templates")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/binary-native"},"Native and binary formats")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/AlgoliaDocsSelfCrawl/en/integrations/data-formats/sql"},"SQL formats"))),(0,o.kt)("p",null,"And also check ",(0,o.kt)("a",{parentName:"p",href:"https://clickhouse.com/blog/extracting-converting-querying-local-files-with-sql-clickhouse-local"},"clickhouse-local")," - a portable full-featured tool to work on local/remote files without the need for ClickHouse server."))}d.isMDXComponent=!0},61268:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/arrays-312007dfdc6340fedc824785b471aab5.json"},11638:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/columns-array-c8efc8e942324c6820ce841d68336180.json"},1996:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/columns-b5f7725e736f41c9f065342a554e79cf.json"},46287:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/custom-aad5c988b86a38da5e95f5d76aa438e6.json"},4670:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/data-fba81c8aea76b4e71c16bcb3b8a6a77a.bson"},76678:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/list-nested-ea2507b8a6fd7aabe23665516cf650e2.json"},19239:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/list-e590894c9dcb14bad20ba201c5806dca.json"},43817:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/object-per-line-915f97178ec782235df704ab5cc9f029.json"},40743:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/objects-c065aaa42144df69198a696f6811321b.json"}}]);